# -*- coding: utf-8 -*-
# code generated by Prisma. DO NOT EDIT.
# pyright: reportUnusedImport=false
# fmt: off

# global imports for type checking
from builtins import bool as _bool
from builtins import int as _int
from builtins import float as _float
from builtins import str as _str
import sys
import decimal
import datetime
from typing import (
    TYPE_CHECKING,
    Optional,
    Iterable,
    Iterator,
    Sequence,
    Callable,
    ClassVar,
    NoReturn,
    TypeVar,
    Generic,
    Mapping,
    Tuple,
    Union,
    List,
    Dict,
    Type,
    Any,
    Set,
    overload,
    cast,
)
from typing_extensions import TypedDict, Literal


LiteralString = str
# -- template models.py.jinja --
from pydantic import BaseModel

from . import fields, actions
from ._types import FuncType
from ._builder import serialize_base64
from ._compat import PYDANTIC_V2, ConfigDict

if TYPE_CHECKING:
    from .client import Prisma


_PrismaModelT = TypeVar('_PrismaModelT', bound='_PrismaModel')


class _PrismaModel(BaseModel):
    if PYDANTIC_V2:
        model_config: ClassVar[ConfigDict] = ConfigDict(
            use_enum_values=True,
            arbitrary_types_allowed=True,
            populate_by_name=True,
        )
    elif not TYPE_CHECKING:
        from ._compat import BaseConfig

        class Config(BaseConfig):
            use_enum_values: bool = True
            arbitrary_types_allowed: bool = True
            allow_population_by_field_name: bool = True
            json_encoders: Dict[Any, FuncType] = {
                fields.Base64: serialize_base64,
            }

    # TODO: ensure this is required by subclasses
    __prisma_model__: ClassVar[str]


class BaseAchievement(_PrismaModel):
    __prisma_model__: ClassVar[Literal['Achievement']] = 'Achievement'  # pyright: ignore[reportIncompatibleVariableOverride]

    @classmethod
    def prisma(cls: Type[_PrismaModelT], client: Optional['Prisma'] = None) -> 'actions.AchievementActions[_PrismaModelT]':
        from .client import get_client

        return actions.AchievementActions[_PrismaModelT](client or get_client(), cls)


class BaseCamera(_PrismaModel):
    __prisma_model__: ClassVar[Literal['Camera']] = 'Camera'  # pyright: ignore[reportIncompatibleVariableOverride]

    @classmethod
    def prisma(cls: Type[_PrismaModelT], client: Optional['Prisma'] = None) -> 'actions.CameraActions[_PrismaModelT]':
        from .client import get_client

        return actions.CameraActions[_PrismaModelT](client or get_client(), cls)


class BaseEffectiveness(_PrismaModel):
    __prisma_model__: ClassVar[Literal['Effectiveness']] = 'Effectiveness'  # pyright: ignore[reportIncompatibleVariableOverride]

    @classmethod
    def prisma(cls: Type[_PrismaModelT], client: Optional['Prisma'] = None) -> 'actions.EffectivenessActions[_PrismaModelT]':
        from .client import get_client

        return actions.EffectivenessActions[_PrismaModelT](client or get_client(), cls)


class BaseEnvironmentalData(_PrismaModel):
    __prisma_model__: ClassVar[Literal['EnvironmentalData']] = 'EnvironmentalData'  # pyright: ignore[reportIncompatibleVariableOverride]

    @classmethod
    def prisma(cls: Type[_PrismaModelT], client: Optional['Prisma'] = None) -> 'actions.EnvironmentalDataActions[_PrismaModelT]':
        from .client import get_client

        return actions.EnvironmentalDataActions[_PrismaModelT](client or get_client(), cls)


class BaseEvent(_PrismaModel):
    __prisma_model__: ClassVar[Literal['Event']] = 'Event'  # pyright: ignore[reportIncompatibleVariableOverride]

    @classmethod
    def prisma(cls: Type[_PrismaModelT], client: Optional['Prisma'] = None) -> 'actions.EventActions[_PrismaModelT]':
        from .client import get_client

        return actions.EventActions[_PrismaModelT](client or get_client(), cls)


class BaseForecast(_PrismaModel):
    __prisma_model__: ClassVar[Literal['Forecast']] = 'Forecast'  # pyright: ignore[reportIncompatibleVariableOverride]

    @classmethod
    def prisma(cls: Type[_PrismaModelT], client: Optional['Prisma'] = None) -> 'actions.ForecastActions[_PrismaModelT]':
        from .client import get_client

        return actions.ForecastActions[_PrismaModelT](client or get_client(), cls)


class BaseIncident(_PrismaModel):
    __prisma_model__: ClassVar[Literal['Incident']] = 'Incident'  # pyright: ignore[reportIncompatibleVariableOverride]

    @classmethod
    def prisma(cls: Type[_PrismaModelT], client: Optional['Prisma'] = None) -> 'actions.IncidentActions[_PrismaModelT]':
        from .client import get_client

        return actions.IncidentActions[_PrismaModelT](client or get_client(), cls)


class BaseNotification(_PrismaModel):
    __prisma_model__: ClassVar[Literal['Notification']] = 'Notification'  # pyright: ignore[reportIncompatibleVariableOverride]

    @classmethod
    def prisma(cls: Type[_PrismaModelT], client: Optional['Prisma'] = None) -> 'actions.NotificationActions[_PrismaModelT]':
        from .client import get_client

        return actions.NotificationActions[_PrismaModelT](client or get_client(), cls)


class BaseScenario(_PrismaModel):
    __prisma_model__: ClassVar[Literal['Scenario']] = 'Scenario'  # pyright: ignore[reportIncompatibleVariableOverride]

    @classmethod
    def prisma(cls: Type[_PrismaModelT], client: Optional['Prisma'] = None) -> 'actions.ScenarioActions[_PrismaModelT]':
        from .client import get_client

        return actions.ScenarioActions[_PrismaModelT](client or get_client(), cls)


class BaseSocialReport(_PrismaModel):
    __prisma_model__: ClassVar[Literal['SocialReport']] = 'SocialReport'  # pyright: ignore[reportIncompatibleVariableOverride]

    @classmethod
    def prisma(cls: Type[_PrismaModelT], client: Optional['Prisma'] = None) -> 'actions.SocialReportActions[_PrismaModelT]':
        from .client import get_client

        return actions.SocialReportActions[_PrismaModelT](client or get_client(), cls)


class BaseTrafficData(_PrismaModel):
    __prisma_model__: ClassVar[Literal['TrafficData']] = 'TrafficData'  # pyright: ignore[reportIncompatibleVariableOverride]

    @classmethod
    def prisma(cls: Type[_PrismaModelT], client: Optional['Prisma'] = None) -> 'actions.TrafficDataActions[_PrismaModelT]':
        from .client import get_client

        return actions.TrafficDataActions[_PrismaModelT](client or get_client(), cls)


class BaseTrafficLight(_PrismaModel):
    __prisma_model__: ClassVar[Literal['TrafficLight']] = 'TrafficLight'  # pyright: ignore[reportIncompatibleVariableOverride]

    @classmethod
    def prisma(cls: Type[_PrismaModelT], client: Optional['Prisma'] = None) -> 'actions.TrafficLightActions[_PrismaModelT]':
        from .client import get_client

        return actions.TrafficLightActions[_PrismaModelT](client or get_client(), cls)


