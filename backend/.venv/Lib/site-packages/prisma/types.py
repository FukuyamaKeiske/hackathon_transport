# -*- coding: utf-8 -*-
# code generated by Prisma. DO NOT EDIT.
# pyright: reportUnusedImport=false
# fmt: off

# global imports for type checking
from builtins import bool as _bool
from builtins import int as _int
from builtins import float as _float
from builtins import str as _str
import sys
import decimal
import datetime
from typing import (
    TYPE_CHECKING,
    Optional,
    Iterable,
    Iterator,
    Sequence,
    Callable,
    ClassVar,
    NoReturn,
    TypeVar,
    Generic,
    Mapping,
    Tuple,
    Union,
    List,
    Dict,
    Type,
    Any,
    Set,
    overload,
    cast,
)
from typing_extensions import TypedDict, Literal


LiteralString = str
# -- template types.py.jinja --
from typing import TypeVar

import httpx
from . import _types
from .utils import _NoneType



# TODO: filters with aggregates should have their own recursive fields
# TODO: cleanup whitespace control
# TODO: add an argument to signify that the last iteration should be skipped


SortMode = _types.SortMode
SortOrder = _types.SortOrder

MetricsFormat = _types.MetricsFormat

DatasourceOverride = _types.DatasourceOverride
HttpConfig = _types.HttpConfig


# types that can be serialized to json by our query builder
Serializable = Union[
    None,
    bool,
    float,
    int,
    str,
    datetime.datetime,
    List[Any],
    Dict[None, Any],
    Dict[bool, Any],
    Dict[float, Any],
    Dict[int, Any],
    Dict[str, Any],
]


    

StringFilter = TypedDict(
    'StringFilter',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive1'],
        'mode': SortMode,
        'search': str,
    },
    total=False,
)


StringFilterRecursive1 = TypedDict(
    'StringFilterRecursive1',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive2'],
        'mode': SortMode,
        'search': str,
    },
    total=False,
)


StringFilterRecursive2 = TypedDict(
    'StringFilterRecursive2',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive3'],
        'mode': SortMode,
        'search': str,
    },
    total=False,
)


StringFilterRecursive3 = TypedDict(
    'StringFilterRecursive3',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive4'],
        'mode': SortMode,
        'search': str,
    },
    total=False,
)


StringFilterRecursive4 = TypedDict(
    'StringFilterRecursive4',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
                'mode': SortMode,
        'search': str,
    },
    total=False,
)


class StringWithAggregatesFilter(StringFilter, total=False):
    _max: 'StringFilter'
    _min: 'StringFilter'
    _sum: 'StringFilter'
    _avg: 'StringFilter'
    _count: 'IntFilter'


    

DateTimeFilter = TypedDict(
    'DateTimeFilter',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive1'],
    },
    total=False,
)


DateTimeFilterRecursive1 = TypedDict(
    'DateTimeFilterRecursive1',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive2'],
    },
    total=False,
)


DateTimeFilterRecursive2 = TypedDict(
    'DateTimeFilterRecursive2',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive3'],
    },
    total=False,
)


DateTimeFilterRecursive3 = TypedDict(
    'DateTimeFilterRecursive3',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive4'],
    },
    total=False,
)


DateTimeFilterRecursive4 = TypedDict(
    'DateTimeFilterRecursive4',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
            },
    total=False,
)


class DateTimeWithAggregatesFilter(DateTimeFilter, total=False):
    _max: 'DateTimeFilter'
    _min: 'DateTimeFilter'
    _sum: 'DateTimeFilter'
    _avg: 'DateTimeFilter'
    _count: 'IntFilter'


    

BooleanFilter = TypedDict(
    'BooleanFilter',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive1'],
    },
    total=False,
)


BooleanFilterRecursive1 = TypedDict(
    'BooleanFilterRecursive1',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive2'],
    },
    total=False,
)


BooleanFilterRecursive2 = TypedDict(
    'BooleanFilterRecursive2',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive3'],
    },
    total=False,
)


BooleanFilterRecursive3 = TypedDict(
    'BooleanFilterRecursive3',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive4'],
    },
    total=False,
)


BooleanFilterRecursive4 = TypedDict(
    'BooleanFilterRecursive4',
    {
        'equals': bool,
            },
    total=False,
)


class BooleanWithAggregatesFilter(BooleanFilter, total=False):
    _max: 'BooleanFilter'
    _min: 'BooleanFilter'
    _sum: 'BooleanFilter'
    _avg: 'BooleanFilter'
    _count: 'IntFilter'


    

IntFilter = TypedDict(
    'IntFilter',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive1'],
    },
    total=False,
)


IntFilterRecursive1 = TypedDict(
    'IntFilterRecursive1',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive2'],
    },
    total=False,
)


IntFilterRecursive2 = TypedDict(
    'IntFilterRecursive2',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive3'],
    },
    total=False,
)


IntFilterRecursive3 = TypedDict(
    'IntFilterRecursive3',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive4'],
    },
    total=False,
)


IntFilterRecursive4 = TypedDict(
    'IntFilterRecursive4',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
            },
    total=False,
)


class IntWithAggregatesFilter(IntFilter, total=False):
    _max: 'IntFilter'
    _min: 'IntFilter'
    _sum: 'IntFilter'
    _avg: 'IntFilter'
    _count: 'IntFilter'


BigIntFilter = IntFilter
BigIntWithAggregatesFilter = IntWithAggregatesFilter
    

FloatFilter = TypedDict(
    'FloatFilter',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive1'],
    },
    total=False,
)


FloatFilterRecursive1 = TypedDict(
    'FloatFilterRecursive1',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive2'],
    },
    total=False,
)


FloatFilterRecursive2 = TypedDict(
    'FloatFilterRecursive2',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive3'],
    },
    total=False,
)


FloatFilterRecursive3 = TypedDict(
    'FloatFilterRecursive3',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive4'],
    },
    total=False,
)


FloatFilterRecursive4 = TypedDict(
    'FloatFilterRecursive4',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
            },
    total=False,
)


class FloatWithAggregatesFilter(FloatFilter, total=False):
    _max: 'FloatFilter'
    _min: 'FloatFilter'
    _sum: 'FloatFilter'
    _avg: 'FloatFilter'
    _count: 'IntFilter'


    

BytesFilter = TypedDict(
    'BytesFilter',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive1'],
    },
    total=False,
)


BytesFilterRecursive1 = TypedDict(
    'BytesFilterRecursive1',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive2'],
    },
    total=False,
)


BytesFilterRecursive2 = TypedDict(
    'BytesFilterRecursive2',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive3'],
    },
    total=False,
)


BytesFilterRecursive3 = TypedDict(
    'BytesFilterRecursive3',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive4'],
    },
    total=False,
)


BytesFilterRecursive4 = TypedDict(
    'BytesFilterRecursive4',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
            },
    total=False,
)


class BytesWithAggregatesFilter(BytesFilter, total=False):
    _max: 'BytesFilter'
    _min: 'BytesFilter'
    _sum: 'BytesFilter'
    _avg: 'BytesFilter'
    _count: 'IntFilter'


# TODO: preview feature for improving JSON filtering
JsonFilter = TypedDict(
    'JsonFilter',
    {
        'equals': 'fields.Json',
        'not': 'fields.Json',
    },
    total=False,
)


class JsonWithAggregatesFilter(JsonFilter, total=False):
    _max: 'JsonFilter'
    _min: 'JsonFilter'
    _sum: 'JsonFilter'
    _avg: 'JsonFilter'
    _count: 'IntFilter'


    

DecimalFilter = TypedDict(
    'DecimalFilter',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive1'],
    },
    total=False,
)


DecimalFilterRecursive1 = TypedDict(
    'DecimalFilterRecursive1',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive2'],
    },
    total=False,
)


DecimalFilterRecursive2 = TypedDict(
    'DecimalFilterRecursive2',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive3'],
    },
    total=False,
)


DecimalFilterRecursive3 = TypedDict(
    'DecimalFilterRecursive3',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive4'],
    },
    total=False,
)


DecimalFilterRecursive4 = TypedDict(
    'DecimalFilterRecursive4',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
            },
    total=False,
)


class DecimalWithAggregatesFilter(StringFilter, total=False):
    _max: 'DecimalFilter'
    _min: 'DecimalFilter'
    _sum: 'DecimalFilter'
    _avg: 'DecimalFilter'
    _count: 'IntFilter'


class _FloatSetInput(TypedDict):
    set: float


class _FloatDivideInput(TypedDict):
    divide: float


class _FloatMultiplyInput(TypedDict):
    multiply: float


class _FloatIncrementInput(TypedDict):
    increment: float


class _FloatDecrementInput(TypedDict):
    decrement: float


class _IntSetInput(TypedDict):
    set: int


class _IntDivideInput(TypedDict):
    divide: int


class _IntMultiplyInput(TypedDict):
    multiply: int


class _IntIncrementInput(TypedDict):
    increment: int


class _IntDecrementInput(TypedDict):
    decrement: int


AtomicFloatInput = Union[
    _FloatSetInput,
    _FloatDivideInput,
    _FloatMultiplyInput,
    _FloatIncrementInput,
    _FloatDecrementInput,
]
AtomicIntInput = Union[
    _IntSetInput,
    _IntDivideInput,
    _IntMultiplyInput,
    _IntIncrementInput,
    _IntDecrementInput,
]
AtomicBigIntInput = AtomicIntInput

class _StringListFilterEqualsInput(TypedDict):
    equals: Optional[List[_str]]


class _StringListFilterHasInput(TypedDict):
    has: _str


class _StringListFilterHasEveryInput(TypedDict):
    has_every: List[_str]


class _StringListFilterHasSomeInput(TypedDict):
    has_some: List[_str]


class _StringListFilterIsEmptyInput(TypedDict):
    is_empty: bool


StringListFilter = Union[
    _StringListFilterHasInput,
    _StringListFilterEqualsInput,
    _StringListFilterHasSomeInput,
    _StringListFilterIsEmptyInput,
    _StringListFilterHasEveryInput,
]


class _StringListUpdateSet(TypedDict):
    set: List[_str]


class _StringListUpdatePush(TypedDict):
    push: List[_str]


StringListUpdate = Union[
    List[_str],
    _StringListUpdateSet,
    _StringListUpdatePush,
]

class _BytesListFilterEqualsInput(TypedDict):
    equals: Optional[List['fields.Base64']]


class _BytesListFilterHasInput(TypedDict):
    has: 'fields.Base64'


class _BytesListFilterHasEveryInput(TypedDict):
    has_every: List['fields.Base64']


class _BytesListFilterHasSomeInput(TypedDict):
    has_some: List['fields.Base64']


class _BytesListFilterIsEmptyInput(TypedDict):
    is_empty: bool


BytesListFilter = Union[
    _BytesListFilterHasInput,
    _BytesListFilterEqualsInput,
    _BytesListFilterHasSomeInput,
    _BytesListFilterIsEmptyInput,
    _BytesListFilterHasEveryInput,
]


class _BytesListUpdateSet(TypedDict):
    set: List['fields.Base64']


class _BytesListUpdatePush(TypedDict):
    push: List['fields.Base64']


BytesListUpdate = Union[
    List['fields.Base64'],
    _BytesListUpdateSet,
    _BytesListUpdatePush,
]

class _DateTimeListFilterEqualsInput(TypedDict):
    equals: Optional[List[datetime.datetime]]


class _DateTimeListFilterHasInput(TypedDict):
    has: datetime.datetime


class _DateTimeListFilterHasEveryInput(TypedDict):
    has_every: List[datetime.datetime]


class _DateTimeListFilterHasSomeInput(TypedDict):
    has_some: List[datetime.datetime]


class _DateTimeListFilterIsEmptyInput(TypedDict):
    is_empty: bool


DateTimeListFilter = Union[
    _DateTimeListFilterHasInput,
    _DateTimeListFilterEqualsInput,
    _DateTimeListFilterHasSomeInput,
    _DateTimeListFilterIsEmptyInput,
    _DateTimeListFilterHasEveryInput,
]


class _DateTimeListUpdateSet(TypedDict):
    set: List[datetime.datetime]


class _DateTimeListUpdatePush(TypedDict):
    push: List[datetime.datetime]


DateTimeListUpdate = Union[
    List[datetime.datetime],
    _DateTimeListUpdateSet,
    _DateTimeListUpdatePush,
]

class _BooleanListFilterEqualsInput(TypedDict):
    equals: Optional[List[_bool]]


class _BooleanListFilterHasInput(TypedDict):
    has: _bool


class _BooleanListFilterHasEveryInput(TypedDict):
    has_every: List[_bool]


class _BooleanListFilterHasSomeInput(TypedDict):
    has_some: List[_bool]


class _BooleanListFilterIsEmptyInput(TypedDict):
    is_empty: bool


BooleanListFilter = Union[
    _BooleanListFilterHasInput,
    _BooleanListFilterEqualsInput,
    _BooleanListFilterHasSomeInput,
    _BooleanListFilterIsEmptyInput,
    _BooleanListFilterHasEveryInput,
]


class _BooleanListUpdateSet(TypedDict):
    set: List[_bool]


class _BooleanListUpdatePush(TypedDict):
    push: List[_bool]


BooleanListUpdate = Union[
    List[_bool],
    _BooleanListUpdateSet,
    _BooleanListUpdatePush,
]

class _IntListFilterEqualsInput(TypedDict):
    equals: Optional[List[_int]]


class _IntListFilterHasInput(TypedDict):
    has: _int


class _IntListFilterHasEveryInput(TypedDict):
    has_every: List[_int]


class _IntListFilterHasSomeInput(TypedDict):
    has_some: List[_int]


class _IntListFilterIsEmptyInput(TypedDict):
    is_empty: bool


IntListFilter = Union[
    _IntListFilterHasInput,
    _IntListFilterEqualsInput,
    _IntListFilterHasSomeInput,
    _IntListFilterIsEmptyInput,
    _IntListFilterHasEveryInput,
]


class _IntListUpdateSet(TypedDict):
    set: List[_int]


class _IntListUpdatePush(TypedDict):
    push: List[_int]


IntListUpdate = Union[
    List[_int],
    _IntListUpdateSet,
    _IntListUpdatePush,
]

class _BigIntListFilterEqualsInput(TypedDict):
    equals: Optional[List[_int]]


class _BigIntListFilterHasInput(TypedDict):
    has: _int


class _BigIntListFilterHasEveryInput(TypedDict):
    has_every: List[_int]


class _BigIntListFilterHasSomeInput(TypedDict):
    has_some: List[_int]


class _BigIntListFilterIsEmptyInput(TypedDict):
    is_empty: bool


BigIntListFilter = Union[
    _BigIntListFilterHasInput,
    _BigIntListFilterEqualsInput,
    _BigIntListFilterHasSomeInput,
    _BigIntListFilterIsEmptyInput,
    _BigIntListFilterHasEveryInput,
]


class _BigIntListUpdateSet(TypedDict):
    set: List[_int]


class _BigIntListUpdatePush(TypedDict):
    push: List[_int]


BigIntListUpdate = Union[
    List[_int],
    _BigIntListUpdateSet,
    _BigIntListUpdatePush,
]

class _FloatListFilterEqualsInput(TypedDict):
    equals: Optional[List[_float]]


class _FloatListFilterHasInput(TypedDict):
    has: _float


class _FloatListFilterHasEveryInput(TypedDict):
    has_every: List[_float]


class _FloatListFilterHasSomeInput(TypedDict):
    has_some: List[_float]


class _FloatListFilterIsEmptyInput(TypedDict):
    is_empty: bool


FloatListFilter = Union[
    _FloatListFilterHasInput,
    _FloatListFilterEqualsInput,
    _FloatListFilterHasSomeInput,
    _FloatListFilterIsEmptyInput,
    _FloatListFilterHasEveryInput,
]


class _FloatListUpdateSet(TypedDict):
    set: List[_float]


class _FloatListUpdatePush(TypedDict):
    push: List[_float]


FloatListUpdate = Union[
    List[_float],
    _FloatListUpdateSet,
    _FloatListUpdatePush,
]

class _JsonListFilterEqualsInput(TypedDict):
    equals: Optional[List['fields.Json']]


class _JsonListFilterHasInput(TypedDict):
    has: 'fields.Json'


class _JsonListFilterHasEveryInput(TypedDict):
    has_every: List['fields.Json']


class _JsonListFilterHasSomeInput(TypedDict):
    has_some: List['fields.Json']


class _JsonListFilterIsEmptyInput(TypedDict):
    is_empty: bool


JsonListFilter = Union[
    _JsonListFilterHasInput,
    _JsonListFilterEqualsInput,
    _JsonListFilterHasSomeInput,
    _JsonListFilterIsEmptyInput,
    _JsonListFilterHasEveryInput,
]


class _JsonListUpdateSet(TypedDict):
    set: List['fields.Json']


class _JsonListUpdatePush(TypedDict):
    push: List['fields.Json']


JsonListUpdate = Union[
    List['fields.Json'],
    _JsonListUpdateSet,
    _JsonListUpdatePush,
]

class _DecimalListFilterEqualsInput(TypedDict):
    equals: Optional[List[decimal.Decimal]]


class _DecimalListFilterHasInput(TypedDict):
    has: decimal.Decimal


class _DecimalListFilterHasEveryInput(TypedDict):
    has_every: List[decimal.Decimal]


class _DecimalListFilterHasSomeInput(TypedDict):
    has_some: List[decimal.Decimal]


class _DecimalListFilterIsEmptyInput(TypedDict):
    is_empty: bool


DecimalListFilter = Union[
    _DecimalListFilterHasInput,
    _DecimalListFilterEqualsInput,
    _DecimalListFilterHasSomeInput,
    _DecimalListFilterIsEmptyInput,
    _DecimalListFilterHasEveryInput,
]


class _DecimalListUpdateSet(TypedDict):
    set: List[decimal.Decimal]


class _DecimalListUpdatePush(TypedDict):
    push: List[decimal.Decimal]


DecimalListUpdate = Union[
    List[decimal.Decimal],
    _DecimalListUpdateSet,
    _DecimalListUpdatePush,
]


# Achievement types

class AchievementOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the Achievement create method"""
    id: _str


class AchievementCreateInput(AchievementOptionalCreateInput):
    """Required arguments to the Achievement create method"""
    operatorId: _str
    achievementType: _str
    timestamp: datetime.datetime


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class AchievementOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the Achievement create method, without relations"""
    id: _str


class AchievementCreateWithoutRelationsInput(AchievementOptionalCreateWithoutRelationsInput):
    """Required arguments to the Achievement create method, without relations"""
    operatorId: _str
    achievementType: _str
    timestamp: datetime.datetime

class AchievementConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'AchievementCreateWithoutRelationsInput'
    where: 'AchievementWhereUniqueInput'

class AchievementCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'AchievementCreateWithoutRelationsInput'
    connect: 'AchievementWhereUniqueInput'
    connect_or_create: 'AchievementConnectOrCreateWithoutRelationsInput'


class AchievementCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['AchievementCreateWithoutRelationsInput', List['AchievementCreateWithoutRelationsInput']]
    connect: Union['AchievementWhereUniqueInput', List['AchievementWhereUniqueInput']]
    connect_or_create: Union['AchievementConnectOrCreateWithoutRelationsInput', List['AchievementConnectOrCreateWithoutRelationsInput']]

_AchievementWhereUnique_id_Input = TypedDict(
    '_AchievementWhereUnique_id_Input',
    {
        'id': '_str',
    },
    total=True
)

AchievementWhereUniqueInput = _AchievementWhereUnique_id_Input


class AchievementUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: _str
    operatorId: _str
    achievementType: _str
    timestamp: datetime.datetime


class AchievementUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: _str
    operatorId: _str
    achievementType: _str
    timestamp: datetime.datetime


class AchievementUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['AchievementCreateWithoutRelationsInput']
    connect: List['AchievementWhereUniqueInput']
    connect_or_create: List['AchievementConnectOrCreateWithoutRelationsInput']
    set: List['AchievementWhereUniqueInput']
    disconnect: List['AchievementWhereUniqueInput']
    delete: List['AchievementWhereUniqueInput']

    # TODO
    # update: List['AchievementUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['AchievementUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['AchievementScalarWhereInput']
    # upsert: List['AchievementUpserteWithWhereUniqueWithoutRelationsInput']


class AchievementUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'AchievementCreateWithoutRelationsInput'
    connect: 'AchievementWhereUniqueInput'
    connect_or_create: 'AchievementConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'AchievementUpdateInput'
    # upsert: 'AchievementUpsertWithoutRelationsInput'


class AchievementUpsertInput(TypedDict):
    create: 'AchievementCreateInput'
    update: 'AchievementUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_Achievement_id_OrderByInput = TypedDict(
    '_Achievement_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_Achievement_operatorId_OrderByInput = TypedDict(
    '_Achievement_operatorId_OrderByInput',
    {
        'operatorId': 'SortOrder',
    },
    total=True
)

_Achievement_achievementType_OrderByInput = TypedDict(
    '_Achievement_achievementType_OrderByInput',
    {
        'achievementType': 'SortOrder',
    },
    total=True
)

_Achievement_timestamp_OrderByInput = TypedDict(
    '_Achievement_timestamp_OrderByInput',
    {
        'timestamp': 'SortOrder',
    },
    total=True
)

_Achievement_RelevanceInner = TypedDict(
    '_Achievement_RelevanceInner',
    {
        'fields': 'List[AchievementScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_Achievement_RelevanceOrderByInput = TypedDict(
    '_Achievement_RelevanceOrderByInput',
    {
        '_relevance': '_Achievement_RelevanceInner',
    },
    total=True
)

AchievementOrderByInput = Union[
    '_Achievement_id_OrderByInput',
    '_Achievement_operatorId_OrderByInput',
    '_Achievement_achievementType_OrderByInput',
    '_Achievement_timestamp_OrderByInput',
    '_Achievement_RelevanceOrderByInput',
]



# recursive Achievement types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

AchievementRelationFilter = TypedDict(
    'AchievementRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class AchievementListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class AchievementInclude(TypedDict, total=False):
    """Achievement relational arguments"""


    

class AchievementIncludeFromAchievement(TypedDict, total=False):
    """Relational arguments for Achievement"""


class AchievementIncludeFromAchievementRecursive1(TypedDict, total=False):
    """Relational arguments for Achievement"""


class AchievementIncludeFromAchievementRecursive2(TypedDict, total=False):
    """Relational arguments for Achievement"""


class AchievementIncludeFromAchievementRecursive3(TypedDict, total=False):
    """Relational arguments for Achievement"""


class AchievementIncludeFromAchievementRecursive4(TypedDict, total=False):
    """Relational arguments for Achievement"""

    

class AchievementArgsFromAchievement(TypedDict, total=False):
    """Arguments for Achievement"""
    include: 'AchievementIncludeFromAchievementRecursive1'


class AchievementArgsFromAchievementRecursive1(TypedDict, total=False):
    """Arguments for Achievement"""
    include: 'AchievementIncludeFromAchievementRecursive2'


class AchievementArgsFromAchievementRecursive2(TypedDict, total=False):
    """Arguments for Achievement"""
    include: 'AchievementIncludeFromAchievementRecursive3'


class AchievementArgsFromAchievementRecursive3(TypedDict, total=False):
    """Arguments for Achievement"""
    include: 'AchievementIncludeFromAchievementRecursive4'


class AchievementArgsFromAchievementRecursive4(TypedDict, total=False):
    """Arguments for Achievement"""
    
    

class FindManyAchievementArgsFromAchievement(TypedDict, total=False):
    """Arguments for Achievement"""
    take: int
    skip: int
    order_by: Union['AchievementOrderByInput', List['AchievementOrderByInput']]
    where: 'AchievementWhereInput'
    cursor: 'AchievementWhereUniqueInput'
    distinct: List['AchievementScalarFieldKeys']
    include: 'AchievementIncludeFromAchievementRecursive1'


class FindManyAchievementArgsFromAchievementRecursive1(TypedDict, total=False):
    """Arguments for Achievement"""
    take: int
    skip: int
    order_by: Union['AchievementOrderByInput', List['AchievementOrderByInput']]
    where: 'AchievementWhereInput'
    cursor: 'AchievementWhereUniqueInput'
    distinct: List['AchievementScalarFieldKeys']
    include: 'AchievementIncludeFromAchievementRecursive2'


class FindManyAchievementArgsFromAchievementRecursive2(TypedDict, total=False):
    """Arguments for Achievement"""
    take: int
    skip: int
    order_by: Union['AchievementOrderByInput', List['AchievementOrderByInput']]
    where: 'AchievementWhereInput'
    cursor: 'AchievementWhereUniqueInput'
    distinct: List['AchievementScalarFieldKeys']
    include: 'AchievementIncludeFromAchievementRecursive3'


class FindManyAchievementArgsFromAchievementRecursive3(TypedDict, total=False):
    """Arguments for Achievement"""
    take: int
    skip: int
    order_by: Union['AchievementOrderByInput', List['AchievementOrderByInput']]
    where: 'AchievementWhereInput'
    cursor: 'AchievementWhereUniqueInput'
    distinct: List['AchievementScalarFieldKeys']
    include: 'AchievementIncludeFromAchievementRecursive4'


class FindManyAchievementArgsFromAchievementRecursive4(TypedDict, total=False):
    """Arguments for Achievement"""
    take: int
    skip: int
    order_by: Union['AchievementOrderByInput', List['AchievementOrderByInput']]
    where: 'AchievementWhereInput'
    cursor: 'AchievementWhereUniqueInput'
    distinct: List['AchievementScalarFieldKeys']
    
    

class CameraIncludeFromAchievement(TypedDict, total=False):
    """Relational arguments for Achievement"""


class CameraIncludeFromAchievementRecursive1(TypedDict, total=False):
    """Relational arguments for Achievement"""


class CameraIncludeFromAchievementRecursive2(TypedDict, total=False):
    """Relational arguments for Achievement"""


class CameraIncludeFromAchievementRecursive3(TypedDict, total=False):
    """Relational arguments for Achievement"""


class CameraIncludeFromAchievementRecursive4(TypedDict, total=False):
    """Relational arguments for Achievement"""

    

class CameraArgsFromAchievement(TypedDict, total=False):
    """Arguments for Achievement"""
    include: 'CameraIncludeFromCameraRecursive1'


class CameraArgsFromAchievementRecursive1(TypedDict, total=False):
    """Arguments for Achievement"""
    include: 'CameraIncludeFromCameraRecursive2'


class CameraArgsFromAchievementRecursive2(TypedDict, total=False):
    """Arguments for Achievement"""
    include: 'CameraIncludeFromCameraRecursive3'


class CameraArgsFromAchievementRecursive3(TypedDict, total=False):
    """Arguments for Achievement"""
    include: 'CameraIncludeFromCameraRecursive4'


class CameraArgsFromAchievementRecursive4(TypedDict, total=False):
    """Arguments for Achievement"""
    
    

class FindManyCameraArgsFromAchievement(TypedDict, total=False):
    """Arguments for Achievement"""
    take: int
    skip: int
    order_by: Union['CameraOrderByInput', List['CameraOrderByInput']]
    where: 'CameraWhereInput'
    cursor: 'CameraWhereUniqueInput'
    distinct: List['CameraScalarFieldKeys']
    include: 'CameraIncludeFromCameraRecursive1'


class FindManyCameraArgsFromAchievementRecursive1(TypedDict, total=False):
    """Arguments for Achievement"""
    take: int
    skip: int
    order_by: Union['CameraOrderByInput', List['CameraOrderByInput']]
    where: 'CameraWhereInput'
    cursor: 'CameraWhereUniqueInput'
    distinct: List['CameraScalarFieldKeys']
    include: 'CameraIncludeFromCameraRecursive2'


class FindManyCameraArgsFromAchievementRecursive2(TypedDict, total=False):
    """Arguments for Achievement"""
    take: int
    skip: int
    order_by: Union['CameraOrderByInput', List['CameraOrderByInput']]
    where: 'CameraWhereInput'
    cursor: 'CameraWhereUniqueInput'
    distinct: List['CameraScalarFieldKeys']
    include: 'CameraIncludeFromCameraRecursive3'


class FindManyCameraArgsFromAchievementRecursive3(TypedDict, total=False):
    """Arguments for Achievement"""
    take: int
    skip: int
    order_by: Union['CameraOrderByInput', List['CameraOrderByInput']]
    where: 'CameraWhereInput'
    cursor: 'CameraWhereUniqueInput'
    distinct: List['CameraScalarFieldKeys']
    include: 'CameraIncludeFromCameraRecursive4'


class FindManyCameraArgsFromAchievementRecursive4(TypedDict, total=False):
    """Arguments for Achievement"""
    take: int
    skip: int
    order_by: Union['CameraOrderByInput', List['CameraOrderByInput']]
    where: 'CameraWhereInput'
    cursor: 'CameraWhereUniqueInput'
    distinct: List['CameraScalarFieldKeys']
    
    

class EffectivenessIncludeFromAchievement(TypedDict, total=False):
    """Relational arguments for Achievement"""


class EffectivenessIncludeFromAchievementRecursive1(TypedDict, total=False):
    """Relational arguments for Achievement"""


class EffectivenessIncludeFromAchievementRecursive2(TypedDict, total=False):
    """Relational arguments for Achievement"""


class EffectivenessIncludeFromAchievementRecursive3(TypedDict, total=False):
    """Relational arguments for Achievement"""


class EffectivenessIncludeFromAchievementRecursive4(TypedDict, total=False):
    """Relational arguments for Achievement"""

    

class EffectivenessArgsFromAchievement(TypedDict, total=False):
    """Arguments for Achievement"""
    include: 'EffectivenessIncludeFromEffectivenessRecursive1'


class EffectivenessArgsFromAchievementRecursive1(TypedDict, total=False):
    """Arguments for Achievement"""
    include: 'EffectivenessIncludeFromEffectivenessRecursive2'


class EffectivenessArgsFromAchievementRecursive2(TypedDict, total=False):
    """Arguments for Achievement"""
    include: 'EffectivenessIncludeFromEffectivenessRecursive3'


class EffectivenessArgsFromAchievementRecursive3(TypedDict, total=False):
    """Arguments for Achievement"""
    include: 'EffectivenessIncludeFromEffectivenessRecursive4'


class EffectivenessArgsFromAchievementRecursive4(TypedDict, total=False):
    """Arguments for Achievement"""
    
    

class FindManyEffectivenessArgsFromAchievement(TypedDict, total=False):
    """Arguments for Achievement"""
    take: int
    skip: int
    order_by: Union['EffectivenessOrderByInput', List['EffectivenessOrderByInput']]
    where: 'EffectivenessWhereInput'
    cursor: 'EffectivenessWhereUniqueInput'
    distinct: List['EffectivenessScalarFieldKeys']
    include: 'EffectivenessIncludeFromEffectivenessRecursive1'


class FindManyEffectivenessArgsFromAchievementRecursive1(TypedDict, total=False):
    """Arguments for Achievement"""
    take: int
    skip: int
    order_by: Union['EffectivenessOrderByInput', List['EffectivenessOrderByInput']]
    where: 'EffectivenessWhereInput'
    cursor: 'EffectivenessWhereUniqueInput'
    distinct: List['EffectivenessScalarFieldKeys']
    include: 'EffectivenessIncludeFromEffectivenessRecursive2'


class FindManyEffectivenessArgsFromAchievementRecursive2(TypedDict, total=False):
    """Arguments for Achievement"""
    take: int
    skip: int
    order_by: Union['EffectivenessOrderByInput', List['EffectivenessOrderByInput']]
    where: 'EffectivenessWhereInput'
    cursor: 'EffectivenessWhereUniqueInput'
    distinct: List['EffectivenessScalarFieldKeys']
    include: 'EffectivenessIncludeFromEffectivenessRecursive3'


class FindManyEffectivenessArgsFromAchievementRecursive3(TypedDict, total=False):
    """Arguments for Achievement"""
    take: int
    skip: int
    order_by: Union['EffectivenessOrderByInput', List['EffectivenessOrderByInput']]
    where: 'EffectivenessWhereInput'
    cursor: 'EffectivenessWhereUniqueInput'
    distinct: List['EffectivenessScalarFieldKeys']
    include: 'EffectivenessIncludeFromEffectivenessRecursive4'


class FindManyEffectivenessArgsFromAchievementRecursive4(TypedDict, total=False):
    """Arguments for Achievement"""
    take: int
    skip: int
    order_by: Union['EffectivenessOrderByInput', List['EffectivenessOrderByInput']]
    where: 'EffectivenessWhereInput'
    cursor: 'EffectivenessWhereUniqueInput'
    distinct: List['EffectivenessScalarFieldKeys']
    
    

class EnvironmentalDataIncludeFromAchievement(TypedDict, total=False):
    """Relational arguments for Achievement"""


class EnvironmentalDataIncludeFromAchievementRecursive1(TypedDict, total=False):
    """Relational arguments for Achievement"""


class EnvironmentalDataIncludeFromAchievementRecursive2(TypedDict, total=False):
    """Relational arguments for Achievement"""


class EnvironmentalDataIncludeFromAchievementRecursive3(TypedDict, total=False):
    """Relational arguments for Achievement"""


class EnvironmentalDataIncludeFromAchievementRecursive4(TypedDict, total=False):
    """Relational arguments for Achievement"""

    

class EnvironmentalDataArgsFromAchievement(TypedDict, total=False):
    """Arguments for Achievement"""
    include: 'EnvironmentalDataIncludeFromEnvironmentalDataRecursive1'


class EnvironmentalDataArgsFromAchievementRecursive1(TypedDict, total=False):
    """Arguments for Achievement"""
    include: 'EnvironmentalDataIncludeFromEnvironmentalDataRecursive2'


class EnvironmentalDataArgsFromAchievementRecursive2(TypedDict, total=False):
    """Arguments for Achievement"""
    include: 'EnvironmentalDataIncludeFromEnvironmentalDataRecursive3'


class EnvironmentalDataArgsFromAchievementRecursive3(TypedDict, total=False):
    """Arguments for Achievement"""
    include: 'EnvironmentalDataIncludeFromEnvironmentalDataRecursive4'


class EnvironmentalDataArgsFromAchievementRecursive4(TypedDict, total=False):
    """Arguments for Achievement"""
    
    

class FindManyEnvironmentalDataArgsFromAchievement(TypedDict, total=False):
    """Arguments for Achievement"""
    take: int
    skip: int
    order_by: Union['EnvironmentalDataOrderByInput', List['EnvironmentalDataOrderByInput']]
    where: 'EnvironmentalDataWhereInput'
    cursor: 'EnvironmentalDataWhereUniqueInput'
    distinct: List['EnvironmentalDataScalarFieldKeys']
    include: 'EnvironmentalDataIncludeFromEnvironmentalDataRecursive1'


class FindManyEnvironmentalDataArgsFromAchievementRecursive1(TypedDict, total=False):
    """Arguments for Achievement"""
    take: int
    skip: int
    order_by: Union['EnvironmentalDataOrderByInput', List['EnvironmentalDataOrderByInput']]
    where: 'EnvironmentalDataWhereInput'
    cursor: 'EnvironmentalDataWhereUniqueInput'
    distinct: List['EnvironmentalDataScalarFieldKeys']
    include: 'EnvironmentalDataIncludeFromEnvironmentalDataRecursive2'


class FindManyEnvironmentalDataArgsFromAchievementRecursive2(TypedDict, total=False):
    """Arguments for Achievement"""
    take: int
    skip: int
    order_by: Union['EnvironmentalDataOrderByInput', List['EnvironmentalDataOrderByInput']]
    where: 'EnvironmentalDataWhereInput'
    cursor: 'EnvironmentalDataWhereUniqueInput'
    distinct: List['EnvironmentalDataScalarFieldKeys']
    include: 'EnvironmentalDataIncludeFromEnvironmentalDataRecursive3'


class FindManyEnvironmentalDataArgsFromAchievementRecursive3(TypedDict, total=False):
    """Arguments for Achievement"""
    take: int
    skip: int
    order_by: Union['EnvironmentalDataOrderByInput', List['EnvironmentalDataOrderByInput']]
    where: 'EnvironmentalDataWhereInput'
    cursor: 'EnvironmentalDataWhereUniqueInput'
    distinct: List['EnvironmentalDataScalarFieldKeys']
    include: 'EnvironmentalDataIncludeFromEnvironmentalDataRecursive4'


class FindManyEnvironmentalDataArgsFromAchievementRecursive4(TypedDict, total=False):
    """Arguments for Achievement"""
    take: int
    skip: int
    order_by: Union['EnvironmentalDataOrderByInput', List['EnvironmentalDataOrderByInput']]
    where: 'EnvironmentalDataWhereInput'
    cursor: 'EnvironmentalDataWhereUniqueInput'
    distinct: List['EnvironmentalDataScalarFieldKeys']
    
    

class EventIncludeFromAchievement(TypedDict, total=False):
    """Relational arguments for Achievement"""


class EventIncludeFromAchievementRecursive1(TypedDict, total=False):
    """Relational arguments for Achievement"""


class EventIncludeFromAchievementRecursive2(TypedDict, total=False):
    """Relational arguments for Achievement"""


class EventIncludeFromAchievementRecursive3(TypedDict, total=False):
    """Relational arguments for Achievement"""


class EventIncludeFromAchievementRecursive4(TypedDict, total=False):
    """Relational arguments for Achievement"""

    

class EventArgsFromAchievement(TypedDict, total=False):
    """Arguments for Achievement"""
    include: 'EventIncludeFromEventRecursive1'


class EventArgsFromAchievementRecursive1(TypedDict, total=False):
    """Arguments for Achievement"""
    include: 'EventIncludeFromEventRecursive2'


class EventArgsFromAchievementRecursive2(TypedDict, total=False):
    """Arguments for Achievement"""
    include: 'EventIncludeFromEventRecursive3'


class EventArgsFromAchievementRecursive3(TypedDict, total=False):
    """Arguments for Achievement"""
    include: 'EventIncludeFromEventRecursive4'


class EventArgsFromAchievementRecursive4(TypedDict, total=False):
    """Arguments for Achievement"""
    
    

class FindManyEventArgsFromAchievement(TypedDict, total=False):
    """Arguments for Achievement"""
    take: int
    skip: int
    order_by: Union['EventOrderByInput', List['EventOrderByInput']]
    where: 'EventWhereInput'
    cursor: 'EventWhereUniqueInput'
    distinct: List['EventScalarFieldKeys']
    include: 'EventIncludeFromEventRecursive1'


class FindManyEventArgsFromAchievementRecursive1(TypedDict, total=False):
    """Arguments for Achievement"""
    take: int
    skip: int
    order_by: Union['EventOrderByInput', List['EventOrderByInput']]
    where: 'EventWhereInput'
    cursor: 'EventWhereUniqueInput'
    distinct: List['EventScalarFieldKeys']
    include: 'EventIncludeFromEventRecursive2'


class FindManyEventArgsFromAchievementRecursive2(TypedDict, total=False):
    """Arguments for Achievement"""
    take: int
    skip: int
    order_by: Union['EventOrderByInput', List['EventOrderByInput']]
    where: 'EventWhereInput'
    cursor: 'EventWhereUniqueInput'
    distinct: List['EventScalarFieldKeys']
    include: 'EventIncludeFromEventRecursive3'


class FindManyEventArgsFromAchievementRecursive3(TypedDict, total=False):
    """Arguments for Achievement"""
    take: int
    skip: int
    order_by: Union['EventOrderByInput', List['EventOrderByInput']]
    where: 'EventWhereInput'
    cursor: 'EventWhereUniqueInput'
    distinct: List['EventScalarFieldKeys']
    include: 'EventIncludeFromEventRecursive4'


class FindManyEventArgsFromAchievementRecursive4(TypedDict, total=False):
    """Arguments for Achievement"""
    take: int
    skip: int
    order_by: Union['EventOrderByInput', List['EventOrderByInput']]
    where: 'EventWhereInput'
    cursor: 'EventWhereUniqueInput'
    distinct: List['EventScalarFieldKeys']
    
    

class ForecastIncludeFromAchievement(TypedDict, total=False):
    """Relational arguments for Achievement"""


class ForecastIncludeFromAchievementRecursive1(TypedDict, total=False):
    """Relational arguments for Achievement"""


class ForecastIncludeFromAchievementRecursive2(TypedDict, total=False):
    """Relational arguments for Achievement"""


class ForecastIncludeFromAchievementRecursive3(TypedDict, total=False):
    """Relational arguments for Achievement"""


class ForecastIncludeFromAchievementRecursive4(TypedDict, total=False):
    """Relational arguments for Achievement"""

    

class ForecastArgsFromAchievement(TypedDict, total=False):
    """Arguments for Achievement"""
    include: 'ForecastIncludeFromForecastRecursive1'


class ForecastArgsFromAchievementRecursive1(TypedDict, total=False):
    """Arguments for Achievement"""
    include: 'ForecastIncludeFromForecastRecursive2'


class ForecastArgsFromAchievementRecursive2(TypedDict, total=False):
    """Arguments for Achievement"""
    include: 'ForecastIncludeFromForecastRecursive3'


class ForecastArgsFromAchievementRecursive3(TypedDict, total=False):
    """Arguments for Achievement"""
    include: 'ForecastIncludeFromForecastRecursive4'


class ForecastArgsFromAchievementRecursive4(TypedDict, total=False):
    """Arguments for Achievement"""
    
    

class FindManyForecastArgsFromAchievement(TypedDict, total=False):
    """Arguments for Achievement"""
    take: int
    skip: int
    order_by: Union['ForecastOrderByInput', List['ForecastOrderByInput']]
    where: 'ForecastWhereInput'
    cursor: 'ForecastWhereUniqueInput'
    distinct: List['ForecastScalarFieldKeys']
    include: 'ForecastIncludeFromForecastRecursive1'


class FindManyForecastArgsFromAchievementRecursive1(TypedDict, total=False):
    """Arguments for Achievement"""
    take: int
    skip: int
    order_by: Union['ForecastOrderByInput', List['ForecastOrderByInput']]
    where: 'ForecastWhereInput'
    cursor: 'ForecastWhereUniqueInput'
    distinct: List['ForecastScalarFieldKeys']
    include: 'ForecastIncludeFromForecastRecursive2'


class FindManyForecastArgsFromAchievementRecursive2(TypedDict, total=False):
    """Arguments for Achievement"""
    take: int
    skip: int
    order_by: Union['ForecastOrderByInput', List['ForecastOrderByInput']]
    where: 'ForecastWhereInput'
    cursor: 'ForecastWhereUniqueInput'
    distinct: List['ForecastScalarFieldKeys']
    include: 'ForecastIncludeFromForecastRecursive3'


class FindManyForecastArgsFromAchievementRecursive3(TypedDict, total=False):
    """Arguments for Achievement"""
    take: int
    skip: int
    order_by: Union['ForecastOrderByInput', List['ForecastOrderByInput']]
    where: 'ForecastWhereInput'
    cursor: 'ForecastWhereUniqueInput'
    distinct: List['ForecastScalarFieldKeys']
    include: 'ForecastIncludeFromForecastRecursive4'


class FindManyForecastArgsFromAchievementRecursive4(TypedDict, total=False):
    """Arguments for Achievement"""
    take: int
    skip: int
    order_by: Union['ForecastOrderByInput', List['ForecastOrderByInput']]
    where: 'ForecastWhereInput'
    cursor: 'ForecastWhereUniqueInput'
    distinct: List['ForecastScalarFieldKeys']
    
    

class IncidentIncludeFromAchievement(TypedDict, total=False):
    """Relational arguments for Achievement"""


class IncidentIncludeFromAchievementRecursive1(TypedDict, total=False):
    """Relational arguments for Achievement"""


class IncidentIncludeFromAchievementRecursive2(TypedDict, total=False):
    """Relational arguments for Achievement"""


class IncidentIncludeFromAchievementRecursive3(TypedDict, total=False):
    """Relational arguments for Achievement"""


class IncidentIncludeFromAchievementRecursive4(TypedDict, total=False):
    """Relational arguments for Achievement"""

    

class IncidentArgsFromAchievement(TypedDict, total=False):
    """Arguments for Achievement"""
    include: 'IncidentIncludeFromIncidentRecursive1'


class IncidentArgsFromAchievementRecursive1(TypedDict, total=False):
    """Arguments for Achievement"""
    include: 'IncidentIncludeFromIncidentRecursive2'


class IncidentArgsFromAchievementRecursive2(TypedDict, total=False):
    """Arguments for Achievement"""
    include: 'IncidentIncludeFromIncidentRecursive3'


class IncidentArgsFromAchievementRecursive3(TypedDict, total=False):
    """Arguments for Achievement"""
    include: 'IncidentIncludeFromIncidentRecursive4'


class IncidentArgsFromAchievementRecursive4(TypedDict, total=False):
    """Arguments for Achievement"""
    
    

class FindManyIncidentArgsFromAchievement(TypedDict, total=False):
    """Arguments for Achievement"""
    take: int
    skip: int
    order_by: Union['IncidentOrderByInput', List['IncidentOrderByInput']]
    where: 'IncidentWhereInput'
    cursor: 'IncidentWhereUniqueInput'
    distinct: List['IncidentScalarFieldKeys']
    include: 'IncidentIncludeFromIncidentRecursive1'


class FindManyIncidentArgsFromAchievementRecursive1(TypedDict, total=False):
    """Arguments for Achievement"""
    take: int
    skip: int
    order_by: Union['IncidentOrderByInput', List['IncidentOrderByInput']]
    where: 'IncidentWhereInput'
    cursor: 'IncidentWhereUniqueInput'
    distinct: List['IncidentScalarFieldKeys']
    include: 'IncidentIncludeFromIncidentRecursive2'


class FindManyIncidentArgsFromAchievementRecursive2(TypedDict, total=False):
    """Arguments for Achievement"""
    take: int
    skip: int
    order_by: Union['IncidentOrderByInput', List['IncidentOrderByInput']]
    where: 'IncidentWhereInput'
    cursor: 'IncidentWhereUniqueInput'
    distinct: List['IncidentScalarFieldKeys']
    include: 'IncidentIncludeFromIncidentRecursive3'


class FindManyIncidentArgsFromAchievementRecursive3(TypedDict, total=False):
    """Arguments for Achievement"""
    take: int
    skip: int
    order_by: Union['IncidentOrderByInput', List['IncidentOrderByInput']]
    where: 'IncidentWhereInput'
    cursor: 'IncidentWhereUniqueInput'
    distinct: List['IncidentScalarFieldKeys']
    include: 'IncidentIncludeFromIncidentRecursive4'


class FindManyIncidentArgsFromAchievementRecursive4(TypedDict, total=False):
    """Arguments for Achievement"""
    take: int
    skip: int
    order_by: Union['IncidentOrderByInput', List['IncidentOrderByInput']]
    where: 'IncidentWhereInput'
    cursor: 'IncidentWhereUniqueInput'
    distinct: List['IncidentScalarFieldKeys']
    
    

class NotificationIncludeFromAchievement(TypedDict, total=False):
    """Relational arguments for Achievement"""


class NotificationIncludeFromAchievementRecursive1(TypedDict, total=False):
    """Relational arguments for Achievement"""


class NotificationIncludeFromAchievementRecursive2(TypedDict, total=False):
    """Relational arguments for Achievement"""


class NotificationIncludeFromAchievementRecursive3(TypedDict, total=False):
    """Relational arguments for Achievement"""


class NotificationIncludeFromAchievementRecursive4(TypedDict, total=False):
    """Relational arguments for Achievement"""

    

class NotificationArgsFromAchievement(TypedDict, total=False):
    """Arguments for Achievement"""
    include: 'NotificationIncludeFromNotificationRecursive1'


class NotificationArgsFromAchievementRecursive1(TypedDict, total=False):
    """Arguments for Achievement"""
    include: 'NotificationIncludeFromNotificationRecursive2'


class NotificationArgsFromAchievementRecursive2(TypedDict, total=False):
    """Arguments for Achievement"""
    include: 'NotificationIncludeFromNotificationRecursive3'


class NotificationArgsFromAchievementRecursive3(TypedDict, total=False):
    """Arguments for Achievement"""
    include: 'NotificationIncludeFromNotificationRecursive4'


class NotificationArgsFromAchievementRecursive4(TypedDict, total=False):
    """Arguments for Achievement"""
    
    

class FindManyNotificationArgsFromAchievement(TypedDict, total=False):
    """Arguments for Achievement"""
    take: int
    skip: int
    order_by: Union['NotificationOrderByInput', List['NotificationOrderByInput']]
    where: 'NotificationWhereInput'
    cursor: 'NotificationWhereUniqueInput'
    distinct: List['NotificationScalarFieldKeys']
    include: 'NotificationIncludeFromNotificationRecursive1'


class FindManyNotificationArgsFromAchievementRecursive1(TypedDict, total=False):
    """Arguments for Achievement"""
    take: int
    skip: int
    order_by: Union['NotificationOrderByInput', List['NotificationOrderByInput']]
    where: 'NotificationWhereInput'
    cursor: 'NotificationWhereUniqueInput'
    distinct: List['NotificationScalarFieldKeys']
    include: 'NotificationIncludeFromNotificationRecursive2'


class FindManyNotificationArgsFromAchievementRecursive2(TypedDict, total=False):
    """Arguments for Achievement"""
    take: int
    skip: int
    order_by: Union['NotificationOrderByInput', List['NotificationOrderByInput']]
    where: 'NotificationWhereInput'
    cursor: 'NotificationWhereUniqueInput'
    distinct: List['NotificationScalarFieldKeys']
    include: 'NotificationIncludeFromNotificationRecursive3'


class FindManyNotificationArgsFromAchievementRecursive3(TypedDict, total=False):
    """Arguments for Achievement"""
    take: int
    skip: int
    order_by: Union['NotificationOrderByInput', List['NotificationOrderByInput']]
    where: 'NotificationWhereInput'
    cursor: 'NotificationWhereUniqueInput'
    distinct: List['NotificationScalarFieldKeys']
    include: 'NotificationIncludeFromNotificationRecursive4'


class FindManyNotificationArgsFromAchievementRecursive4(TypedDict, total=False):
    """Arguments for Achievement"""
    take: int
    skip: int
    order_by: Union['NotificationOrderByInput', List['NotificationOrderByInput']]
    where: 'NotificationWhereInput'
    cursor: 'NotificationWhereUniqueInput'
    distinct: List['NotificationScalarFieldKeys']
    
    

class ScenarioIncludeFromAchievement(TypedDict, total=False):
    """Relational arguments for Achievement"""


class ScenarioIncludeFromAchievementRecursive1(TypedDict, total=False):
    """Relational arguments for Achievement"""


class ScenarioIncludeFromAchievementRecursive2(TypedDict, total=False):
    """Relational arguments for Achievement"""


class ScenarioIncludeFromAchievementRecursive3(TypedDict, total=False):
    """Relational arguments for Achievement"""


class ScenarioIncludeFromAchievementRecursive4(TypedDict, total=False):
    """Relational arguments for Achievement"""

    

class ScenarioArgsFromAchievement(TypedDict, total=False):
    """Arguments for Achievement"""
    include: 'ScenarioIncludeFromScenarioRecursive1'


class ScenarioArgsFromAchievementRecursive1(TypedDict, total=False):
    """Arguments for Achievement"""
    include: 'ScenarioIncludeFromScenarioRecursive2'


class ScenarioArgsFromAchievementRecursive2(TypedDict, total=False):
    """Arguments for Achievement"""
    include: 'ScenarioIncludeFromScenarioRecursive3'


class ScenarioArgsFromAchievementRecursive3(TypedDict, total=False):
    """Arguments for Achievement"""
    include: 'ScenarioIncludeFromScenarioRecursive4'


class ScenarioArgsFromAchievementRecursive4(TypedDict, total=False):
    """Arguments for Achievement"""
    
    

class FindManyScenarioArgsFromAchievement(TypedDict, total=False):
    """Arguments for Achievement"""
    take: int
    skip: int
    order_by: Union['ScenarioOrderByInput', List['ScenarioOrderByInput']]
    where: 'ScenarioWhereInput'
    cursor: 'ScenarioWhereUniqueInput'
    distinct: List['ScenarioScalarFieldKeys']
    include: 'ScenarioIncludeFromScenarioRecursive1'


class FindManyScenarioArgsFromAchievementRecursive1(TypedDict, total=False):
    """Arguments for Achievement"""
    take: int
    skip: int
    order_by: Union['ScenarioOrderByInput', List['ScenarioOrderByInput']]
    where: 'ScenarioWhereInput'
    cursor: 'ScenarioWhereUniqueInput'
    distinct: List['ScenarioScalarFieldKeys']
    include: 'ScenarioIncludeFromScenarioRecursive2'


class FindManyScenarioArgsFromAchievementRecursive2(TypedDict, total=False):
    """Arguments for Achievement"""
    take: int
    skip: int
    order_by: Union['ScenarioOrderByInput', List['ScenarioOrderByInput']]
    where: 'ScenarioWhereInput'
    cursor: 'ScenarioWhereUniqueInput'
    distinct: List['ScenarioScalarFieldKeys']
    include: 'ScenarioIncludeFromScenarioRecursive3'


class FindManyScenarioArgsFromAchievementRecursive3(TypedDict, total=False):
    """Arguments for Achievement"""
    take: int
    skip: int
    order_by: Union['ScenarioOrderByInput', List['ScenarioOrderByInput']]
    where: 'ScenarioWhereInput'
    cursor: 'ScenarioWhereUniqueInput'
    distinct: List['ScenarioScalarFieldKeys']
    include: 'ScenarioIncludeFromScenarioRecursive4'


class FindManyScenarioArgsFromAchievementRecursive4(TypedDict, total=False):
    """Arguments for Achievement"""
    take: int
    skip: int
    order_by: Union['ScenarioOrderByInput', List['ScenarioOrderByInput']]
    where: 'ScenarioWhereInput'
    cursor: 'ScenarioWhereUniqueInput'
    distinct: List['ScenarioScalarFieldKeys']
    
    

class SocialReportIncludeFromAchievement(TypedDict, total=False):
    """Relational arguments for Achievement"""


class SocialReportIncludeFromAchievementRecursive1(TypedDict, total=False):
    """Relational arguments for Achievement"""


class SocialReportIncludeFromAchievementRecursive2(TypedDict, total=False):
    """Relational arguments for Achievement"""


class SocialReportIncludeFromAchievementRecursive3(TypedDict, total=False):
    """Relational arguments for Achievement"""


class SocialReportIncludeFromAchievementRecursive4(TypedDict, total=False):
    """Relational arguments for Achievement"""

    

class SocialReportArgsFromAchievement(TypedDict, total=False):
    """Arguments for Achievement"""
    include: 'SocialReportIncludeFromSocialReportRecursive1'


class SocialReportArgsFromAchievementRecursive1(TypedDict, total=False):
    """Arguments for Achievement"""
    include: 'SocialReportIncludeFromSocialReportRecursive2'


class SocialReportArgsFromAchievementRecursive2(TypedDict, total=False):
    """Arguments for Achievement"""
    include: 'SocialReportIncludeFromSocialReportRecursive3'


class SocialReportArgsFromAchievementRecursive3(TypedDict, total=False):
    """Arguments for Achievement"""
    include: 'SocialReportIncludeFromSocialReportRecursive4'


class SocialReportArgsFromAchievementRecursive4(TypedDict, total=False):
    """Arguments for Achievement"""
    
    

class FindManySocialReportArgsFromAchievement(TypedDict, total=False):
    """Arguments for Achievement"""
    take: int
    skip: int
    order_by: Union['SocialReportOrderByInput', List['SocialReportOrderByInput']]
    where: 'SocialReportWhereInput'
    cursor: 'SocialReportWhereUniqueInput'
    distinct: List['SocialReportScalarFieldKeys']
    include: 'SocialReportIncludeFromSocialReportRecursive1'


class FindManySocialReportArgsFromAchievementRecursive1(TypedDict, total=False):
    """Arguments for Achievement"""
    take: int
    skip: int
    order_by: Union['SocialReportOrderByInput', List['SocialReportOrderByInput']]
    where: 'SocialReportWhereInput'
    cursor: 'SocialReportWhereUniqueInput'
    distinct: List['SocialReportScalarFieldKeys']
    include: 'SocialReportIncludeFromSocialReportRecursive2'


class FindManySocialReportArgsFromAchievementRecursive2(TypedDict, total=False):
    """Arguments for Achievement"""
    take: int
    skip: int
    order_by: Union['SocialReportOrderByInput', List['SocialReportOrderByInput']]
    where: 'SocialReportWhereInput'
    cursor: 'SocialReportWhereUniqueInput'
    distinct: List['SocialReportScalarFieldKeys']
    include: 'SocialReportIncludeFromSocialReportRecursive3'


class FindManySocialReportArgsFromAchievementRecursive3(TypedDict, total=False):
    """Arguments for Achievement"""
    take: int
    skip: int
    order_by: Union['SocialReportOrderByInput', List['SocialReportOrderByInput']]
    where: 'SocialReportWhereInput'
    cursor: 'SocialReportWhereUniqueInput'
    distinct: List['SocialReportScalarFieldKeys']
    include: 'SocialReportIncludeFromSocialReportRecursive4'


class FindManySocialReportArgsFromAchievementRecursive4(TypedDict, total=False):
    """Arguments for Achievement"""
    take: int
    skip: int
    order_by: Union['SocialReportOrderByInput', List['SocialReportOrderByInput']]
    where: 'SocialReportWhereInput'
    cursor: 'SocialReportWhereUniqueInput'
    distinct: List['SocialReportScalarFieldKeys']
    
    

class TrafficDataIncludeFromAchievement(TypedDict, total=False):
    """Relational arguments for Achievement"""


class TrafficDataIncludeFromAchievementRecursive1(TypedDict, total=False):
    """Relational arguments for Achievement"""


class TrafficDataIncludeFromAchievementRecursive2(TypedDict, total=False):
    """Relational arguments for Achievement"""


class TrafficDataIncludeFromAchievementRecursive3(TypedDict, total=False):
    """Relational arguments for Achievement"""


class TrafficDataIncludeFromAchievementRecursive4(TypedDict, total=False):
    """Relational arguments for Achievement"""

    

class TrafficDataArgsFromAchievement(TypedDict, total=False):
    """Arguments for Achievement"""
    include: 'TrafficDataIncludeFromTrafficDataRecursive1'


class TrafficDataArgsFromAchievementRecursive1(TypedDict, total=False):
    """Arguments for Achievement"""
    include: 'TrafficDataIncludeFromTrafficDataRecursive2'


class TrafficDataArgsFromAchievementRecursive2(TypedDict, total=False):
    """Arguments for Achievement"""
    include: 'TrafficDataIncludeFromTrafficDataRecursive3'


class TrafficDataArgsFromAchievementRecursive3(TypedDict, total=False):
    """Arguments for Achievement"""
    include: 'TrafficDataIncludeFromTrafficDataRecursive4'


class TrafficDataArgsFromAchievementRecursive4(TypedDict, total=False):
    """Arguments for Achievement"""
    
    

class FindManyTrafficDataArgsFromAchievement(TypedDict, total=False):
    """Arguments for Achievement"""
    take: int
    skip: int
    order_by: Union['TrafficDataOrderByInput', List['TrafficDataOrderByInput']]
    where: 'TrafficDataWhereInput'
    cursor: 'TrafficDataWhereUniqueInput'
    distinct: List['TrafficDataScalarFieldKeys']
    include: 'TrafficDataIncludeFromTrafficDataRecursive1'


class FindManyTrafficDataArgsFromAchievementRecursive1(TypedDict, total=False):
    """Arguments for Achievement"""
    take: int
    skip: int
    order_by: Union['TrafficDataOrderByInput', List['TrafficDataOrderByInput']]
    where: 'TrafficDataWhereInput'
    cursor: 'TrafficDataWhereUniqueInput'
    distinct: List['TrafficDataScalarFieldKeys']
    include: 'TrafficDataIncludeFromTrafficDataRecursive2'


class FindManyTrafficDataArgsFromAchievementRecursive2(TypedDict, total=False):
    """Arguments for Achievement"""
    take: int
    skip: int
    order_by: Union['TrafficDataOrderByInput', List['TrafficDataOrderByInput']]
    where: 'TrafficDataWhereInput'
    cursor: 'TrafficDataWhereUniqueInput'
    distinct: List['TrafficDataScalarFieldKeys']
    include: 'TrafficDataIncludeFromTrafficDataRecursive3'


class FindManyTrafficDataArgsFromAchievementRecursive3(TypedDict, total=False):
    """Arguments for Achievement"""
    take: int
    skip: int
    order_by: Union['TrafficDataOrderByInput', List['TrafficDataOrderByInput']]
    where: 'TrafficDataWhereInput'
    cursor: 'TrafficDataWhereUniqueInput'
    distinct: List['TrafficDataScalarFieldKeys']
    include: 'TrafficDataIncludeFromTrafficDataRecursive4'


class FindManyTrafficDataArgsFromAchievementRecursive4(TypedDict, total=False):
    """Arguments for Achievement"""
    take: int
    skip: int
    order_by: Union['TrafficDataOrderByInput', List['TrafficDataOrderByInput']]
    where: 'TrafficDataWhereInput'
    cursor: 'TrafficDataWhereUniqueInput'
    distinct: List['TrafficDataScalarFieldKeys']
    
    

class TrafficLightIncludeFromAchievement(TypedDict, total=False):
    """Relational arguments for Achievement"""


class TrafficLightIncludeFromAchievementRecursive1(TypedDict, total=False):
    """Relational arguments for Achievement"""


class TrafficLightIncludeFromAchievementRecursive2(TypedDict, total=False):
    """Relational arguments for Achievement"""


class TrafficLightIncludeFromAchievementRecursive3(TypedDict, total=False):
    """Relational arguments for Achievement"""


class TrafficLightIncludeFromAchievementRecursive4(TypedDict, total=False):
    """Relational arguments for Achievement"""

    

class TrafficLightArgsFromAchievement(TypedDict, total=False):
    """Arguments for Achievement"""
    include: 'TrafficLightIncludeFromTrafficLightRecursive1'


class TrafficLightArgsFromAchievementRecursive1(TypedDict, total=False):
    """Arguments for Achievement"""
    include: 'TrafficLightIncludeFromTrafficLightRecursive2'


class TrafficLightArgsFromAchievementRecursive2(TypedDict, total=False):
    """Arguments for Achievement"""
    include: 'TrafficLightIncludeFromTrafficLightRecursive3'


class TrafficLightArgsFromAchievementRecursive3(TypedDict, total=False):
    """Arguments for Achievement"""
    include: 'TrafficLightIncludeFromTrafficLightRecursive4'


class TrafficLightArgsFromAchievementRecursive4(TypedDict, total=False):
    """Arguments for Achievement"""
    
    

class FindManyTrafficLightArgsFromAchievement(TypedDict, total=False):
    """Arguments for Achievement"""
    take: int
    skip: int
    order_by: Union['TrafficLightOrderByInput', List['TrafficLightOrderByInput']]
    where: 'TrafficLightWhereInput'
    cursor: 'TrafficLightWhereUniqueInput'
    distinct: List['TrafficLightScalarFieldKeys']
    include: 'TrafficLightIncludeFromTrafficLightRecursive1'


class FindManyTrafficLightArgsFromAchievementRecursive1(TypedDict, total=False):
    """Arguments for Achievement"""
    take: int
    skip: int
    order_by: Union['TrafficLightOrderByInput', List['TrafficLightOrderByInput']]
    where: 'TrafficLightWhereInput'
    cursor: 'TrafficLightWhereUniqueInput'
    distinct: List['TrafficLightScalarFieldKeys']
    include: 'TrafficLightIncludeFromTrafficLightRecursive2'


class FindManyTrafficLightArgsFromAchievementRecursive2(TypedDict, total=False):
    """Arguments for Achievement"""
    take: int
    skip: int
    order_by: Union['TrafficLightOrderByInput', List['TrafficLightOrderByInput']]
    where: 'TrafficLightWhereInput'
    cursor: 'TrafficLightWhereUniqueInput'
    distinct: List['TrafficLightScalarFieldKeys']
    include: 'TrafficLightIncludeFromTrafficLightRecursive3'


class FindManyTrafficLightArgsFromAchievementRecursive3(TypedDict, total=False):
    """Arguments for Achievement"""
    take: int
    skip: int
    order_by: Union['TrafficLightOrderByInput', List['TrafficLightOrderByInput']]
    where: 'TrafficLightWhereInput'
    cursor: 'TrafficLightWhereUniqueInput'
    distinct: List['TrafficLightScalarFieldKeys']
    include: 'TrafficLightIncludeFromTrafficLightRecursive4'


class FindManyTrafficLightArgsFromAchievementRecursive4(TypedDict, total=False):
    """Arguments for Achievement"""
    take: int
    skip: int
    order_by: Union['TrafficLightOrderByInput', List['TrafficLightOrderByInput']]
    where: 'TrafficLightWhereInput'
    cursor: 'TrafficLightWhereUniqueInput'
    distinct: List['TrafficLightScalarFieldKeys']
    


FindManyAchievementArgs = FindManyAchievementArgsFromAchievement
FindFirstAchievementArgs = FindManyAchievementArgsFromAchievement


    

class AchievementWhereInput(TypedDict, total=False):
    """Achievement arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    operatorId: Union[_str, 'types.StringFilter']
    achievementType: Union[_str, 'types.StringFilter']
    timestamp: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['AchievementWhereInputRecursive1', List['AchievementWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['AchievementWhereInputRecursive1']
    OR: List['AchievementWhereInputRecursive1']
    NOT: List['AchievementWhereInputRecursive1']


class AchievementWhereInputRecursive1(TypedDict, total=False):
    """Achievement arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    operatorId: Union[_str, 'types.StringFilter']
    achievementType: Union[_str, 'types.StringFilter']
    timestamp: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['AchievementWhereInputRecursive2', List['AchievementWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['AchievementWhereInputRecursive2']
    OR: List['AchievementWhereInputRecursive2']
    NOT: List['AchievementWhereInputRecursive2']


class AchievementWhereInputRecursive2(TypedDict, total=False):
    """Achievement arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    operatorId: Union[_str, 'types.StringFilter']
    achievementType: Union[_str, 'types.StringFilter']
    timestamp: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['AchievementWhereInputRecursive3', List['AchievementWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['AchievementWhereInputRecursive3']
    OR: List['AchievementWhereInputRecursive3']
    NOT: List['AchievementWhereInputRecursive3']


class AchievementWhereInputRecursive3(TypedDict, total=False):
    """Achievement arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    operatorId: Union[_str, 'types.StringFilter']
    achievementType: Union[_str, 'types.StringFilter']
    timestamp: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['AchievementWhereInputRecursive4', List['AchievementWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['AchievementWhereInputRecursive4']
    OR: List['AchievementWhereInputRecursive4']
    NOT: List['AchievementWhereInputRecursive4']


class AchievementWhereInputRecursive4(TypedDict, total=False):
    """Achievement arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    operatorId: Union[_str, 'types.StringFilter']
    achievementType: Union[_str, 'types.StringFilter']
    timestamp: Union[datetime.datetime, 'types.DateTimeFilter']



# aggregate Achievement types


    

class AchievementScalarWhereWithAggregatesInput(TypedDict, total=False):
    """Achievement arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    operatorId: Union[_str, 'types.StringWithAggregatesFilter']
    achievementType: Union[_str, 'types.StringWithAggregatesFilter']
    timestamp: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['AchievementScalarWhereWithAggregatesInputRecursive1']
    OR: List['AchievementScalarWhereWithAggregatesInputRecursive1']
    NOT: List['AchievementScalarWhereWithAggregatesInputRecursive1']


class AchievementScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """Achievement arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    operatorId: Union[_str, 'types.StringWithAggregatesFilter']
    achievementType: Union[_str, 'types.StringWithAggregatesFilter']
    timestamp: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['AchievementScalarWhereWithAggregatesInputRecursive2']
    OR: List['AchievementScalarWhereWithAggregatesInputRecursive2']
    NOT: List['AchievementScalarWhereWithAggregatesInputRecursive2']


class AchievementScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """Achievement arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    operatorId: Union[_str, 'types.StringWithAggregatesFilter']
    achievementType: Union[_str, 'types.StringWithAggregatesFilter']
    timestamp: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['AchievementScalarWhereWithAggregatesInputRecursive3']
    OR: List['AchievementScalarWhereWithAggregatesInputRecursive3']
    NOT: List['AchievementScalarWhereWithAggregatesInputRecursive3']


class AchievementScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """Achievement arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    operatorId: Union[_str, 'types.StringWithAggregatesFilter']
    achievementType: Union[_str, 'types.StringWithAggregatesFilter']
    timestamp: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['AchievementScalarWhereWithAggregatesInputRecursive4']
    OR: List['AchievementScalarWhereWithAggregatesInputRecursive4']
    NOT: List['AchievementScalarWhereWithAggregatesInputRecursive4']


class AchievementScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """Achievement arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    operatorId: Union[_str, 'types.StringWithAggregatesFilter']
    achievementType: Union[_str, 'types.StringWithAggregatesFilter']
    timestamp: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']



class AchievementGroupByOutput(TypedDict, total=False):
    id: _str
    operatorId: _str
    achievementType: _str
    timestamp: datetime.datetime
    _sum: 'AchievementSumAggregateOutput'
    _avg: 'AchievementAvgAggregateOutput'
    _min: 'AchievementMinAggregateOutput'
    _max: 'AchievementMaxAggregateOutput'
    _count: 'AchievementCountAggregateOutput'


class AchievementAvgAggregateOutput(TypedDict, total=False):
    """Achievement output for aggregating averages"""


class AchievementSumAggregateOutput(TypedDict, total=False):
    """Achievement output for aggregating sums"""


class AchievementScalarAggregateOutput(TypedDict, total=False):
    """Achievement output including scalar fields"""
    id: _str
    operatorId: _str
    achievementType: _str
    timestamp: datetime.datetime


AchievementMinAggregateOutput = AchievementScalarAggregateOutput
AchievementMaxAggregateOutput = AchievementScalarAggregateOutput


class AchievementMaxAggregateInput(TypedDict, total=False):
    """Achievement input for aggregating by max"""
    id: bool
    operatorId: bool
    achievementType: bool
    timestamp: bool


class AchievementMinAggregateInput(TypedDict, total=False):
    """Achievement input for aggregating by min"""
    id: bool
    operatorId: bool
    achievementType: bool
    timestamp: bool


class AchievementNumberAggregateInput(TypedDict, total=False):
    """Achievement input for aggregating numbers"""


AchievementAvgAggregateInput = AchievementNumberAggregateInput
AchievementSumAggregateInput = AchievementNumberAggregateInput


AchievementCountAggregateInput = TypedDict(
    'AchievementCountAggregateInput',
    {
        'id': bool,
        'operatorId': bool,
        'achievementType': bool,
        'timestamp': bool,
        '_all': bool,
    },
    total=False,
)

AchievementCountAggregateOutput = TypedDict(
    'AchievementCountAggregateOutput',
    {
        'id': int,
        'operatorId': int,
        'achievementType': int,
        'timestamp': int,
        '_all': int,
    },
    total=False,
)


AchievementKeys = Literal[
    'id',
    'operatorId',
    'achievementType',
    'timestamp',
]
AchievementScalarFieldKeys = Literal[
    'id',
    'operatorId',
    'achievementType',
    'timestamp',
]
AchievementScalarFieldKeysT = TypeVar('AchievementScalarFieldKeysT', bound=AchievementScalarFieldKeys)

AchievementRelationalFieldKeys = _NoneType

# Camera types

class CameraOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the Camera create method"""
    id: _str
    description: Optional[_str]


class CameraCreateInput(CameraOptionalCreateInput):
    """Required arguments to the Camera create method"""
    name: _str
    liveUrl: _str
    geo: _str
    location: 'fields.Base64'


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class CameraOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the Camera create method, without relations"""
    id: _str
    description: Optional[_str]


class CameraCreateWithoutRelationsInput(CameraOptionalCreateWithoutRelationsInput):
    """Required arguments to the Camera create method, without relations"""
    name: _str
    liveUrl: _str
    geo: _str
    location: 'fields.Base64'

class CameraConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'CameraCreateWithoutRelationsInput'
    where: 'CameraWhereUniqueInput'

class CameraCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'CameraCreateWithoutRelationsInput'
    connect: 'CameraWhereUniqueInput'
    connect_or_create: 'CameraConnectOrCreateWithoutRelationsInput'


class CameraCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['CameraCreateWithoutRelationsInput', List['CameraCreateWithoutRelationsInput']]
    connect: Union['CameraWhereUniqueInput', List['CameraWhereUniqueInput']]
    connect_or_create: Union['CameraConnectOrCreateWithoutRelationsInput', List['CameraConnectOrCreateWithoutRelationsInput']]

_CameraWhereUnique_id_Input = TypedDict(
    '_CameraWhereUnique_id_Input',
    {
        'id': '_str',
    },
    total=True
)

CameraWhereUniqueInput = _CameraWhereUnique_id_Input


class CameraUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: _str
    name: _str
    liveUrl: _str
    geo: _str
    description: Optional[_str]
    location: 'fields.Base64'


class CameraUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: _str
    name: _str
    liveUrl: _str
    geo: _str
    description: Optional[_str]
    location: 'fields.Base64'


class CameraUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['CameraCreateWithoutRelationsInput']
    connect: List['CameraWhereUniqueInput']
    connect_or_create: List['CameraConnectOrCreateWithoutRelationsInput']
    set: List['CameraWhereUniqueInput']
    disconnect: List['CameraWhereUniqueInput']
    delete: List['CameraWhereUniqueInput']

    # TODO
    # update: List['CameraUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['CameraUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['CameraScalarWhereInput']
    # upsert: List['CameraUpserteWithWhereUniqueWithoutRelationsInput']


class CameraUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'CameraCreateWithoutRelationsInput'
    connect: 'CameraWhereUniqueInput'
    connect_or_create: 'CameraConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'CameraUpdateInput'
    # upsert: 'CameraUpsertWithoutRelationsInput'


class CameraUpsertInput(TypedDict):
    create: 'CameraCreateInput'
    update: 'CameraUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_Camera_id_OrderByInput = TypedDict(
    '_Camera_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_Camera_name_OrderByInput = TypedDict(
    '_Camera_name_OrderByInput',
    {
        'name': 'SortOrder',
    },
    total=True
)

_Camera_liveUrl_OrderByInput = TypedDict(
    '_Camera_liveUrl_OrderByInput',
    {
        'liveUrl': 'SortOrder',
    },
    total=True
)

_Camera_geo_OrderByInput = TypedDict(
    '_Camera_geo_OrderByInput',
    {
        'geo': 'SortOrder',
    },
    total=True
)

_Camera_description_OrderByInput = TypedDict(
    '_Camera_description_OrderByInput',
    {
        'description': 'SortOrder',
    },
    total=True
)

_Camera_location_OrderByInput = TypedDict(
    '_Camera_location_OrderByInput',
    {
        'location': 'SortOrder',
    },
    total=True
)

_Camera_RelevanceInner = TypedDict(
    '_Camera_RelevanceInner',
    {
        'fields': 'List[CameraScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_Camera_RelevanceOrderByInput = TypedDict(
    '_Camera_RelevanceOrderByInput',
    {
        '_relevance': '_Camera_RelevanceInner',
    },
    total=True
)

CameraOrderByInput = Union[
    '_Camera_id_OrderByInput',
    '_Camera_name_OrderByInput',
    '_Camera_liveUrl_OrderByInput',
    '_Camera_geo_OrderByInput',
    '_Camera_description_OrderByInput',
    '_Camera_location_OrderByInput',
    '_Camera_RelevanceOrderByInput',
]



# recursive Camera types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

CameraRelationFilter = TypedDict(
    'CameraRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class CameraListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class CameraInclude(TypedDict, total=False):
    """Camera relational arguments"""


    

class AchievementIncludeFromCamera(TypedDict, total=False):
    """Relational arguments for Camera"""


class AchievementIncludeFromCameraRecursive1(TypedDict, total=False):
    """Relational arguments for Camera"""


class AchievementIncludeFromCameraRecursive2(TypedDict, total=False):
    """Relational arguments for Camera"""


class AchievementIncludeFromCameraRecursive3(TypedDict, total=False):
    """Relational arguments for Camera"""


class AchievementIncludeFromCameraRecursive4(TypedDict, total=False):
    """Relational arguments for Camera"""

    

class AchievementArgsFromCamera(TypedDict, total=False):
    """Arguments for Camera"""
    include: 'AchievementIncludeFromAchievementRecursive1'


class AchievementArgsFromCameraRecursive1(TypedDict, total=False):
    """Arguments for Camera"""
    include: 'AchievementIncludeFromAchievementRecursive2'


class AchievementArgsFromCameraRecursive2(TypedDict, total=False):
    """Arguments for Camera"""
    include: 'AchievementIncludeFromAchievementRecursive3'


class AchievementArgsFromCameraRecursive3(TypedDict, total=False):
    """Arguments for Camera"""
    include: 'AchievementIncludeFromAchievementRecursive4'


class AchievementArgsFromCameraRecursive4(TypedDict, total=False):
    """Arguments for Camera"""
    
    

class FindManyAchievementArgsFromCamera(TypedDict, total=False):
    """Arguments for Camera"""
    take: int
    skip: int
    order_by: Union['AchievementOrderByInput', List['AchievementOrderByInput']]
    where: 'AchievementWhereInput'
    cursor: 'AchievementWhereUniqueInput'
    distinct: List['AchievementScalarFieldKeys']
    include: 'AchievementIncludeFromAchievementRecursive1'


class FindManyAchievementArgsFromCameraRecursive1(TypedDict, total=False):
    """Arguments for Camera"""
    take: int
    skip: int
    order_by: Union['AchievementOrderByInput', List['AchievementOrderByInput']]
    where: 'AchievementWhereInput'
    cursor: 'AchievementWhereUniqueInput'
    distinct: List['AchievementScalarFieldKeys']
    include: 'AchievementIncludeFromAchievementRecursive2'


class FindManyAchievementArgsFromCameraRecursive2(TypedDict, total=False):
    """Arguments for Camera"""
    take: int
    skip: int
    order_by: Union['AchievementOrderByInput', List['AchievementOrderByInput']]
    where: 'AchievementWhereInput'
    cursor: 'AchievementWhereUniqueInput'
    distinct: List['AchievementScalarFieldKeys']
    include: 'AchievementIncludeFromAchievementRecursive3'


class FindManyAchievementArgsFromCameraRecursive3(TypedDict, total=False):
    """Arguments for Camera"""
    take: int
    skip: int
    order_by: Union['AchievementOrderByInput', List['AchievementOrderByInput']]
    where: 'AchievementWhereInput'
    cursor: 'AchievementWhereUniqueInput'
    distinct: List['AchievementScalarFieldKeys']
    include: 'AchievementIncludeFromAchievementRecursive4'


class FindManyAchievementArgsFromCameraRecursive4(TypedDict, total=False):
    """Arguments for Camera"""
    take: int
    skip: int
    order_by: Union['AchievementOrderByInput', List['AchievementOrderByInput']]
    where: 'AchievementWhereInput'
    cursor: 'AchievementWhereUniqueInput'
    distinct: List['AchievementScalarFieldKeys']
    
    

class CameraIncludeFromCamera(TypedDict, total=False):
    """Relational arguments for Camera"""


class CameraIncludeFromCameraRecursive1(TypedDict, total=False):
    """Relational arguments for Camera"""


class CameraIncludeFromCameraRecursive2(TypedDict, total=False):
    """Relational arguments for Camera"""


class CameraIncludeFromCameraRecursive3(TypedDict, total=False):
    """Relational arguments for Camera"""


class CameraIncludeFromCameraRecursive4(TypedDict, total=False):
    """Relational arguments for Camera"""

    

class CameraArgsFromCamera(TypedDict, total=False):
    """Arguments for Camera"""
    include: 'CameraIncludeFromCameraRecursive1'


class CameraArgsFromCameraRecursive1(TypedDict, total=False):
    """Arguments for Camera"""
    include: 'CameraIncludeFromCameraRecursive2'


class CameraArgsFromCameraRecursive2(TypedDict, total=False):
    """Arguments for Camera"""
    include: 'CameraIncludeFromCameraRecursive3'


class CameraArgsFromCameraRecursive3(TypedDict, total=False):
    """Arguments for Camera"""
    include: 'CameraIncludeFromCameraRecursive4'


class CameraArgsFromCameraRecursive4(TypedDict, total=False):
    """Arguments for Camera"""
    
    

class FindManyCameraArgsFromCamera(TypedDict, total=False):
    """Arguments for Camera"""
    take: int
    skip: int
    order_by: Union['CameraOrderByInput', List['CameraOrderByInput']]
    where: 'CameraWhereInput'
    cursor: 'CameraWhereUniqueInput'
    distinct: List['CameraScalarFieldKeys']
    include: 'CameraIncludeFromCameraRecursive1'


class FindManyCameraArgsFromCameraRecursive1(TypedDict, total=False):
    """Arguments for Camera"""
    take: int
    skip: int
    order_by: Union['CameraOrderByInput', List['CameraOrderByInput']]
    where: 'CameraWhereInput'
    cursor: 'CameraWhereUniqueInput'
    distinct: List['CameraScalarFieldKeys']
    include: 'CameraIncludeFromCameraRecursive2'


class FindManyCameraArgsFromCameraRecursive2(TypedDict, total=False):
    """Arguments for Camera"""
    take: int
    skip: int
    order_by: Union['CameraOrderByInput', List['CameraOrderByInput']]
    where: 'CameraWhereInput'
    cursor: 'CameraWhereUniqueInput'
    distinct: List['CameraScalarFieldKeys']
    include: 'CameraIncludeFromCameraRecursive3'


class FindManyCameraArgsFromCameraRecursive3(TypedDict, total=False):
    """Arguments for Camera"""
    take: int
    skip: int
    order_by: Union['CameraOrderByInput', List['CameraOrderByInput']]
    where: 'CameraWhereInput'
    cursor: 'CameraWhereUniqueInput'
    distinct: List['CameraScalarFieldKeys']
    include: 'CameraIncludeFromCameraRecursive4'


class FindManyCameraArgsFromCameraRecursive4(TypedDict, total=False):
    """Arguments for Camera"""
    take: int
    skip: int
    order_by: Union['CameraOrderByInput', List['CameraOrderByInput']]
    where: 'CameraWhereInput'
    cursor: 'CameraWhereUniqueInput'
    distinct: List['CameraScalarFieldKeys']
    
    

class EffectivenessIncludeFromCamera(TypedDict, total=False):
    """Relational arguments for Camera"""


class EffectivenessIncludeFromCameraRecursive1(TypedDict, total=False):
    """Relational arguments for Camera"""


class EffectivenessIncludeFromCameraRecursive2(TypedDict, total=False):
    """Relational arguments for Camera"""


class EffectivenessIncludeFromCameraRecursive3(TypedDict, total=False):
    """Relational arguments for Camera"""


class EffectivenessIncludeFromCameraRecursive4(TypedDict, total=False):
    """Relational arguments for Camera"""

    

class EffectivenessArgsFromCamera(TypedDict, total=False):
    """Arguments for Camera"""
    include: 'EffectivenessIncludeFromEffectivenessRecursive1'


class EffectivenessArgsFromCameraRecursive1(TypedDict, total=False):
    """Arguments for Camera"""
    include: 'EffectivenessIncludeFromEffectivenessRecursive2'


class EffectivenessArgsFromCameraRecursive2(TypedDict, total=False):
    """Arguments for Camera"""
    include: 'EffectivenessIncludeFromEffectivenessRecursive3'


class EffectivenessArgsFromCameraRecursive3(TypedDict, total=False):
    """Arguments for Camera"""
    include: 'EffectivenessIncludeFromEffectivenessRecursive4'


class EffectivenessArgsFromCameraRecursive4(TypedDict, total=False):
    """Arguments for Camera"""
    
    

class FindManyEffectivenessArgsFromCamera(TypedDict, total=False):
    """Arguments for Camera"""
    take: int
    skip: int
    order_by: Union['EffectivenessOrderByInput', List['EffectivenessOrderByInput']]
    where: 'EffectivenessWhereInput'
    cursor: 'EffectivenessWhereUniqueInput'
    distinct: List['EffectivenessScalarFieldKeys']
    include: 'EffectivenessIncludeFromEffectivenessRecursive1'


class FindManyEffectivenessArgsFromCameraRecursive1(TypedDict, total=False):
    """Arguments for Camera"""
    take: int
    skip: int
    order_by: Union['EffectivenessOrderByInput', List['EffectivenessOrderByInput']]
    where: 'EffectivenessWhereInput'
    cursor: 'EffectivenessWhereUniqueInput'
    distinct: List['EffectivenessScalarFieldKeys']
    include: 'EffectivenessIncludeFromEffectivenessRecursive2'


class FindManyEffectivenessArgsFromCameraRecursive2(TypedDict, total=False):
    """Arguments for Camera"""
    take: int
    skip: int
    order_by: Union['EffectivenessOrderByInput', List['EffectivenessOrderByInput']]
    where: 'EffectivenessWhereInput'
    cursor: 'EffectivenessWhereUniqueInput'
    distinct: List['EffectivenessScalarFieldKeys']
    include: 'EffectivenessIncludeFromEffectivenessRecursive3'


class FindManyEffectivenessArgsFromCameraRecursive3(TypedDict, total=False):
    """Arguments for Camera"""
    take: int
    skip: int
    order_by: Union['EffectivenessOrderByInput', List['EffectivenessOrderByInput']]
    where: 'EffectivenessWhereInput'
    cursor: 'EffectivenessWhereUniqueInput'
    distinct: List['EffectivenessScalarFieldKeys']
    include: 'EffectivenessIncludeFromEffectivenessRecursive4'


class FindManyEffectivenessArgsFromCameraRecursive4(TypedDict, total=False):
    """Arguments for Camera"""
    take: int
    skip: int
    order_by: Union['EffectivenessOrderByInput', List['EffectivenessOrderByInput']]
    where: 'EffectivenessWhereInput'
    cursor: 'EffectivenessWhereUniqueInput'
    distinct: List['EffectivenessScalarFieldKeys']
    
    

class EnvironmentalDataIncludeFromCamera(TypedDict, total=False):
    """Relational arguments for Camera"""


class EnvironmentalDataIncludeFromCameraRecursive1(TypedDict, total=False):
    """Relational arguments for Camera"""


class EnvironmentalDataIncludeFromCameraRecursive2(TypedDict, total=False):
    """Relational arguments for Camera"""


class EnvironmentalDataIncludeFromCameraRecursive3(TypedDict, total=False):
    """Relational arguments for Camera"""


class EnvironmentalDataIncludeFromCameraRecursive4(TypedDict, total=False):
    """Relational arguments for Camera"""

    

class EnvironmentalDataArgsFromCamera(TypedDict, total=False):
    """Arguments for Camera"""
    include: 'EnvironmentalDataIncludeFromEnvironmentalDataRecursive1'


class EnvironmentalDataArgsFromCameraRecursive1(TypedDict, total=False):
    """Arguments for Camera"""
    include: 'EnvironmentalDataIncludeFromEnvironmentalDataRecursive2'


class EnvironmentalDataArgsFromCameraRecursive2(TypedDict, total=False):
    """Arguments for Camera"""
    include: 'EnvironmentalDataIncludeFromEnvironmentalDataRecursive3'


class EnvironmentalDataArgsFromCameraRecursive3(TypedDict, total=False):
    """Arguments for Camera"""
    include: 'EnvironmentalDataIncludeFromEnvironmentalDataRecursive4'


class EnvironmentalDataArgsFromCameraRecursive4(TypedDict, total=False):
    """Arguments for Camera"""
    
    

class FindManyEnvironmentalDataArgsFromCamera(TypedDict, total=False):
    """Arguments for Camera"""
    take: int
    skip: int
    order_by: Union['EnvironmentalDataOrderByInput', List['EnvironmentalDataOrderByInput']]
    where: 'EnvironmentalDataWhereInput'
    cursor: 'EnvironmentalDataWhereUniqueInput'
    distinct: List['EnvironmentalDataScalarFieldKeys']
    include: 'EnvironmentalDataIncludeFromEnvironmentalDataRecursive1'


class FindManyEnvironmentalDataArgsFromCameraRecursive1(TypedDict, total=False):
    """Arguments for Camera"""
    take: int
    skip: int
    order_by: Union['EnvironmentalDataOrderByInput', List['EnvironmentalDataOrderByInput']]
    where: 'EnvironmentalDataWhereInput'
    cursor: 'EnvironmentalDataWhereUniqueInput'
    distinct: List['EnvironmentalDataScalarFieldKeys']
    include: 'EnvironmentalDataIncludeFromEnvironmentalDataRecursive2'


class FindManyEnvironmentalDataArgsFromCameraRecursive2(TypedDict, total=False):
    """Arguments for Camera"""
    take: int
    skip: int
    order_by: Union['EnvironmentalDataOrderByInput', List['EnvironmentalDataOrderByInput']]
    where: 'EnvironmentalDataWhereInput'
    cursor: 'EnvironmentalDataWhereUniqueInput'
    distinct: List['EnvironmentalDataScalarFieldKeys']
    include: 'EnvironmentalDataIncludeFromEnvironmentalDataRecursive3'


class FindManyEnvironmentalDataArgsFromCameraRecursive3(TypedDict, total=False):
    """Arguments for Camera"""
    take: int
    skip: int
    order_by: Union['EnvironmentalDataOrderByInput', List['EnvironmentalDataOrderByInput']]
    where: 'EnvironmentalDataWhereInput'
    cursor: 'EnvironmentalDataWhereUniqueInput'
    distinct: List['EnvironmentalDataScalarFieldKeys']
    include: 'EnvironmentalDataIncludeFromEnvironmentalDataRecursive4'


class FindManyEnvironmentalDataArgsFromCameraRecursive4(TypedDict, total=False):
    """Arguments for Camera"""
    take: int
    skip: int
    order_by: Union['EnvironmentalDataOrderByInput', List['EnvironmentalDataOrderByInput']]
    where: 'EnvironmentalDataWhereInput'
    cursor: 'EnvironmentalDataWhereUniqueInput'
    distinct: List['EnvironmentalDataScalarFieldKeys']
    
    

class EventIncludeFromCamera(TypedDict, total=False):
    """Relational arguments for Camera"""


class EventIncludeFromCameraRecursive1(TypedDict, total=False):
    """Relational arguments for Camera"""


class EventIncludeFromCameraRecursive2(TypedDict, total=False):
    """Relational arguments for Camera"""


class EventIncludeFromCameraRecursive3(TypedDict, total=False):
    """Relational arguments for Camera"""


class EventIncludeFromCameraRecursive4(TypedDict, total=False):
    """Relational arguments for Camera"""

    

class EventArgsFromCamera(TypedDict, total=False):
    """Arguments for Camera"""
    include: 'EventIncludeFromEventRecursive1'


class EventArgsFromCameraRecursive1(TypedDict, total=False):
    """Arguments for Camera"""
    include: 'EventIncludeFromEventRecursive2'


class EventArgsFromCameraRecursive2(TypedDict, total=False):
    """Arguments for Camera"""
    include: 'EventIncludeFromEventRecursive3'


class EventArgsFromCameraRecursive3(TypedDict, total=False):
    """Arguments for Camera"""
    include: 'EventIncludeFromEventRecursive4'


class EventArgsFromCameraRecursive4(TypedDict, total=False):
    """Arguments for Camera"""
    
    

class FindManyEventArgsFromCamera(TypedDict, total=False):
    """Arguments for Camera"""
    take: int
    skip: int
    order_by: Union['EventOrderByInput', List['EventOrderByInput']]
    where: 'EventWhereInput'
    cursor: 'EventWhereUniqueInput'
    distinct: List['EventScalarFieldKeys']
    include: 'EventIncludeFromEventRecursive1'


class FindManyEventArgsFromCameraRecursive1(TypedDict, total=False):
    """Arguments for Camera"""
    take: int
    skip: int
    order_by: Union['EventOrderByInput', List['EventOrderByInput']]
    where: 'EventWhereInput'
    cursor: 'EventWhereUniqueInput'
    distinct: List['EventScalarFieldKeys']
    include: 'EventIncludeFromEventRecursive2'


class FindManyEventArgsFromCameraRecursive2(TypedDict, total=False):
    """Arguments for Camera"""
    take: int
    skip: int
    order_by: Union['EventOrderByInput', List['EventOrderByInput']]
    where: 'EventWhereInput'
    cursor: 'EventWhereUniqueInput'
    distinct: List['EventScalarFieldKeys']
    include: 'EventIncludeFromEventRecursive3'


class FindManyEventArgsFromCameraRecursive3(TypedDict, total=False):
    """Arguments for Camera"""
    take: int
    skip: int
    order_by: Union['EventOrderByInput', List['EventOrderByInput']]
    where: 'EventWhereInput'
    cursor: 'EventWhereUniqueInput'
    distinct: List['EventScalarFieldKeys']
    include: 'EventIncludeFromEventRecursive4'


class FindManyEventArgsFromCameraRecursive4(TypedDict, total=False):
    """Arguments for Camera"""
    take: int
    skip: int
    order_by: Union['EventOrderByInput', List['EventOrderByInput']]
    where: 'EventWhereInput'
    cursor: 'EventWhereUniqueInput'
    distinct: List['EventScalarFieldKeys']
    
    

class ForecastIncludeFromCamera(TypedDict, total=False):
    """Relational arguments for Camera"""


class ForecastIncludeFromCameraRecursive1(TypedDict, total=False):
    """Relational arguments for Camera"""


class ForecastIncludeFromCameraRecursive2(TypedDict, total=False):
    """Relational arguments for Camera"""


class ForecastIncludeFromCameraRecursive3(TypedDict, total=False):
    """Relational arguments for Camera"""


class ForecastIncludeFromCameraRecursive4(TypedDict, total=False):
    """Relational arguments for Camera"""

    

class ForecastArgsFromCamera(TypedDict, total=False):
    """Arguments for Camera"""
    include: 'ForecastIncludeFromForecastRecursive1'


class ForecastArgsFromCameraRecursive1(TypedDict, total=False):
    """Arguments for Camera"""
    include: 'ForecastIncludeFromForecastRecursive2'


class ForecastArgsFromCameraRecursive2(TypedDict, total=False):
    """Arguments for Camera"""
    include: 'ForecastIncludeFromForecastRecursive3'


class ForecastArgsFromCameraRecursive3(TypedDict, total=False):
    """Arguments for Camera"""
    include: 'ForecastIncludeFromForecastRecursive4'


class ForecastArgsFromCameraRecursive4(TypedDict, total=False):
    """Arguments for Camera"""
    
    

class FindManyForecastArgsFromCamera(TypedDict, total=False):
    """Arguments for Camera"""
    take: int
    skip: int
    order_by: Union['ForecastOrderByInput', List['ForecastOrderByInput']]
    where: 'ForecastWhereInput'
    cursor: 'ForecastWhereUniqueInput'
    distinct: List['ForecastScalarFieldKeys']
    include: 'ForecastIncludeFromForecastRecursive1'


class FindManyForecastArgsFromCameraRecursive1(TypedDict, total=False):
    """Arguments for Camera"""
    take: int
    skip: int
    order_by: Union['ForecastOrderByInput', List['ForecastOrderByInput']]
    where: 'ForecastWhereInput'
    cursor: 'ForecastWhereUniqueInput'
    distinct: List['ForecastScalarFieldKeys']
    include: 'ForecastIncludeFromForecastRecursive2'


class FindManyForecastArgsFromCameraRecursive2(TypedDict, total=False):
    """Arguments for Camera"""
    take: int
    skip: int
    order_by: Union['ForecastOrderByInput', List['ForecastOrderByInput']]
    where: 'ForecastWhereInput'
    cursor: 'ForecastWhereUniqueInput'
    distinct: List['ForecastScalarFieldKeys']
    include: 'ForecastIncludeFromForecastRecursive3'


class FindManyForecastArgsFromCameraRecursive3(TypedDict, total=False):
    """Arguments for Camera"""
    take: int
    skip: int
    order_by: Union['ForecastOrderByInput', List['ForecastOrderByInput']]
    where: 'ForecastWhereInput'
    cursor: 'ForecastWhereUniqueInput'
    distinct: List['ForecastScalarFieldKeys']
    include: 'ForecastIncludeFromForecastRecursive4'


class FindManyForecastArgsFromCameraRecursive4(TypedDict, total=False):
    """Arguments for Camera"""
    take: int
    skip: int
    order_by: Union['ForecastOrderByInput', List['ForecastOrderByInput']]
    where: 'ForecastWhereInput'
    cursor: 'ForecastWhereUniqueInput'
    distinct: List['ForecastScalarFieldKeys']
    
    

class IncidentIncludeFromCamera(TypedDict, total=False):
    """Relational arguments for Camera"""


class IncidentIncludeFromCameraRecursive1(TypedDict, total=False):
    """Relational arguments for Camera"""


class IncidentIncludeFromCameraRecursive2(TypedDict, total=False):
    """Relational arguments for Camera"""


class IncidentIncludeFromCameraRecursive3(TypedDict, total=False):
    """Relational arguments for Camera"""


class IncidentIncludeFromCameraRecursive4(TypedDict, total=False):
    """Relational arguments for Camera"""

    

class IncidentArgsFromCamera(TypedDict, total=False):
    """Arguments for Camera"""
    include: 'IncidentIncludeFromIncidentRecursive1'


class IncidentArgsFromCameraRecursive1(TypedDict, total=False):
    """Arguments for Camera"""
    include: 'IncidentIncludeFromIncidentRecursive2'


class IncidentArgsFromCameraRecursive2(TypedDict, total=False):
    """Arguments for Camera"""
    include: 'IncidentIncludeFromIncidentRecursive3'


class IncidentArgsFromCameraRecursive3(TypedDict, total=False):
    """Arguments for Camera"""
    include: 'IncidentIncludeFromIncidentRecursive4'


class IncidentArgsFromCameraRecursive4(TypedDict, total=False):
    """Arguments for Camera"""
    
    

class FindManyIncidentArgsFromCamera(TypedDict, total=False):
    """Arguments for Camera"""
    take: int
    skip: int
    order_by: Union['IncidentOrderByInput', List['IncidentOrderByInput']]
    where: 'IncidentWhereInput'
    cursor: 'IncidentWhereUniqueInput'
    distinct: List['IncidentScalarFieldKeys']
    include: 'IncidentIncludeFromIncidentRecursive1'


class FindManyIncidentArgsFromCameraRecursive1(TypedDict, total=False):
    """Arguments for Camera"""
    take: int
    skip: int
    order_by: Union['IncidentOrderByInput', List['IncidentOrderByInput']]
    where: 'IncidentWhereInput'
    cursor: 'IncidentWhereUniqueInput'
    distinct: List['IncidentScalarFieldKeys']
    include: 'IncidentIncludeFromIncidentRecursive2'


class FindManyIncidentArgsFromCameraRecursive2(TypedDict, total=False):
    """Arguments for Camera"""
    take: int
    skip: int
    order_by: Union['IncidentOrderByInput', List['IncidentOrderByInput']]
    where: 'IncidentWhereInput'
    cursor: 'IncidentWhereUniqueInput'
    distinct: List['IncidentScalarFieldKeys']
    include: 'IncidentIncludeFromIncidentRecursive3'


class FindManyIncidentArgsFromCameraRecursive3(TypedDict, total=False):
    """Arguments for Camera"""
    take: int
    skip: int
    order_by: Union['IncidentOrderByInput', List['IncidentOrderByInput']]
    where: 'IncidentWhereInput'
    cursor: 'IncidentWhereUniqueInput'
    distinct: List['IncidentScalarFieldKeys']
    include: 'IncidentIncludeFromIncidentRecursive4'


class FindManyIncidentArgsFromCameraRecursive4(TypedDict, total=False):
    """Arguments for Camera"""
    take: int
    skip: int
    order_by: Union['IncidentOrderByInput', List['IncidentOrderByInput']]
    where: 'IncidentWhereInput'
    cursor: 'IncidentWhereUniqueInput'
    distinct: List['IncidentScalarFieldKeys']
    
    

class NotificationIncludeFromCamera(TypedDict, total=False):
    """Relational arguments for Camera"""


class NotificationIncludeFromCameraRecursive1(TypedDict, total=False):
    """Relational arguments for Camera"""


class NotificationIncludeFromCameraRecursive2(TypedDict, total=False):
    """Relational arguments for Camera"""


class NotificationIncludeFromCameraRecursive3(TypedDict, total=False):
    """Relational arguments for Camera"""


class NotificationIncludeFromCameraRecursive4(TypedDict, total=False):
    """Relational arguments for Camera"""

    

class NotificationArgsFromCamera(TypedDict, total=False):
    """Arguments for Camera"""
    include: 'NotificationIncludeFromNotificationRecursive1'


class NotificationArgsFromCameraRecursive1(TypedDict, total=False):
    """Arguments for Camera"""
    include: 'NotificationIncludeFromNotificationRecursive2'


class NotificationArgsFromCameraRecursive2(TypedDict, total=False):
    """Arguments for Camera"""
    include: 'NotificationIncludeFromNotificationRecursive3'


class NotificationArgsFromCameraRecursive3(TypedDict, total=False):
    """Arguments for Camera"""
    include: 'NotificationIncludeFromNotificationRecursive4'


class NotificationArgsFromCameraRecursive4(TypedDict, total=False):
    """Arguments for Camera"""
    
    

class FindManyNotificationArgsFromCamera(TypedDict, total=False):
    """Arguments for Camera"""
    take: int
    skip: int
    order_by: Union['NotificationOrderByInput', List['NotificationOrderByInput']]
    where: 'NotificationWhereInput'
    cursor: 'NotificationWhereUniqueInput'
    distinct: List['NotificationScalarFieldKeys']
    include: 'NotificationIncludeFromNotificationRecursive1'


class FindManyNotificationArgsFromCameraRecursive1(TypedDict, total=False):
    """Arguments for Camera"""
    take: int
    skip: int
    order_by: Union['NotificationOrderByInput', List['NotificationOrderByInput']]
    where: 'NotificationWhereInput'
    cursor: 'NotificationWhereUniqueInput'
    distinct: List['NotificationScalarFieldKeys']
    include: 'NotificationIncludeFromNotificationRecursive2'


class FindManyNotificationArgsFromCameraRecursive2(TypedDict, total=False):
    """Arguments for Camera"""
    take: int
    skip: int
    order_by: Union['NotificationOrderByInput', List['NotificationOrderByInput']]
    where: 'NotificationWhereInput'
    cursor: 'NotificationWhereUniqueInput'
    distinct: List['NotificationScalarFieldKeys']
    include: 'NotificationIncludeFromNotificationRecursive3'


class FindManyNotificationArgsFromCameraRecursive3(TypedDict, total=False):
    """Arguments for Camera"""
    take: int
    skip: int
    order_by: Union['NotificationOrderByInput', List['NotificationOrderByInput']]
    where: 'NotificationWhereInput'
    cursor: 'NotificationWhereUniqueInput'
    distinct: List['NotificationScalarFieldKeys']
    include: 'NotificationIncludeFromNotificationRecursive4'


class FindManyNotificationArgsFromCameraRecursive4(TypedDict, total=False):
    """Arguments for Camera"""
    take: int
    skip: int
    order_by: Union['NotificationOrderByInput', List['NotificationOrderByInput']]
    where: 'NotificationWhereInput'
    cursor: 'NotificationWhereUniqueInput'
    distinct: List['NotificationScalarFieldKeys']
    
    

class ScenarioIncludeFromCamera(TypedDict, total=False):
    """Relational arguments for Camera"""


class ScenarioIncludeFromCameraRecursive1(TypedDict, total=False):
    """Relational arguments for Camera"""


class ScenarioIncludeFromCameraRecursive2(TypedDict, total=False):
    """Relational arguments for Camera"""


class ScenarioIncludeFromCameraRecursive3(TypedDict, total=False):
    """Relational arguments for Camera"""


class ScenarioIncludeFromCameraRecursive4(TypedDict, total=False):
    """Relational arguments for Camera"""

    

class ScenarioArgsFromCamera(TypedDict, total=False):
    """Arguments for Camera"""
    include: 'ScenarioIncludeFromScenarioRecursive1'


class ScenarioArgsFromCameraRecursive1(TypedDict, total=False):
    """Arguments for Camera"""
    include: 'ScenarioIncludeFromScenarioRecursive2'


class ScenarioArgsFromCameraRecursive2(TypedDict, total=False):
    """Arguments for Camera"""
    include: 'ScenarioIncludeFromScenarioRecursive3'


class ScenarioArgsFromCameraRecursive3(TypedDict, total=False):
    """Arguments for Camera"""
    include: 'ScenarioIncludeFromScenarioRecursive4'


class ScenarioArgsFromCameraRecursive4(TypedDict, total=False):
    """Arguments for Camera"""
    
    

class FindManyScenarioArgsFromCamera(TypedDict, total=False):
    """Arguments for Camera"""
    take: int
    skip: int
    order_by: Union['ScenarioOrderByInput', List['ScenarioOrderByInput']]
    where: 'ScenarioWhereInput'
    cursor: 'ScenarioWhereUniqueInput'
    distinct: List['ScenarioScalarFieldKeys']
    include: 'ScenarioIncludeFromScenarioRecursive1'


class FindManyScenarioArgsFromCameraRecursive1(TypedDict, total=False):
    """Arguments for Camera"""
    take: int
    skip: int
    order_by: Union['ScenarioOrderByInput', List['ScenarioOrderByInput']]
    where: 'ScenarioWhereInput'
    cursor: 'ScenarioWhereUniqueInput'
    distinct: List['ScenarioScalarFieldKeys']
    include: 'ScenarioIncludeFromScenarioRecursive2'


class FindManyScenarioArgsFromCameraRecursive2(TypedDict, total=False):
    """Arguments for Camera"""
    take: int
    skip: int
    order_by: Union['ScenarioOrderByInput', List['ScenarioOrderByInput']]
    where: 'ScenarioWhereInput'
    cursor: 'ScenarioWhereUniqueInput'
    distinct: List['ScenarioScalarFieldKeys']
    include: 'ScenarioIncludeFromScenarioRecursive3'


class FindManyScenarioArgsFromCameraRecursive3(TypedDict, total=False):
    """Arguments for Camera"""
    take: int
    skip: int
    order_by: Union['ScenarioOrderByInput', List['ScenarioOrderByInput']]
    where: 'ScenarioWhereInput'
    cursor: 'ScenarioWhereUniqueInput'
    distinct: List['ScenarioScalarFieldKeys']
    include: 'ScenarioIncludeFromScenarioRecursive4'


class FindManyScenarioArgsFromCameraRecursive4(TypedDict, total=False):
    """Arguments for Camera"""
    take: int
    skip: int
    order_by: Union['ScenarioOrderByInput', List['ScenarioOrderByInput']]
    where: 'ScenarioWhereInput'
    cursor: 'ScenarioWhereUniqueInput'
    distinct: List['ScenarioScalarFieldKeys']
    
    

class SocialReportIncludeFromCamera(TypedDict, total=False):
    """Relational arguments for Camera"""


class SocialReportIncludeFromCameraRecursive1(TypedDict, total=False):
    """Relational arguments for Camera"""


class SocialReportIncludeFromCameraRecursive2(TypedDict, total=False):
    """Relational arguments for Camera"""


class SocialReportIncludeFromCameraRecursive3(TypedDict, total=False):
    """Relational arguments for Camera"""


class SocialReportIncludeFromCameraRecursive4(TypedDict, total=False):
    """Relational arguments for Camera"""

    

class SocialReportArgsFromCamera(TypedDict, total=False):
    """Arguments for Camera"""
    include: 'SocialReportIncludeFromSocialReportRecursive1'


class SocialReportArgsFromCameraRecursive1(TypedDict, total=False):
    """Arguments for Camera"""
    include: 'SocialReportIncludeFromSocialReportRecursive2'


class SocialReportArgsFromCameraRecursive2(TypedDict, total=False):
    """Arguments for Camera"""
    include: 'SocialReportIncludeFromSocialReportRecursive3'


class SocialReportArgsFromCameraRecursive3(TypedDict, total=False):
    """Arguments for Camera"""
    include: 'SocialReportIncludeFromSocialReportRecursive4'


class SocialReportArgsFromCameraRecursive4(TypedDict, total=False):
    """Arguments for Camera"""
    
    

class FindManySocialReportArgsFromCamera(TypedDict, total=False):
    """Arguments for Camera"""
    take: int
    skip: int
    order_by: Union['SocialReportOrderByInput', List['SocialReportOrderByInput']]
    where: 'SocialReportWhereInput'
    cursor: 'SocialReportWhereUniqueInput'
    distinct: List['SocialReportScalarFieldKeys']
    include: 'SocialReportIncludeFromSocialReportRecursive1'


class FindManySocialReportArgsFromCameraRecursive1(TypedDict, total=False):
    """Arguments for Camera"""
    take: int
    skip: int
    order_by: Union['SocialReportOrderByInput', List['SocialReportOrderByInput']]
    where: 'SocialReportWhereInput'
    cursor: 'SocialReportWhereUniqueInput'
    distinct: List['SocialReportScalarFieldKeys']
    include: 'SocialReportIncludeFromSocialReportRecursive2'


class FindManySocialReportArgsFromCameraRecursive2(TypedDict, total=False):
    """Arguments for Camera"""
    take: int
    skip: int
    order_by: Union['SocialReportOrderByInput', List['SocialReportOrderByInput']]
    where: 'SocialReportWhereInput'
    cursor: 'SocialReportWhereUniqueInput'
    distinct: List['SocialReportScalarFieldKeys']
    include: 'SocialReportIncludeFromSocialReportRecursive3'


class FindManySocialReportArgsFromCameraRecursive3(TypedDict, total=False):
    """Arguments for Camera"""
    take: int
    skip: int
    order_by: Union['SocialReportOrderByInput', List['SocialReportOrderByInput']]
    where: 'SocialReportWhereInput'
    cursor: 'SocialReportWhereUniqueInput'
    distinct: List['SocialReportScalarFieldKeys']
    include: 'SocialReportIncludeFromSocialReportRecursive4'


class FindManySocialReportArgsFromCameraRecursive4(TypedDict, total=False):
    """Arguments for Camera"""
    take: int
    skip: int
    order_by: Union['SocialReportOrderByInput', List['SocialReportOrderByInput']]
    where: 'SocialReportWhereInput'
    cursor: 'SocialReportWhereUniqueInput'
    distinct: List['SocialReportScalarFieldKeys']
    
    

class TrafficDataIncludeFromCamera(TypedDict, total=False):
    """Relational arguments for Camera"""


class TrafficDataIncludeFromCameraRecursive1(TypedDict, total=False):
    """Relational arguments for Camera"""


class TrafficDataIncludeFromCameraRecursive2(TypedDict, total=False):
    """Relational arguments for Camera"""


class TrafficDataIncludeFromCameraRecursive3(TypedDict, total=False):
    """Relational arguments for Camera"""


class TrafficDataIncludeFromCameraRecursive4(TypedDict, total=False):
    """Relational arguments for Camera"""

    

class TrafficDataArgsFromCamera(TypedDict, total=False):
    """Arguments for Camera"""
    include: 'TrafficDataIncludeFromTrafficDataRecursive1'


class TrafficDataArgsFromCameraRecursive1(TypedDict, total=False):
    """Arguments for Camera"""
    include: 'TrafficDataIncludeFromTrafficDataRecursive2'


class TrafficDataArgsFromCameraRecursive2(TypedDict, total=False):
    """Arguments for Camera"""
    include: 'TrafficDataIncludeFromTrafficDataRecursive3'


class TrafficDataArgsFromCameraRecursive3(TypedDict, total=False):
    """Arguments for Camera"""
    include: 'TrafficDataIncludeFromTrafficDataRecursive4'


class TrafficDataArgsFromCameraRecursive4(TypedDict, total=False):
    """Arguments for Camera"""
    
    

class FindManyTrafficDataArgsFromCamera(TypedDict, total=False):
    """Arguments for Camera"""
    take: int
    skip: int
    order_by: Union['TrafficDataOrderByInput', List['TrafficDataOrderByInput']]
    where: 'TrafficDataWhereInput'
    cursor: 'TrafficDataWhereUniqueInput'
    distinct: List['TrafficDataScalarFieldKeys']
    include: 'TrafficDataIncludeFromTrafficDataRecursive1'


class FindManyTrafficDataArgsFromCameraRecursive1(TypedDict, total=False):
    """Arguments for Camera"""
    take: int
    skip: int
    order_by: Union['TrafficDataOrderByInput', List['TrafficDataOrderByInput']]
    where: 'TrafficDataWhereInput'
    cursor: 'TrafficDataWhereUniqueInput'
    distinct: List['TrafficDataScalarFieldKeys']
    include: 'TrafficDataIncludeFromTrafficDataRecursive2'


class FindManyTrafficDataArgsFromCameraRecursive2(TypedDict, total=False):
    """Arguments for Camera"""
    take: int
    skip: int
    order_by: Union['TrafficDataOrderByInput', List['TrafficDataOrderByInput']]
    where: 'TrafficDataWhereInput'
    cursor: 'TrafficDataWhereUniqueInput'
    distinct: List['TrafficDataScalarFieldKeys']
    include: 'TrafficDataIncludeFromTrafficDataRecursive3'


class FindManyTrafficDataArgsFromCameraRecursive3(TypedDict, total=False):
    """Arguments for Camera"""
    take: int
    skip: int
    order_by: Union['TrafficDataOrderByInput', List['TrafficDataOrderByInput']]
    where: 'TrafficDataWhereInput'
    cursor: 'TrafficDataWhereUniqueInput'
    distinct: List['TrafficDataScalarFieldKeys']
    include: 'TrafficDataIncludeFromTrafficDataRecursive4'


class FindManyTrafficDataArgsFromCameraRecursive4(TypedDict, total=False):
    """Arguments for Camera"""
    take: int
    skip: int
    order_by: Union['TrafficDataOrderByInput', List['TrafficDataOrderByInput']]
    where: 'TrafficDataWhereInput'
    cursor: 'TrafficDataWhereUniqueInput'
    distinct: List['TrafficDataScalarFieldKeys']
    
    

class TrafficLightIncludeFromCamera(TypedDict, total=False):
    """Relational arguments for Camera"""


class TrafficLightIncludeFromCameraRecursive1(TypedDict, total=False):
    """Relational arguments for Camera"""


class TrafficLightIncludeFromCameraRecursive2(TypedDict, total=False):
    """Relational arguments for Camera"""


class TrafficLightIncludeFromCameraRecursive3(TypedDict, total=False):
    """Relational arguments for Camera"""


class TrafficLightIncludeFromCameraRecursive4(TypedDict, total=False):
    """Relational arguments for Camera"""

    

class TrafficLightArgsFromCamera(TypedDict, total=False):
    """Arguments for Camera"""
    include: 'TrafficLightIncludeFromTrafficLightRecursive1'


class TrafficLightArgsFromCameraRecursive1(TypedDict, total=False):
    """Arguments for Camera"""
    include: 'TrafficLightIncludeFromTrafficLightRecursive2'


class TrafficLightArgsFromCameraRecursive2(TypedDict, total=False):
    """Arguments for Camera"""
    include: 'TrafficLightIncludeFromTrafficLightRecursive3'


class TrafficLightArgsFromCameraRecursive3(TypedDict, total=False):
    """Arguments for Camera"""
    include: 'TrafficLightIncludeFromTrafficLightRecursive4'


class TrafficLightArgsFromCameraRecursive4(TypedDict, total=False):
    """Arguments for Camera"""
    
    

class FindManyTrafficLightArgsFromCamera(TypedDict, total=False):
    """Arguments for Camera"""
    take: int
    skip: int
    order_by: Union['TrafficLightOrderByInput', List['TrafficLightOrderByInput']]
    where: 'TrafficLightWhereInput'
    cursor: 'TrafficLightWhereUniqueInput'
    distinct: List['TrafficLightScalarFieldKeys']
    include: 'TrafficLightIncludeFromTrafficLightRecursive1'


class FindManyTrafficLightArgsFromCameraRecursive1(TypedDict, total=False):
    """Arguments for Camera"""
    take: int
    skip: int
    order_by: Union['TrafficLightOrderByInput', List['TrafficLightOrderByInput']]
    where: 'TrafficLightWhereInput'
    cursor: 'TrafficLightWhereUniqueInput'
    distinct: List['TrafficLightScalarFieldKeys']
    include: 'TrafficLightIncludeFromTrafficLightRecursive2'


class FindManyTrafficLightArgsFromCameraRecursive2(TypedDict, total=False):
    """Arguments for Camera"""
    take: int
    skip: int
    order_by: Union['TrafficLightOrderByInput', List['TrafficLightOrderByInput']]
    where: 'TrafficLightWhereInput'
    cursor: 'TrafficLightWhereUniqueInput'
    distinct: List['TrafficLightScalarFieldKeys']
    include: 'TrafficLightIncludeFromTrafficLightRecursive3'


class FindManyTrafficLightArgsFromCameraRecursive3(TypedDict, total=False):
    """Arguments for Camera"""
    take: int
    skip: int
    order_by: Union['TrafficLightOrderByInput', List['TrafficLightOrderByInput']]
    where: 'TrafficLightWhereInput'
    cursor: 'TrafficLightWhereUniqueInput'
    distinct: List['TrafficLightScalarFieldKeys']
    include: 'TrafficLightIncludeFromTrafficLightRecursive4'


class FindManyTrafficLightArgsFromCameraRecursive4(TypedDict, total=False):
    """Arguments for Camera"""
    take: int
    skip: int
    order_by: Union['TrafficLightOrderByInput', List['TrafficLightOrderByInput']]
    where: 'TrafficLightWhereInput'
    cursor: 'TrafficLightWhereUniqueInput'
    distinct: List['TrafficLightScalarFieldKeys']
    


FindManyCameraArgs = FindManyCameraArgsFromCamera
FindFirstCameraArgs = FindManyCameraArgsFromCamera


    

class CameraWhereInput(TypedDict, total=False):
    """Camera arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    name: Union[_str, 'types.StringFilter']
    liveUrl: Union[_str, 'types.StringFilter']
    geo: Union[_str, 'types.StringFilter']
    description: Union[None, _str, 'types.StringFilter']
    location: Union['fields.Base64', 'types.BytesFilter']

    # should be noted that AND and NOT should be Union['CameraWhereInputRecursive1', List['CameraWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['CameraWhereInputRecursive1']
    OR: List['CameraWhereInputRecursive1']
    NOT: List['CameraWhereInputRecursive1']


class CameraWhereInputRecursive1(TypedDict, total=False):
    """Camera arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    name: Union[_str, 'types.StringFilter']
    liveUrl: Union[_str, 'types.StringFilter']
    geo: Union[_str, 'types.StringFilter']
    description: Union[None, _str, 'types.StringFilter']
    location: Union['fields.Base64', 'types.BytesFilter']

    # should be noted that AND and NOT should be Union['CameraWhereInputRecursive2', List['CameraWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['CameraWhereInputRecursive2']
    OR: List['CameraWhereInputRecursive2']
    NOT: List['CameraWhereInputRecursive2']


class CameraWhereInputRecursive2(TypedDict, total=False):
    """Camera arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    name: Union[_str, 'types.StringFilter']
    liveUrl: Union[_str, 'types.StringFilter']
    geo: Union[_str, 'types.StringFilter']
    description: Union[None, _str, 'types.StringFilter']
    location: Union['fields.Base64', 'types.BytesFilter']

    # should be noted that AND and NOT should be Union['CameraWhereInputRecursive3', List['CameraWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['CameraWhereInputRecursive3']
    OR: List['CameraWhereInputRecursive3']
    NOT: List['CameraWhereInputRecursive3']


class CameraWhereInputRecursive3(TypedDict, total=False):
    """Camera arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    name: Union[_str, 'types.StringFilter']
    liveUrl: Union[_str, 'types.StringFilter']
    geo: Union[_str, 'types.StringFilter']
    description: Union[None, _str, 'types.StringFilter']
    location: Union['fields.Base64', 'types.BytesFilter']

    # should be noted that AND and NOT should be Union['CameraWhereInputRecursive4', List['CameraWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['CameraWhereInputRecursive4']
    OR: List['CameraWhereInputRecursive4']
    NOT: List['CameraWhereInputRecursive4']


class CameraWhereInputRecursive4(TypedDict, total=False):
    """Camera arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    name: Union[_str, 'types.StringFilter']
    liveUrl: Union[_str, 'types.StringFilter']
    geo: Union[_str, 'types.StringFilter']
    description: Union[None, _str, 'types.StringFilter']
    location: Union['fields.Base64', 'types.BytesFilter']



# aggregate Camera types


    

class CameraScalarWhereWithAggregatesInput(TypedDict, total=False):
    """Camera arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    liveUrl: Union[_str, 'types.StringWithAggregatesFilter']
    geo: Union[_str, 'types.StringWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']
    location: Union['fields.Base64', 'types.BytesWithAggregatesFilter']

    AND: List['CameraScalarWhereWithAggregatesInputRecursive1']
    OR: List['CameraScalarWhereWithAggregatesInputRecursive1']
    NOT: List['CameraScalarWhereWithAggregatesInputRecursive1']


class CameraScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """Camera arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    liveUrl: Union[_str, 'types.StringWithAggregatesFilter']
    geo: Union[_str, 'types.StringWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']
    location: Union['fields.Base64', 'types.BytesWithAggregatesFilter']

    AND: List['CameraScalarWhereWithAggregatesInputRecursive2']
    OR: List['CameraScalarWhereWithAggregatesInputRecursive2']
    NOT: List['CameraScalarWhereWithAggregatesInputRecursive2']


class CameraScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """Camera arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    liveUrl: Union[_str, 'types.StringWithAggregatesFilter']
    geo: Union[_str, 'types.StringWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']
    location: Union['fields.Base64', 'types.BytesWithAggregatesFilter']

    AND: List['CameraScalarWhereWithAggregatesInputRecursive3']
    OR: List['CameraScalarWhereWithAggregatesInputRecursive3']
    NOT: List['CameraScalarWhereWithAggregatesInputRecursive3']


class CameraScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """Camera arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    liveUrl: Union[_str, 'types.StringWithAggregatesFilter']
    geo: Union[_str, 'types.StringWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']
    location: Union['fields.Base64', 'types.BytesWithAggregatesFilter']

    AND: List['CameraScalarWhereWithAggregatesInputRecursive4']
    OR: List['CameraScalarWhereWithAggregatesInputRecursive4']
    NOT: List['CameraScalarWhereWithAggregatesInputRecursive4']


class CameraScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """Camera arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    liveUrl: Union[_str, 'types.StringWithAggregatesFilter']
    geo: Union[_str, 'types.StringWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']
    location: Union['fields.Base64', 'types.BytesWithAggregatesFilter']



class CameraGroupByOutput(TypedDict, total=False):
    id: _str
    name: _str
    liveUrl: _str
    geo: _str
    description: _str
    location: 'fields.Base64'
    _sum: 'CameraSumAggregateOutput'
    _avg: 'CameraAvgAggregateOutput'
    _min: 'CameraMinAggregateOutput'
    _max: 'CameraMaxAggregateOutput'
    _count: 'CameraCountAggregateOutput'


class CameraAvgAggregateOutput(TypedDict, total=False):
    """Camera output for aggregating averages"""


class CameraSumAggregateOutput(TypedDict, total=False):
    """Camera output for aggregating sums"""


class CameraScalarAggregateOutput(TypedDict, total=False):
    """Camera output including scalar fields"""
    id: _str
    name: _str
    liveUrl: _str
    geo: _str
    description: _str
    location: 'fields.Base64'


CameraMinAggregateOutput = CameraScalarAggregateOutput
CameraMaxAggregateOutput = CameraScalarAggregateOutput


class CameraMaxAggregateInput(TypedDict, total=False):
    """Camera input for aggregating by max"""
    id: bool
    name: bool
    liveUrl: bool
    geo: bool
    description: bool
    location: bool


class CameraMinAggregateInput(TypedDict, total=False):
    """Camera input for aggregating by min"""
    id: bool
    name: bool
    liveUrl: bool
    geo: bool
    description: bool
    location: bool


class CameraNumberAggregateInput(TypedDict, total=False):
    """Camera input for aggregating numbers"""


CameraAvgAggregateInput = CameraNumberAggregateInput
CameraSumAggregateInput = CameraNumberAggregateInput


CameraCountAggregateInput = TypedDict(
    'CameraCountAggregateInput',
    {
        'id': bool,
        'name': bool,
        'liveUrl': bool,
        'geo': bool,
        'description': bool,
        'location': bool,
        '_all': bool,
    },
    total=False,
)

CameraCountAggregateOutput = TypedDict(
    'CameraCountAggregateOutput',
    {
        'id': int,
        'name': int,
        'liveUrl': int,
        'geo': int,
        'description': int,
        'location': int,
        '_all': int,
    },
    total=False,
)


CameraKeys = Literal[
    'id',
    'name',
    'liveUrl',
    'geo',
    'description',
    'location',
]
CameraScalarFieldKeys = Literal[
    'id',
    'name',
    'liveUrl',
    'geo',
    'description',
    'location',
]
CameraScalarFieldKeysT = TypeVar('CameraScalarFieldKeysT', bound=CameraScalarFieldKeys)

CameraRelationalFieldKeys = _NoneType

# Effectiveness types

class EffectivenessOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the Effectiveness create method"""
    id: _str


class EffectivenessCreateInput(EffectivenessOptionalCreateInput):
    """Required arguments to the Effectiveness create method"""
    measureId: _str
    before: 'fields.Json'
    after: 'fields.Json'
    effectivenessScore: _float


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class EffectivenessOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the Effectiveness create method, without relations"""
    id: _str


class EffectivenessCreateWithoutRelationsInput(EffectivenessOptionalCreateWithoutRelationsInput):
    """Required arguments to the Effectiveness create method, without relations"""
    measureId: _str
    before: 'fields.Json'
    after: 'fields.Json'
    effectivenessScore: _float

class EffectivenessConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'EffectivenessCreateWithoutRelationsInput'
    where: 'EffectivenessWhereUniqueInput'

class EffectivenessCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'EffectivenessCreateWithoutRelationsInput'
    connect: 'EffectivenessWhereUniqueInput'
    connect_or_create: 'EffectivenessConnectOrCreateWithoutRelationsInput'


class EffectivenessCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['EffectivenessCreateWithoutRelationsInput', List['EffectivenessCreateWithoutRelationsInput']]
    connect: Union['EffectivenessWhereUniqueInput', List['EffectivenessWhereUniqueInput']]
    connect_or_create: Union['EffectivenessConnectOrCreateWithoutRelationsInput', List['EffectivenessConnectOrCreateWithoutRelationsInput']]

_EffectivenessWhereUnique_id_Input = TypedDict(
    '_EffectivenessWhereUnique_id_Input',
    {
        'id': '_str',
    },
    total=True
)

EffectivenessWhereUniqueInput = _EffectivenessWhereUnique_id_Input


class EffectivenessUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: _str
    measureId: _str
    before: 'fields.Json'
    after: 'fields.Json'
    effectivenessScore: Union[AtomicFloatInput, _float]


class EffectivenessUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: _str
    measureId: _str
    before: 'fields.Json'
    after: 'fields.Json'
    effectivenessScore: Union[AtomicFloatInput, _float]


class EffectivenessUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['EffectivenessCreateWithoutRelationsInput']
    connect: List['EffectivenessWhereUniqueInput']
    connect_or_create: List['EffectivenessConnectOrCreateWithoutRelationsInput']
    set: List['EffectivenessWhereUniqueInput']
    disconnect: List['EffectivenessWhereUniqueInput']
    delete: List['EffectivenessWhereUniqueInput']

    # TODO
    # update: List['EffectivenessUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['EffectivenessUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['EffectivenessScalarWhereInput']
    # upsert: List['EffectivenessUpserteWithWhereUniqueWithoutRelationsInput']


class EffectivenessUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'EffectivenessCreateWithoutRelationsInput'
    connect: 'EffectivenessWhereUniqueInput'
    connect_or_create: 'EffectivenessConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'EffectivenessUpdateInput'
    # upsert: 'EffectivenessUpsertWithoutRelationsInput'


class EffectivenessUpsertInput(TypedDict):
    create: 'EffectivenessCreateInput'
    update: 'EffectivenessUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_Effectiveness_id_OrderByInput = TypedDict(
    '_Effectiveness_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_Effectiveness_measureId_OrderByInput = TypedDict(
    '_Effectiveness_measureId_OrderByInput',
    {
        'measureId': 'SortOrder',
    },
    total=True
)

_Effectiveness_before_OrderByInput = TypedDict(
    '_Effectiveness_before_OrderByInput',
    {
        'before': 'SortOrder',
    },
    total=True
)

_Effectiveness_after_OrderByInput = TypedDict(
    '_Effectiveness_after_OrderByInput',
    {
        'after': 'SortOrder',
    },
    total=True
)

_Effectiveness_effectivenessScore_OrderByInput = TypedDict(
    '_Effectiveness_effectivenessScore_OrderByInput',
    {
        'effectivenessScore': 'SortOrder',
    },
    total=True
)

_Effectiveness_RelevanceInner = TypedDict(
    '_Effectiveness_RelevanceInner',
    {
        'fields': 'List[EffectivenessScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_Effectiveness_RelevanceOrderByInput = TypedDict(
    '_Effectiveness_RelevanceOrderByInput',
    {
        '_relevance': '_Effectiveness_RelevanceInner',
    },
    total=True
)

EffectivenessOrderByInput = Union[
    '_Effectiveness_id_OrderByInput',
    '_Effectiveness_measureId_OrderByInput',
    '_Effectiveness_before_OrderByInput',
    '_Effectiveness_after_OrderByInput',
    '_Effectiveness_effectivenessScore_OrderByInput',
    '_Effectiveness_RelevanceOrderByInput',
]



# recursive Effectiveness types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

EffectivenessRelationFilter = TypedDict(
    'EffectivenessRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class EffectivenessListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class EffectivenessInclude(TypedDict, total=False):
    """Effectiveness relational arguments"""


    

class AchievementIncludeFromEffectiveness(TypedDict, total=False):
    """Relational arguments for Effectiveness"""


class AchievementIncludeFromEffectivenessRecursive1(TypedDict, total=False):
    """Relational arguments for Effectiveness"""


class AchievementIncludeFromEffectivenessRecursive2(TypedDict, total=False):
    """Relational arguments for Effectiveness"""


class AchievementIncludeFromEffectivenessRecursive3(TypedDict, total=False):
    """Relational arguments for Effectiveness"""


class AchievementIncludeFromEffectivenessRecursive4(TypedDict, total=False):
    """Relational arguments for Effectiveness"""

    

class AchievementArgsFromEffectiveness(TypedDict, total=False):
    """Arguments for Effectiveness"""
    include: 'AchievementIncludeFromAchievementRecursive1'


class AchievementArgsFromEffectivenessRecursive1(TypedDict, total=False):
    """Arguments for Effectiveness"""
    include: 'AchievementIncludeFromAchievementRecursive2'


class AchievementArgsFromEffectivenessRecursive2(TypedDict, total=False):
    """Arguments for Effectiveness"""
    include: 'AchievementIncludeFromAchievementRecursive3'


class AchievementArgsFromEffectivenessRecursive3(TypedDict, total=False):
    """Arguments for Effectiveness"""
    include: 'AchievementIncludeFromAchievementRecursive4'


class AchievementArgsFromEffectivenessRecursive4(TypedDict, total=False):
    """Arguments for Effectiveness"""
    
    

class FindManyAchievementArgsFromEffectiveness(TypedDict, total=False):
    """Arguments for Effectiveness"""
    take: int
    skip: int
    order_by: Union['AchievementOrderByInput', List['AchievementOrderByInput']]
    where: 'AchievementWhereInput'
    cursor: 'AchievementWhereUniqueInput'
    distinct: List['AchievementScalarFieldKeys']
    include: 'AchievementIncludeFromAchievementRecursive1'


class FindManyAchievementArgsFromEffectivenessRecursive1(TypedDict, total=False):
    """Arguments for Effectiveness"""
    take: int
    skip: int
    order_by: Union['AchievementOrderByInput', List['AchievementOrderByInput']]
    where: 'AchievementWhereInput'
    cursor: 'AchievementWhereUniqueInput'
    distinct: List['AchievementScalarFieldKeys']
    include: 'AchievementIncludeFromAchievementRecursive2'


class FindManyAchievementArgsFromEffectivenessRecursive2(TypedDict, total=False):
    """Arguments for Effectiveness"""
    take: int
    skip: int
    order_by: Union['AchievementOrderByInput', List['AchievementOrderByInput']]
    where: 'AchievementWhereInput'
    cursor: 'AchievementWhereUniqueInput'
    distinct: List['AchievementScalarFieldKeys']
    include: 'AchievementIncludeFromAchievementRecursive3'


class FindManyAchievementArgsFromEffectivenessRecursive3(TypedDict, total=False):
    """Arguments for Effectiveness"""
    take: int
    skip: int
    order_by: Union['AchievementOrderByInput', List['AchievementOrderByInput']]
    where: 'AchievementWhereInput'
    cursor: 'AchievementWhereUniqueInput'
    distinct: List['AchievementScalarFieldKeys']
    include: 'AchievementIncludeFromAchievementRecursive4'


class FindManyAchievementArgsFromEffectivenessRecursive4(TypedDict, total=False):
    """Arguments for Effectiveness"""
    take: int
    skip: int
    order_by: Union['AchievementOrderByInput', List['AchievementOrderByInput']]
    where: 'AchievementWhereInput'
    cursor: 'AchievementWhereUniqueInput'
    distinct: List['AchievementScalarFieldKeys']
    
    

class CameraIncludeFromEffectiveness(TypedDict, total=False):
    """Relational arguments for Effectiveness"""


class CameraIncludeFromEffectivenessRecursive1(TypedDict, total=False):
    """Relational arguments for Effectiveness"""


class CameraIncludeFromEffectivenessRecursive2(TypedDict, total=False):
    """Relational arguments for Effectiveness"""


class CameraIncludeFromEffectivenessRecursive3(TypedDict, total=False):
    """Relational arguments for Effectiveness"""


class CameraIncludeFromEffectivenessRecursive4(TypedDict, total=False):
    """Relational arguments for Effectiveness"""

    

class CameraArgsFromEffectiveness(TypedDict, total=False):
    """Arguments for Effectiveness"""
    include: 'CameraIncludeFromCameraRecursive1'


class CameraArgsFromEffectivenessRecursive1(TypedDict, total=False):
    """Arguments for Effectiveness"""
    include: 'CameraIncludeFromCameraRecursive2'


class CameraArgsFromEffectivenessRecursive2(TypedDict, total=False):
    """Arguments for Effectiveness"""
    include: 'CameraIncludeFromCameraRecursive3'


class CameraArgsFromEffectivenessRecursive3(TypedDict, total=False):
    """Arguments for Effectiveness"""
    include: 'CameraIncludeFromCameraRecursive4'


class CameraArgsFromEffectivenessRecursive4(TypedDict, total=False):
    """Arguments for Effectiveness"""
    
    

class FindManyCameraArgsFromEffectiveness(TypedDict, total=False):
    """Arguments for Effectiveness"""
    take: int
    skip: int
    order_by: Union['CameraOrderByInput', List['CameraOrderByInput']]
    where: 'CameraWhereInput'
    cursor: 'CameraWhereUniqueInput'
    distinct: List['CameraScalarFieldKeys']
    include: 'CameraIncludeFromCameraRecursive1'


class FindManyCameraArgsFromEffectivenessRecursive1(TypedDict, total=False):
    """Arguments for Effectiveness"""
    take: int
    skip: int
    order_by: Union['CameraOrderByInput', List['CameraOrderByInput']]
    where: 'CameraWhereInput'
    cursor: 'CameraWhereUniqueInput'
    distinct: List['CameraScalarFieldKeys']
    include: 'CameraIncludeFromCameraRecursive2'


class FindManyCameraArgsFromEffectivenessRecursive2(TypedDict, total=False):
    """Arguments for Effectiveness"""
    take: int
    skip: int
    order_by: Union['CameraOrderByInput', List['CameraOrderByInput']]
    where: 'CameraWhereInput'
    cursor: 'CameraWhereUniqueInput'
    distinct: List['CameraScalarFieldKeys']
    include: 'CameraIncludeFromCameraRecursive3'


class FindManyCameraArgsFromEffectivenessRecursive3(TypedDict, total=False):
    """Arguments for Effectiveness"""
    take: int
    skip: int
    order_by: Union['CameraOrderByInput', List['CameraOrderByInput']]
    where: 'CameraWhereInput'
    cursor: 'CameraWhereUniqueInput'
    distinct: List['CameraScalarFieldKeys']
    include: 'CameraIncludeFromCameraRecursive4'


class FindManyCameraArgsFromEffectivenessRecursive4(TypedDict, total=False):
    """Arguments for Effectiveness"""
    take: int
    skip: int
    order_by: Union['CameraOrderByInput', List['CameraOrderByInput']]
    where: 'CameraWhereInput'
    cursor: 'CameraWhereUniqueInput'
    distinct: List['CameraScalarFieldKeys']
    
    

class EffectivenessIncludeFromEffectiveness(TypedDict, total=False):
    """Relational arguments for Effectiveness"""


class EffectivenessIncludeFromEffectivenessRecursive1(TypedDict, total=False):
    """Relational arguments for Effectiveness"""


class EffectivenessIncludeFromEffectivenessRecursive2(TypedDict, total=False):
    """Relational arguments for Effectiveness"""


class EffectivenessIncludeFromEffectivenessRecursive3(TypedDict, total=False):
    """Relational arguments for Effectiveness"""


class EffectivenessIncludeFromEffectivenessRecursive4(TypedDict, total=False):
    """Relational arguments for Effectiveness"""

    

class EffectivenessArgsFromEffectiveness(TypedDict, total=False):
    """Arguments for Effectiveness"""
    include: 'EffectivenessIncludeFromEffectivenessRecursive1'


class EffectivenessArgsFromEffectivenessRecursive1(TypedDict, total=False):
    """Arguments for Effectiveness"""
    include: 'EffectivenessIncludeFromEffectivenessRecursive2'


class EffectivenessArgsFromEffectivenessRecursive2(TypedDict, total=False):
    """Arguments for Effectiveness"""
    include: 'EffectivenessIncludeFromEffectivenessRecursive3'


class EffectivenessArgsFromEffectivenessRecursive3(TypedDict, total=False):
    """Arguments for Effectiveness"""
    include: 'EffectivenessIncludeFromEffectivenessRecursive4'


class EffectivenessArgsFromEffectivenessRecursive4(TypedDict, total=False):
    """Arguments for Effectiveness"""
    
    

class FindManyEffectivenessArgsFromEffectiveness(TypedDict, total=False):
    """Arguments for Effectiveness"""
    take: int
    skip: int
    order_by: Union['EffectivenessOrderByInput', List['EffectivenessOrderByInput']]
    where: 'EffectivenessWhereInput'
    cursor: 'EffectivenessWhereUniqueInput'
    distinct: List['EffectivenessScalarFieldKeys']
    include: 'EffectivenessIncludeFromEffectivenessRecursive1'


class FindManyEffectivenessArgsFromEffectivenessRecursive1(TypedDict, total=False):
    """Arguments for Effectiveness"""
    take: int
    skip: int
    order_by: Union['EffectivenessOrderByInput', List['EffectivenessOrderByInput']]
    where: 'EffectivenessWhereInput'
    cursor: 'EffectivenessWhereUniqueInput'
    distinct: List['EffectivenessScalarFieldKeys']
    include: 'EffectivenessIncludeFromEffectivenessRecursive2'


class FindManyEffectivenessArgsFromEffectivenessRecursive2(TypedDict, total=False):
    """Arguments for Effectiveness"""
    take: int
    skip: int
    order_by: Union['EffectivenessOrderByInput', List['EffectivenessOrderByInput']]
    where: 'EffectivenessWhereInput'
    cursor: 'EffectivenessWhereUniqueInput'
    distinct: List['EffectivenessScalarFieldKeys']
    include: 'EffectivenessIncludeFromEffectivenessRecursive3'


class FindManyEffectivenessArgsFromEffectivenessRecursive3(TypedDict, total=False):
    """Arguments for Effectiveness"""
    take: int
    skip: int
    order_by: Union['EffectivenessOrderByInput', List['EffectivenessOrderByInput']]
    where: 'EffectivenessWhereInput'
    cursor: 'EffectivenessWhereUniqueInput'
    distinct: List['EffectivenessScalarFieldKeys']
    include: 'EffectivenessIncludeFromEffectivenessRecursive4'


class FindManyEffectivenessArgsFromEffectivenessRecursive4(TypedDict, total=False):
    """Arguments for Effectiveness"""
    take: int
    skip: int
    order_by: Union['EffectivenessOrderByInput', List['EffectivenessOrderByInput']]
    where: 'EffectivenessWhereInput'
    cursor: 'EffectivenessWhereUniqueInput'
    distinct: List['EffectivenessScalarFieldKeys']
    
    

class EnvironmentalDataIncludeFromEffectiveness(TypedDict, total=False):
    """Relational arguments for Effectiveness"""


class EnvironmentalDataIncludeFromEffectivenessRecursive1(TypedDict, total=False):
    """Relational arguments for Effectiveness"""


class EnvironmentalDataIncludeFromEffectivenessRecursive2(TypedDict, total=False):
    """Relational arguments for Effectiveness"""


class EnvironmentalDataIncludeFromEffectivenessRecursive3(TypedDict, total=False):
    """Relational arguments for Effectiveness"""


class EnvironmentalDataIncludeFromEffectivenessRecursive4(TypedDict, total=False):
    """Relational arguments for Effectiveness"""

    

class EnvironmentalDataArgsFromEffectiveness(TypedDict, total=False):
    """Arguments for Effectiveness"""
    include: 'EnvironmentalDataIncludeFromEnvironmentalDataRecursive1'


class EnvironmentalDataArgsFromEffectivenessRecursive1(TypedDict, total=False):
    """Arguments for Effectiveness"""
    include: 'EnvironmentalDataIncludeFromEnvironmentalDataRecursive2'


class EnvironmentalDataArgsFromEffectivenessRecursive2(TypedDict, total=False):
    """Arguments for Effectiveness"""
    include: 'EnvironmentalDataIncludeFromEnvironmentalDataRecursive3'


class EnvironmentalDataArgsFromEffectivenessRecursive3(TypedDict, total=False):
    """Arguments for Effectiveness"""
    include: 'EnvironmentalDataIncludeFromEnvironmentalDataRecursive4'


class EnvironmentalDataArgsFromEffectivenessRecursive4(TypedDict, total=False):
    """Arguments for Effectiveness"""
    
    

class FindManyEnvironmentalDataArgsFromEffectiveness(TypedDict, total=False):
    """Arguments for Effectiveness"""
    take: int
    skip: int
    order_by: Union['EnvironmentalDataOrderByInput', List['EnvironmentalDataOrderByInput']]
    where: 'EnvironmentalDataWhereInput'
    cursor: 'EnvironmentalDataWhereUniqueInput'
    distinct: List['EnvironmentalDataScalarFieldKeys']
    include: 'EnvironmentalDataIncludeFromEnvironmentalDataRecursive1'


class FindManyEnvironmentalDataArgsFromEffectivenessRecursive1(TypedDict, total=False):
    """Arguments for Effectiveness"""
    take: int
    skip: int
    order_by: Union['EnvironmentalDataOrderByInput', List['EnvironmentalDataOrderByInput']]
    where: 'EnvironmentalDataWhereInput'
    cursor: 'EnvironmentalDataWhereUniqueInput'
    distinct: List['EnvironmentalDataScalarFieldKeys']
    include: 'EnvironmentalDataIncludeFromEnvironmentalDataRecursive2'


class FindManyEnvironmentalDataArgsFromEffectivenessRecursive2(TypedDict, total=False):
    """Arguments for Effectiveness"""
    take: int
    skip: int
    order_by: Union['EnvironmentalDataOrderByInput', List['EnvironmentalDataOrderByInput']]
    where: 'EnvironmentalDataWhereInput'
    cursor: 'EnvironmentalDataWhereUniqueInput'
    distinct: List['EnvironmentalDataScalarFieldKeys']
    include: 'EnvironmentalDataIncludeFromEnvironmentalDataRecursive3'


class FindManyEnvironmentalDataArgsFromEffectivenessRecursive3(TypedDict, total=False):
    """Arguments for Effectiveness"""
    take: int
    skip: int
    order_by: Union['EnvironmentalDataOrderByInput', List['EnvironmentalDataOrderByInput']]
    where: 'EnvironmentalDataWhereInput'
    cursor: 'EnvironmentalDataWhereUniqueInput'
    distinct: List['EnvironmentalDataScalarFieldKeys']
    include: 'EnvironmentalDataIncludeFromEnvironmentalDataRecursive4'


class FindManyEnvironmentalDataArgsFromEffectivenessRecursive4(TypedDict, total=False):
    """Arguments for Effectiveness"""
    take: int
    skip: int
    order_by: Union['EnvironmentalDataOrderByInput', List['EnvironmentalDataOrderByInput']]
    where: 'EnvironmentalDataWhereInput'
    cursor: 'EnvironmentalDataWhereUniqueInput'
    distinct: List['EnvironmentalDataScalarFieldKeys']
    
    

class EventIncludeFromEffectiveness(TypedDict, total=False):
    """Relational arguments for Effectiveness"""


class EventIncludeFromEffectivenessRecursive1(TypedDict, total=False):
    """Relational arguments for Effectiveness"""


class EventIncludeFromEffectivenessRecursive2(TypedDict, total=False):
    """Relational arguments for Effectiveness"""


class EventIncludeFromEffectivenessRecursive3(TypedDict, total=False):
    """Relational arguments for Effectiveness"""


class EventIncludeFromEffectivenessRecursive4(TypedDict, total=False):
    """Relational arguments for Effectiveness"""

    

class EventArgsFromEffectiveness(TypedDict, total=False):
    """Arguments for Effectiveness"""
    include: 'EventIncludeFromEventRecursive1'


class EventArgsFromEffectivenessRecursive1(TypedDict, total=False):
    """Arguments for Effectiveness"""
    include: 'EventIncludeFromEventRecursive2'


class EventArgsFromEffectivenessRecursive2(TypedDict, total=False):
    """Arguments for Effectiveness"""
    include: 'EventIncludeFromEventRecursive3'


class EventArgsFromEffectivenessRecursive3(TypedDict, total=False):
    """Arguments for Effectiveness"""
    include: 'EventIncludeFromEventRecursive4'


class EventArgsFromEffectivenessRecursive4(TypedDict, total=False):
    """Arguments for Effectiveness"""
    
    

class FindManyEventArgsFromEffectiveness(TypedDict, total=False):
    """Arguments for Effectiveness"""
    take: int
    skip: int
    order_by: Union['EventOrderByInput', List['EventOrderByInput']]
    where: 'EventWhereInput'
    cursor: 'EventWhereUniqueInput'
    distinct: List['EventScalarFieldKeys']
    include: 'EventIncludeFromEventRecursive1'


class FindManyEventArgsFromEffectivenessRecursive1(TypedDict, total=False):
    """Arguments for Effectiveness"""
    take: int
    skip: int
    order_by: Union['EventOrderByInput', List['EventOrderByInput']]
    where: 'EventWhereInput'
    cursor: 'EventWhereUniqueInput'
    distinct: List['EventScalarFieldKeys']
    include: 'EventIncludeFromEventRecursive2'


class FindManyEventArgsFromEffectivenessRecursive2(TypedDict, total=False):
    """Arguments for Effectiveness"""
    take: int
    skip: int
    order_by: Union['EventOrderByInput', List['EventOrderByInput']]
    where: 'EventWhereInput'
    cursor: 'EventWhereUniqueInput'
    distinct: List['EventScalarFieldKeys']
    include: 'EventIncludeFromEventRecursive3'


class FindManyEventArgsFromEffectivenessRecursive3(TypedDict, total=False):
    """Arguments for Effectiveness"""
    take: int
    skip: int
    order_by: Union['EventOrderByInput', List['EventOrderByInput']]
    where: 'EventWhereInput'
    cursor: 'EventWhereUniqueInput'
    distinct: List['EventScalarFieldKeys']
    include: 'EventIncludeFromEventRecursive4'


class FindManyEventArgsFromEffectivenessRecursive4(TypedDict, total=False):
    """Arguments for Effectiveness"""
    take: int
    skip: int
    order_by: Union['EventOrderByInput', List['EventOrderByInput']]
    where: 'EventWhereInput'
    cursor: 'EventWhereUniqueInput'
    distinct: List['EventScalarFieldKeys']
    
    

class ForecastIncludeFromEffectiveness(TypedDict, total=False):
    """Relational arguments for Effectiveness"""


class ForecastIncludeFromEffectivenessRecursive1(TypedDict, total=False):
    """Relational arguments for Effectiveness"""


class ForecastIncludeFromEffectivenessRecursive2(TypedDict, total=False):
    """Relational arguments for Effectiveness"""


class ForecastIncludeFromEffectivenessRecursive3(TypedDict, total=False):
    """Relational arguments for Effectiveness"""


class ForecastIncludeFromEffectivenessRecursive4(TypedDict, total=False):
    """Relational arguments for Effectiveness"""

    

class ForecastArgsFromEffectiveness(TypedDict, total=False):
    """Arguments for Effectiveness"""
    include: 'ForecastIncludeFromForecastRecursive1'


class ForecastArgsFromEffectivenessRecursive1(TypedDict, total=False):
    """Arguments for Effectiveness"""
    include: 'ForecastIncludeFromForecastRecursive2'


class ForecastArgsFromEffectivenessRecursive2(TypedDict, total=False):
    """Arguments for Effectiveness"""
    include: 'ForecastIncludeFromForecastRecursive3'


class ForecastArgsFromEffectivenessRecursive3(TypedDict, total=False):
    """Arguments for Effectiveness"""
    include: 'ForecastIncludeFromForecastRecursive4'


class ForecastArgsFromEffectivenessRecursive4(TypedDict, total=False):
    """Arguments for Effectiveness"""
    
    

class FindManyForecastArgsFromEffectiveness(TypedDict, total=False):
    """Arguments for Effectiveness"""
    take: int
    skip: int
    order_by: Union['ForecastOrderByInput', List['ForecastOrderByInput']]
    where: 'ForecastWhereInput'
    cursor: 'ForecastWhereUniqueInput'
    distinct: List['ForecastScalarFieldKeys']
    include: 'ForecastIncludeFromForecastRecursive1'


class FindManyForecastArgsFromEffectivenessRecursive1(TypedDict, total=False):
    """Arguments for Effectiveness"""
    take: int
    skip: int
    order_by: Union['ForecastOrderByInput', List['ForecastOrderByInput']]
    where: 'ForecastWhereInput'
    cursor: 'ForecastWhereUniqueInput'
    distinct: List['ForecastScalarFieldKeys']
    include: 'ForecastIncludeFromForecastRecursive2'


class FindManyForecastArgsFromEffectivenessRecursive2(TypedDict, total=False):
    """Arguments for Effectiveness"""
    take: int
    skip: int
    order_by: Union['ForecastOrderByInput', List['ForecastOrderByInput']]
    where: 'ForecastWhereInput'
    cursor: 'ForecastWhereUniqueInput'
    distinct: List['ForecastScalarFieldKeys']
    include: 'ForecastIncludeFromForecastRecursive3'


class FindManyForecastArgsFromEffectivenessRecursive3(TypedDict, total=False):
    """Arguments for Effectiveness"""
    take: int
    skip: int
    order_by: Union['ForecastOrderByInput', List['ForecastOrderByInput']]
    where: 'ForecastWhereInput'
    cursor: 'ForecastWhereUniqueInput'
    distinct: List['ForecastScalarFieldKeys']
    include: 'ForecastIncludeFromForecastRecursive4'


class FindManyForecastArgsFromEffectivenessRecursive4(TypedDict, total=False):
    """Arguments for Effectiveness"""
    take: int
    skip: int
    order_by: Union['ForecastOrderByInput', List['ForecastOrderByInput']]
    where: 'ForecastWhereInput'
    cursor: 'ForecastWhereUniqueInput'
    distinct: List['ForecastScalarFieldKeys']
    
    

class IncidentIncludeFromEffectiveness(TypedDict, total=False):
    """Relational arguments for Effectiveness"""


class IncidentIncludeFromEffectivenessRecursive1(TypedDict, total=False):
    """Relational arguments for Effectiveness"""


class IncidentIncludeFromEffectivenessRecursive2(TypedDict, total=False):
    """Relational arguments for Effectiveness"""


class IncidentIncludeFromEffectivenessRecursive3(TypedDict, total=False):
    """Relational arguments for Effectiveness"""


class IncidentIncludeFromEffectivenessRecursive4(TypedDict, total=False):
    """Relational arguments for Effectiveness"""

    

class IncidentArgsFromEffectiveness(TypedDict, total=False):
    """Arguments for Effectiveness"""
    include: 'IncidentIncludeFromIncidentRecursive1'


class IncidentArgsFromEffectivenessRecursive1(TypedDict, total=False):
    """Arguments for Effectiveness"""
    include: 'IncidentIncludeFromIncidentRecursive2'


class IncidentArgsFromEffectivenessRecursive2(TypedDict, total=False):
    """Arguments for Effectiveness"""
    include: 'IncidentIncludeFromIncidentRecursive3'


class IncidentArgsFromEffectivenessRecursive3(TypedDict, total=False):
    """Arguments for Effectiveness"""
    include: 'IncidentIncludeFromIncidentRecursive4'


class IncidentArgsFromEffectivenessRecursive4(TypedDict, total=False):
    """Arguments for Effectiveness"""
    
    

class FindManyIncidentArgsFromEffectiveness(TypedDict, total=False):
    """Arguments for Effectiveness"""
    take: int
    skip: int
    order_by: Union['IncidentOrderByInput', List['IncidentOrderByInput']]
    where: 'IncidentWhereInput'
    cursor: 'IncidentWhereUniqueInput'
    distinct: List['IncidentScalarFieldKeys']
    include: 'IncidentIncludeFromIncidentRecursive1'


class FindManyIncidentArgsFromEffectivenessRecursive1(TypedDict, total=False):
    """Arguments for Effectiveness"""
    take: int
    skip: int
    order_by: Union['IncidentOrderByInput', List['IncidentOrderByInput']]
    where: 'IncidentWhereInput'
    cursor: 'IncidentWhereUniqueInput'
    distinct: List['IncidentScalarFieldKeys']
    include: 'IncidentIncludeFromIncidentRecursive2'


class FindManyIncidentArgsFromEffectivenessRecursive2(TypedDict, total=False):
    """Arguments for Effectiveness"""
    take: int
    skip: int
    order_by: Union['IncidentOrderByInput', List['IncidentOrderByInput']]
    where: 'IncidentWhereInput'
    cursor: 'IncidentWhereUniqueInput'
    distinct: List['IncidentScalarFieldKeys']
    include: 'IncidentIncludeFromIncidentRecursive3'


class FindManyIncidentArgsFromEffectivenessRecursive3(TypedDict, total=False):
    """Arguments for Effectiveness"""
    take: int
    skip: int
    order_by: Union['IncidentOrderByInput', List['IncidentOrderByInput']]
    where: 'IncidentWhereInput'
    cursor: 'IncidentWhereUniqueInput'
    distinct: List['IncidentScalarFieldKeys']
    include: 'IncidentIncludeFromIncidentRecursive4'


class FindManyIncidentArgsFromEffectivenessRecursive4(TypedDict, total=False):
    """Arguments for Effectiveness"""
    take: int
    skip: int
    order_by: Union['IncidentOrderByInput', List['IncidentOrderByInput']]
    where: 'IncidentWhereInput'
    cursor: 'IncidentWhereUniqueInput'
    distinct: List['IncidentScalarFieldKeys']
    
    

class NotificationIncludeFromEffectiveness(TypedDict, total=False):
    """Relational arguments for Effectiveness"""


class NotificationIncludeFromEffectivenessRecursive1(TypedDict, total=False):
    """Relational arguments for Effectiveness"""


class NotificationIncludeFromEffectivenessRecursive2(TypedDict, total=False):
    """Relational arguments for Effectiveness"""


class NotificationIncludeFromEffectivenessRecursive3(TypedDict, total=False):
    """Relational arguments for Effectiveness"""


class NotificationIncludeFromEffectivenessRecursive4(TypedDict, total=False):
    """Relational arguments for Effectiveness"""

    

class NotificationArgsFromEffectiveness(TypedDict, total=False):
    """Arguments for Effectiveness"""
    include: 'NotificationIncludeFromNotificationRecursive1'


class NotificationArgsFromEffectivenessRecursive1(TypedDict, total=False):
    """Arguments for Effectiveness"""
    include: 'NotificationIncludeFromNotificationRecursive2'


class NotificationArgsFromEffectivenessRecursive2(TypedDict, total=False):
    """Arguments for Effectiveness"""
    include: 'NotificationIncludeFromNotificationRecursive3'


class NotificationArgsFromEffectivenessRecursive3(TypedDict, total=False):
    """Arguments for Effectiveness"""
    include: 'NotificationIncludeFromNotificationRecursive4'


class NotificationArgsFromEffectivenessRecursive4(TypedDict, total=False):
    """Arguments for Effectiveness"""
    
    

class FindManyNotificationArgsFromEffectiveness(TypedDict, total=False):
    """Arguments for Effectiveness"""
    take: int
    skip: int
    order_by: Union['NotificationOrderByInput', List['NotificationOrderByInput']]
    where: 'NotificationWhereInput'
    cursor: 'NotificationWhereUniqueInput'
    distinct: List['NotificationScalarFieldKeys']
    include: 'NotificationIncludeFromNotificationRecursive1'


class FindManyNotificationArgsFromEffectivenessRecursive1(TypedDict, total=False):
    """Arguments for Effectiveness"""
    take: int
    skip: int
    order_by: Union['NotificationOrderByInput', List['NotificationOrderByInput']]
    where: 'NotificationWhereInput'
    cursor: 'NotificationWhereUniqueInput'
    distinct: List['NotificationScalarFieldKeys']
    include: 'NotificationIncludeFromNotificationRecursive2'


class FindManyNotificationArgsFromEffectivenessRecursive2(TypedDict, total=False):
    """Arguments for Effectiveness"""
    take: int
    skip: int
    order_by: Union['NotificationOrderByInput', List['NotificationOrderByInput']]
    where: 'NotificationWhereInput'
    cursor: 'NotificationWhereUniqueInput'
    distinct: List['NotificationScalarFieldKeys']
    include: 'NotificationIncludeFromNotificationRecursive3'


class FindManyNotificationArgsFromEffectivenessRecursive3(TypedDict, total=False):
    """Arguments for Effectiveness"""
    take: int
    skip: int
    order_by: Union['NotificationOrderByInput', List['NotificationOrderByInput']]
    where: 'NotificationWhereInput'
    cursor: 'NotificationWhereUniqueInput'
    distinct: List['NotificationScalarFieldKeys']
    include: 'NotificationIncludeFromNotificationRecursive4'


class FindManyNotificationArgsFromEffectivenessRecursive4(TypedDict, total=False):
    """Arguments for Effectiveness"""
    take: int
    skip: int
    order_by: Union['NotificationOrderByInput', List['NotificationOrderByInput']]
    where: 'NotificationWhereInput'
    cursor: 'NotificationWhereUniqueInput'
    distinct: List['NotificationScalarFieldKeys']
    
    

class ScenarioIncludeFromEffectiveness(TypedDict, total=False):
    """Relational arguments for Effectiveness"""


class ScenarioIncludeFromEffectivenessRecursive1(TypedDict, total=False):
    """Relational arguments for Effectiveness"""


class ScenarioIncludeFromEffectivenessRecursive2(TypedDict, total=False):
    """Relational arguments for Effectiveness"""


class ScenarioIncludeFromEffectivenessRecursive3(TypedDict, total=False):
    """Relational arguments for Effectiveness"""


class ScenarioIncludeFromEffectivenessRecursive4(TypedDict, total=False):
    """Relational arguments for Effectiveness"""

    

class ScenarioArgsFromEffectiveness(TypedDict, total=False):
    """Arguments for Effectiveness"""
    include: 'ScenarioIncludeFromScenarioRecursive1'


class ScenarioArgsFromEffectivenessRecursive1(TypedDict, total=False):
    """Arguments for Effectiveness"""
    include: 'ScenarioIncludeFromScenarioRecursive2'


class ScenarioArgsFromEffectivenessRecursive2(TypedDict, total=False):
    """Arguments for Effectiveness"""
    include: 'ScenarioIncludeFromScenarioRecursive3'


class ScenarioArgsFromEffectivenessRecursive3(TypedDict, total=False):
    """Arguments for Effectiveness"""
    include: 'ScenarioIncludeFromScenarioRecursive4'


class ScenarioArgsFromEffectivenessRecursive4(TypedDict, total=False):
    """Arguments for Effectiveness"""
    
    

class FindManyScenarioArgsFromEffectiveness(TypedDict, total=False):
    """Arguments for Effectiveness"""
    take: int
    skip: int
    order_by: Union['ScenarioOrderByInput', List['ScenarioOrderByInput']]
    where: 'ScenarioWhereInput'
    cursor: 'ScenarioWhereUniqueInput'
    distinct: List['ScenarioScalarFieldKeys']
    include: 'ScenarioIncludeFromScenarioRecursive1'


class FindManyScenarioArgsFromEffectivenessRecursive1(TypedDict, total=False):
    """Arguments for Effectiveness"""
    take: int
    skip: int
    order_by: Union['ScenarioOrderByInput', List['ScenarioOrderByInput']]
    where: 'ScenarioWhereInput'
    cursor: 'ScenarioWhereUniqueInput'
    distinct: List['ScenarioScalarFieldKeys']
    include: 'ScenarioIncludeFromScenarioRecursive2'


class FindManyScenarioArgsFromEffectivenessRecursive2(TypedDict, total=False):
    """Arguments for Effectiveness"""
    take: int
    skip: int
    order_by: Union['ScenarioOrderByInput', List['ScenarioOrderByInput']]
    where: 'ScenarioWhereInput'
    cursor: 'ScenarioWhereUniqueInput'
    distinct: List['ScenarioScalarFieldKeys']
    include: 'ScenarioIncludeFromScenarioRecursive3'


class FindManyScenarioArgsFromEffectivenessRecursive3(TypedDict, total=False):
    """Arguments for Effectiveness"""
    take: int
    skip: int
    order_by: Union['ScenarioOrderByInput', List['ScenarioOrderByInput']]
    where: 'ScenarioWhereInput'
    cursor: 'ScenarioWhereUniqueInput'
    distinct: List['ScenarioScalarFieldKeys']
    include: 'ScenarioIncludeFromScenarioRecursive4'


class FindManyScenarioArgsFromEffectivenessRecursive4(TypedDict, total=False):
    """Arguments for Effectiveness"""
    take: int
    skip: int
    order_by: Union['ScenarioOrderByInput', List['ScenarioOrderByInput']]
    where: 'ScenarioWhereInput'
    cursor: 'ScenarioWhereUniqueInput'
    distinct: List['ScenarioScalarFieldKeys']
    
    

class SocialReportIncludeFromEffectiveness(TypedDict, total=False):
    """Relational arguments for Effectiveness"""


class SocialReportIncludeFromEffectivenessRecursive1(TypedDict, total=False):
    """Relational arguments for Effectiveness"""


class SocialReportIncludeFromEffectivenessRecursive2(TypedDict, total=False):
    """Relational arguments for Effectiveness"""


class SocialReportIncludeFromEffectivenessRecursive3(TypedDict, total=False):
    """Relational arguments for Effectiveness"""


class SocialReportIncludeFromEffectivenessRecursive4(TypedDict, total=False):
    """Relational arguments for Effectiveness"""

    

class SocialReportArgsFromEffectiveness(TypedDict, total=False):
    """Arguments for Effectiveness"""
    include: 'SocialReportIncludeFromSocialReportRecursive1'


class SocialReportArgsFromEffectivenessRecursive1(TypedDict, total=False):
    """Arguments for Effectiveness"""
    include: 'SocialReportIncludeFromSocialReportRecursive2'


class SocialReportArgsFromEffectivenessRecursive2(TypedDict, total=False):
    """Arguments for Effectiveness"""
    include: 'SocialReportIncludeFromSocialReportRecursive3'


class SocialReportArgsFromEffectivenessRecursive3(TypedDict, total=False):
    """Arguments for Effectiveness"""
    include: 'SocialReportIncludeFromSocialReportRecursive4'


class SocialReportArgsFromEffectivenessRecursive4(TypedDict, total=False):
    """Arguments for Effectiveness"""
    
    

class FindManySocialReportArgsFromEffectiveness(TypedDict, total=False):
    """Arguments for Effectiveness"""
    take: int
    skip: int
    order_by: Union['SocialReportOrderByInput', List['SocialReportOrderByInput']]
    where: 'SocialReportWhereInput'
    cursor: 'SocialReportWhereUniqueInput'
    distinct: List['SocialReportScalarFieldKeys']
    include: 'SocialReportIncludeFromSocialReportRecursive1'


class FindManySocialReportArgsFromEffectivenessRecursive1(TypedDict, total=False):
    """Arguments for Effectiveness"""
    take: int
    skip: int
    order_by: Union['SocialReportOrderByInput', List['SocialReportOrderByInput']]
    where: 'SocialReportWhereInput'
    cursor: 'SocialReportWhereUniqueInput'
    distinct: List['SocialReportScalarFieldKeys']
    include: 'SocialReportIncludeFromSocialReportRecursive2'


class FindManySocialReportArgsFromEffectivenessRecursive2(TypedDict, total=False):
    """Arguments for Effectiveness"""
    take: int
    skip: int
    order_by: Union['SocialReportOrderByInput', List['SocialReportOrderByInput']]
    where: 'SocialReportWhereInput'
    cursor: 'SocialReportWhereUniqueInput'
    distinct: List['SocialReportScalarFieldKeys']
    include: 'SocialReportIncludeFromSocialReportRecursive3'


class FindManySocialReportArgsFromEffectivenessRecursive3(TypedDict, total=False):
    """Arguments for Effectiveness"""
    take: int
    skip: int
    order_by: Union['SocialReportOrderByInput', List['SocialReportOrderByInput']]
    where: 'SocialReportWhereInput'
    cursor: 'SocialReportWhereUniqueInput'
    distinct: List['SocialReportScalarFieldKeys']
    include: 'SocialReportIncludeFromSocialReportRecursive4'


class FindManySocialReportArgsFromEffectivenessRecursive4(TypedDict, total=False):
    """Arguments for Effectiveness"""
    take: int
    skip: int
    order_by: Union['SocialReportOrderByInput', List['SocialReportOrderByInput']]
    where: 'SocialReportWhereInput'
    cursor: 'SocialReportWhereUniqueInput'
    distinct: List['SocialReportScalarFieldKeys']
    
    

class TrafficDataIncludeFromEffectiveness(TypedDict, total=False):
    """Relational arguments for Effectiveness"""


class TrafficDataIncludeFromEffectivenessRecursive1(TypedDict, total=False):
    """Relational arguments for Effectiveness"""


class TrafficDataIncludeFromEffectivenessRecursive2(TypedDict, total=False):
    """Relational arguments for Effectiveness"""


class TrafficDataIncludeFromEffectivenessRecursive3(TypedDict, total=False):
    """Relational arguments for Effectiveness"""


class TrafficDataIncludeFromEffectivenessRecursive4(TypedDict, total=False):
    """Relational arguments for Effectiveness"""

    

class TrafficDataArgsFromEffectiveness(TypedDict, total=False):
    """Arguments for Effectiveness"""
    include: 'TrafficDataIncludeFromTrafficDataRecursive1'


class TrafficDataArgsFromEffectivenessRecursive1(TypedDict, total=False):
    """Arguments for Effectiveness"""
    include: 'TrafficDataIncludeFromTrafficDataRecursive2'


class TrafficDataArgsFromEffectivenessRecursive2(TypedDict, total=False):
    """Arguments for Effectiveness"""
    include: 'TrafficDataIncludeFromTrafficDataRecursive3'


class TrafficDataArgsFromEffectivenessRecursive3(TypedDict, total=False):
    """Arguments for Effectiveness"""
    include: 'TrafficDataIncludeFromTrafficDataRecursive4'


class TrafficDataArgsFromEffectivenessRecursive4(TypedDict, total=False):
    """Arguments for Effectiveness"""
    
    

class FindManyTrafficDataArgsFromEffectiveness(TypedDict, total=False):
    """Arguments for Effectiveness"""
    take: int
    skip: int
    order_by: Union['TrafficDataOrderByInput', List['TrafficDataOrderByInput']]
    where: 'TrafficDataWhereInput'
    cursor: 'TrafficDataWhereUniqueInput'
    distinct: List['TrafficDataScalarFieldKeys']
    include: 'TrafficDataIncludeFromTrafficDataRecursive1'


class FindManyTrafficDataArgsFromEffectivenessRecursive1(TypedDict, total=False):
    """Arguments for Effectiveness"""
    take: int
    skip: int
    order_by: Union['TrafficDataOrderByInput', List['TrafficDataOrderByInput']]
    where: 'TrafficDataWhereInput'
    cursor: 'TrafficDataWhereUniqueInput'
    distinct: List['TrafficDataScalarFieldKeys']
    include: 'TrafficDataIncludeFromTrafficDataRecursive2'


class FindManyTrafficDataArgsFromEffectivenessRecursive2(TypedDict, total=False):
    """Arguments for Effectiveness"""
    take: int
    skip: int
    order_by: Union['TrafficDataOrderByInput', List['TrafficDataOrderByInput']]
    where: 'TrafficDataWhereInput'
    cursor: 'TrafficDataWhereUniqueInput'
    distinct: List['TrafficDataScalarFieldKeys']
    include: 'TrafficDataIncludeFromTrafficDataRecursive3'


class FindManyTrafficDataArgsFromEffectivenessRecursive3(TypedDict, total=False):
    """Arguments for Effectiveness"""
    take: int
    skip: int
    order_by: Union['TrafficDataOrderByInput', List['TrafficDataOrderByInput']]
    where: 'TrafficDataWhereInput'
    cursor: 'TrafficDataWhereUniqueInput'
    distinct: List['TrafficDataScalarFieldKeys']
    include: 'TrafficDataIncludeFromTrafficDataRecursive4'


class FindManyTrafficDataArgsFromEffectivenessRecursive4(TypedDict, total=False):
    """Arguments for Effectiveness"""
    take: int
    skip: int
    order_by: Union['TrafficDataOrderByInput', List['TrafficDataOrderByInput']]
    where: 'TrafficDataWhereInput'
    cursor: 'TrafficDataWhereUniqueInput'
    distinct: List['TrafficDataScalarFieldKeys']
    
    

class TrafficLightIncludeFromEffectiveness(TypedDict, total=False):
    """Relational arguments for Effectiveness"""


class TrafficLightIncludeFromEffectivenessRecursive1(TypedDict, total=False):
    """Relational arguments for Effectiveness"""


class TrafficLightIncludeFromEffectivenessRecursive2(TypedDict, total=False):
    """Relational arguments for Effectiveness"""


class TrafficLightIncludeFromEffectivenessRecursive3(TypedDict, total=False):
    """Relational arguments for Effectiveness"""


class TrafficLightIncludeFromEffectivenessRecursive4(TypedDict, total=False):
    """Relational arguments for Effectiveness"""

    

class TrafficLightArgsFromEffectiveness(TypedDict, total=False):
    """Arguments for Effectiveness"""
    include: 'TrafficLightIncludeFromTrafficLightRecursive1'


class TrafficLightArgsFromEffectivenessRecursive1(TypedDict, total=False):
    """Arguments for Effectiveness"""
    include: 'TrafficLightIncludeFromTrafficLightRecursive2'


class TrafficLightArgsFromEffectivenessRecursive2(TypedDict, total=False):
    """Arguments for Effectiveness"""
    include: 'TrafficLightIncludeFromTrafficLightRecursive3'


class TrafficLightArgsFromEffectivenessRecursive3(TypedDict, total=False):
    """Arguments for Effectiveness"""
    include: 'TrafficLightIncludeFromTrafficLightRecursive4'


class TrafficLightArgsFromEffectivenessRecursive4(TypedDict, total=False):
    """Arguments for Effectiveness"""
    
    

class FindManyTrafficLightArgsFromEffectiveness(TypedDict, total=False):
    """Arguments for Effectiveness"""
    take: int
    skip: int
    order_by: Union['TrafficLightOrderByInput', List['TrafficLightOrderByInput']]
    where: 'TrafficLightWhereInput'
    cursor: 'TrafficLightWhereUniqueInput'
    distinct: List['TrafficLightScalarFieldKeys']
    include: 'TrafficLightIncludeFromTrafficLightRecursive1'


class FindManyTrafficLightArgsFromEffectivenessRecursive1(TypedDict, total=False):
    """Arguments for Effectiveness"""
    take: int
    skip: int
    order_by: Union['TrafficLightOrderByInput', List['TrafficLightOrderByInput']]
    where: 'TrafficLightWhereInput'
    cursor: 'TrafficLightWhereUniqueInput'
    distinct: List['TrafficLightScalarFieldKeys']
    include: 'TrafficLightIncludeFromTrafficLightRecursive2'


class FindManyTrafficLightArgsFromEffectivenessRecursive2(TypedDict, total=False):
    """Arguments for Effectiveness"""
    take: int
    skip: int
    order_by: Union['TrafficLightOrderByInput', List['TrafficLightOrderByInput']]
    where: 'TrafficLightWhereInput'
    cursor: 'TrafficLightWhereUniqueInput'
    distinct: List['TrafficLightScalarFieldKeys']
    include: 'TrafficLightIncludeFromTrafficLightRecursive3'


class FindManyTrafficLightArgsFromEffectivenessRecursive3(TypedDict, total=False):
    """Arguments for Effectiveness"""
    take: int
    skip: int
    order_by: Union['TrafficLightOrderByInput', List['TrafficLightOrderByInput']]
    where: 'TrafficLightWhereInput'
    cursor: 'TrafficLightWhereUniqueInput'
    distinct: List['TrafficLightScalarFieldKeys']
    include: 'TrafficLightIncludeFromTrafficLightRecursive4'


class FindManyTrafficLightArgsFromEffectivenessRecursive4(TypedDict, total=False):
    """Arguments for Effectiveness"""
    take: int
    skip: int
    order_by: Union['TrafficLightOrderByInput', List['TrafficLightOrderByInput']]
    where: 'TrafficLightWhereInput'
    cursor: 'TrafficLightWhereUniqueInput'
    distinct: List['TrafficLightScalarFieldKeys']
    


FindManyEffectivenessArgs = FindManyEffectivenessArgsFromEffectiveness
FindFirstEffectivenessArgs = FindManyEffectivenessArgsFromEffectiveness


    

class EffectivenessWhereInput(TypedDict, total=False):
    """Effectiveness arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    measureId: Union[_str, 'types.StringFilter']
    before: Union['fields.Json', 'types.JsonFilter']
    after: Union['fields.Json', 'types.JsonFilter']
    effectivenessScore: Union[_float, 'types.FloatFilter']

    # should be noted that AND and NOT should be Union['EffectivenessWhereInputRecursive1', List['EffectivenessWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['EffectivenessWhereInputRecursive1']
    OR: List['EffectivenessWhereInputRecursive1']
    NOT: List['EffectivenessWhereInputRecursive1']


class EffectivenessWhereInputRecursive1(TypedDict, total=False):
    """Effectiveness arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    measureId: Union[_str, 'types.StringFilter']
    before: Union['fields.Json', 'types.JsonFilter']
    after: Union['fields.Json', 'types.JsonFilter']
    effectivenessScore: Union[_float, 'types.FloatFilter']

    # should be noted that AND and NOT should be Union['EffectivenessWhereInputRecursive2', List['EffectivenessWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['EffectivenessWhereInputRecursive2']
    OR: List['EffectivenessWhereInputRecursive2']
    NOT: List['EffectivenessWhereInputRecursive2']


class EffectivenessWhereInputRecursive2(TypedDict, total=False):
    """Effectiveness arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    measureId: Union[_str, 'types.StringFilter']
    before: Union['fields.Json', 'types.JsonFilter']
    after: Union['fields.Json', 'types.JsonFilter']
    effectivenessScore: Union[_float, 'types.FloatFilter']

    # should be noted that AND and NOT should be Union['EffectivenessWhereInputRecursive3', List['EffectivenessWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['EffectivenessWhereInputRecursive3']
    OR: List['EffectivenessWhereInputRecursive3']
    NOT: List['EffectivenessWhereInputRecursive3']


class EffectivenessWhereInputRecursive3(TypedDict, total=False):
    """Effectiveness arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    measureId: Union[_str, 'types.StringFilter']
    before: Union['fields.Json', 'types.JsonFilter']
    after: Union['fields.Json', 'types.JsonFilter']
    effectivenessScore: Union[_float, 'types.FloatFilter']

    # should be noted that AND and NOT should be Union['EffectivenessWhereInputRecursive4', List['EffectivenessWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['EffectivenessWhereInputRecursive4']
    OR: List['EffectivenessWhereInputRecursive4']
    NOT: List['EffectivenessWhereInputRecursive4']


class EffectivenessWhereInputRecursive4(TypedDict, total=False):
    """Effectiveness arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    measureId: Union[_str, 'types.StringFilter']
    before: Union['fields.Json', 'types.JsonFilter']
    after: Union['fields.Json', 'types.JsonFilter']
    effectivenessScore: Union[_float, 'types.FloatFilter']



# aggregate Effectiveness types


    

class EffectivenessScalarWhereWithAggregatesInput(TypedDict, total=False):
    """Effectiveness arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    measureId: Union[_str, 'types.StringWithAggregatesFilter']
    before: Union['fields.Json', 'types.JsonWithAggregatesFilter']
    after: Union['fields.Json', 'types.JsonWithAggregatesFilter']
    effectivenessScore: Union[_float, 'types.FloatWithAggregatesFilter']

    AND: List['EffectivenessScalarWhereWithAggregatesInputRecursive1']
    OR: List['EffectivenessScalarWhereWithAggregatesInputRecursive1']
    NOT: List['EffectivenessScalarWhereWithAggregatesInputRecursive1']


class EffectivenessScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """Effectiveness arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    measureId: Union[_str, 'types.StringWithAggregatesFilter']
    before: Union['fields.Json', 'types.JsonWithAggregatesFilter']
    after: Union['fields.Json', 'types.JsonWithAggregatesFilter']
    effectivenessScore: Union[_float, 'types.FloatWithAggregatesFilter']

    AND: List['EffectivenessScalarWhereWithAggregatesInputRecursive2']
    OR: List['EffectivenessScalarWhereWithAggregatesInputRecursive2']
    NOT: List['EffectivenessScalarWhereWithAggregatesInputRecursive2']


class EffectivenessScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """Effectiveness arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    measureId: Union[_str, 'types.StringWithAggregatesFilter']
    before: Union['fields.Json', 'types.JsonWithAggregatesFilter']
    after: Union['fields.Json', 'types.JsonWithAggregatesFilter']
    effectivenessScore: Union[_float, 'types.FloatWithAggregatesFilter']

    AND: List['EffectivenessScalarWhereWithAggregatesInputRecursive3']
    OR: List['EffectivenessScalarWhereWithAggregatesInputRecursive3']
    NOT: List['EffectivenessScalarWhereWithAggregatesInputRecursive3']


class EffectivenessScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """Effectiveness arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    measureId: Union[_str, 'types.StringWithAggregatesFilter']
    before: Union['fields.Json', 'types.JsonWithAggregatesFilter']
    after: Union['fields.Json', 'types.JsonWithAggregatesFilter']
    effectivenessScore: Union[_float, 'types.FloatWithAggregatesFilter']

    AND: List['EffectivenessScalarWhereWithAggregatesInputRecursive4']
    OR: List['EffectivenessScalarWhereWithAggregatesInputRecursive4']
    NOT: List['EffectivenessScalarWhereWithAggregatesInputRecursive4']


class EffectivenessScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """Effectiveness arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    measureId: Union[_str, 'types.StringWithAggregatesFilter']
    before: Union['fields.Json', 'types.JsonWithAggregatesFilter']
    after: Union['fields.Json', 'types.JsonWithAggregatesFilter']
    effectivenessScore: Union[_float, 'types.FloatWithAggregatesFilter']



class EffectivenessGroupByOutput(TypedDict, total=False):
    id: _str
    measureId: _str
    before: 'fields.Json'
    after: 'fields.Json'
    effectivenessScore: _float
    _sum: 'EffectivenessSumAggregateOutput'
    _avg: 'EffectivenessAvgAggregateOutput'
    _min: 'EffectivenessMinAggregateOutput'
    _max: 'EffectivenessMaxAggregateOutput'
    _count: 'EffectivenessCountAggregateOutput'


class EffectivenessAvgAggregateOutput(TypedDict, total=False):
    """Effectiveness output for aggregating averages"""
    effectivenessScore: float


class EffectivenessSumAggregateOutput(TypedDict, total=False):
    """Effectiveness output for aggregating sums"""
    effectivenessScore: _float


class EffectivenessScalarAggregateOutput(TypedDict, total=False):
    """Effectiveness output including scalar fields"""
    id: _str
    measureId: _str
    before: 'fields.Json'
    after: 'fields.Json'
    effectivenessScore: _float


EffectivenessMinAggregateOutput = EffectivenessScalarAggregateOutput
EffectivenessMaxAggregateOutput = EffectivenessScalarAggregateOutput


class EffectivenessMaxAggregateInput(TypedDict, total=False):
    """Effectiveness input for aggregating by max"""
    id: bool
    measureId: bool
    before: bool
    after: bool
    effectivenessScore: bool


class EffectivenessMinAggregateInput(TypedDict, total=False):
    """Effectiveness input for aggregating by min"""
    id: bool
    measureId: bool
    before: bool
    after: bool
    effectivenessScore: bool


class EffectivenessNumberAggregateInput(TypedDict, total=False):
    """Effectiveness input for aggregating numbers"""
    effectivenessScore: bool


EffectivenessAvgAggregateInput = EffectivenessNumberAggregateInput
EffectivenessSumAggregateInput = EffectivenessNumberAggregateInput


EffectivenessCountAggregateInput = TypedDict(
    'EffectivenessCountAggregateInput',
    {
        'id': bool,
        'measureId': bool,
        'before': bool,
        'after': bool,
        'effectivenessScore': bool,
        '_all': bool,
    },
    total=False,
)

EffectivenessCountAggregateOutput = TypedDict(
    'EffectivenessCountAggregateOutput',
    {
        'id': int,
        'measureId': int,
        'before': int,
        'after': int,
        'effectivenessScore': int,
        '_all': int,
    },
    total=False,
)


EffectivenessKeys = Literal[
    'id',
    'measureId',
    'before',
    'after',
    'effectivenessScore',
]
EffectivenessScalarFieldKeys = Literal[
    'id',
    'measureId',
    'before',
    'after',
    'effectivenessScore',
]
EffectivenessScalarFieldKeysT = TypeVar('EffectivenessScalarFieldKeysT', bound=EffectivenessScalarFieldKeys)

EffectivenessRelationalFieldKeys = _NoneType

# EnvironmentalData types

class EnvironmentalDataOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the EnvironmentalData create method"""
    id: _str


class EnvironmentalDataCreateInput(EnvironmentalDataOptionalCreateInput):
    """Required arguments to the EnvironmentalData create method"""
    timestamp: datetime.datetime
    location: 'fields.Base64'
    emissionLevel: _float


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class EnvironmentalDataOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the EnvironmentalData create method, without relations"""
    id: _str


class EnvironmentalDataCreateWithoutRelationsInput(EnvironmentalDataOptionalCreateWithoutRelationsInput):
    """Required arguments to the EnvironmentalData create method, without relations"""
    timestamp: datetime.datetime
    location: 'fields.Base64'
    emissionLevel: _float

class EnvironmentalDataConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'EnvironmentalDataCreateWithoutRelationsInput'
    where: 'EnvironmentalDataWhereUniqueInput'

class EnvironmentalDataCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'EnvironmentalDataCreateWithoutRelationsInput'
    connect: 'EnvironmentalDataWhereUniqueInput'
    connect_or_create: 'EnvironmentalDataConnectOrCreateWithoutRelationsInput'


class EnvironmentalDataCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['EnvironmentalDataCreateWithoutRelationsInput', List['EnvironmentalDataCreateWithoutRelationsInput']]
    connect: Union['EnvironmentalDataWhereUniqueInput', List['EnvironmentalDataWhereUniqueInput']]
    connect_or_create: Union['EnvironmentalDataConnectOrCreateWithoutRelationsInput', List['EnvironmentalDataConnectOrCreateWithoutRelationsInput']]

_EnvironmentalDataWhereUnique_id_Input = TypedDict(
    '_EnvironmentalDataWhereUnique_id_Input',
    {
        'id': '_str',
    },
    total=True
)

EnvironmentalDataWhereUniqueInput = _EnvironmentalDataWhereUnique_id_Input


class EnvironmentalDataUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: _str
    timestamp: datetime.datetime
    location: 'fields.Base64'
    emissionLevel: Union[AtomicFloatInput, _float]


class EnvironmentalDataUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: _str
    timestamp: datetime.datetime
    location: 'fields.Base64'
    emissionLevel: Union[AtomicFloatInput, _float]


class EnvironmentalDataUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['EnvironmentalDataCreateWithoutRelationsInput']
    connect: List['EnvironmentalDataWhereUniqueInput']
    connect_or_create: List['EnvironmentalDataConnectOrCreateWithoutRelationsInput']
    set: List['EnvironmentalDataWhereUniqueInput']
    disconnect: List['EnvironmentalDataWhereUniqueInput']
    delete: List['EnvironmentalDataWhereUniqueInput']

    # TODO
    # update: List['EnvironmentalDataUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['EnvironmentalDataUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['EnvironmentalDataScalarWhereInput']
    # upsert: List['EnvironmentalDataUpserteWithWhereUniqueWithoutRelationsInput']


class EnvironmentalDataUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'EnvironmentalDataCreateWithoutRelationsInput'
    connect: 'EnvironmentalDataWhereUniqueInput'
    connect_or_create: 'EnvironmentalDataConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'EnvironmentalDataUpdateInput'
    # upsert: 'EnvironmentalDataUpsertWithoutRelationsInput'


class EnvironmentalDataUpsertInput(TypedDict):
    create: 'EnvironmentalDataCreateInput'
    update: 'EnvironmentalDataUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_EnvironmentalData_id_OrderByInput = TypedDict(
    '_EnvironmentalData_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_EnvironmentalData_timestamp_OrderByInput = TypedDict(
    '_EnvironmentalData_timestamp_OrderByInput',
    {
        'timestamp': 'SortOrder',
    },
    total=True
)

_EnvironmentalData_location_OrderByInput = TypedDict(
    '_EnvironmentalData_location_OrderByInput',
    {
        'location': 'SortOrder',
    },
    total=True
)

_EnvironmentalData_emissionLevel_OrderByInput = TypedDict(
    '_EnvironmentalData_emissionLevel_OrderByInput',
    {
        'emissionLevel': 'SortOrder',
    },
    total=True
)

_EnvironmentalData_RelevanceInner = TypedDict(
    '_EnvironmentalData_RelevanceInner',
    {
        'fields': 'List[EnvironmentalDataScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_EnvironmentalData_RelevanceOrderByInput = TypedDict(
    '_EnvironmentalData_RelevanceOrderByInput',
    {
        '_relevance': '_EnvironmentalData_RelevanceInner',
    },
    total=True
)

EnvironmentalDataOrderByInput = Union[
    '_EnvironmentalData_id_OrderByInput',
    '_EnvironmentalData_timestamp_OrderByInput',
    '_EnvironmentalData_location_OrderByInput',
    '_EnvironmentalData_emissionLevel_OrderByInput',
    '_EnvironmentalData_RelevanceOrderByInput',
]



# recursive EnvironmentalData types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

EnvironmentalDataRelationFilter = TypedDict(
    'EnvironmentalDataRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class EnvironmentalDataListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class EnvironmentalDataInclude(TypedDict, total=False):
    """EnvironmentalData relational arguments"""


    

class AchievementIncludeFromEnvironmentalData(TypedDict, total=False):
    """Relational arguments for EnvironmentalData"""


class AchievementIncludeFromEnvironmentalDataRecursive1(TypedDict, total=False):
    """Relational arguments for EnvironmentalData"""


class AchievementIncludeFromEnvironmentalDataRecursive2(TypedDict, total=False):
    """Relational arguments for EnvironmentalData"""


class AchievementIncludeFromEnvironmentalDataRecursive3(TypedDict, total=False):
    """Relational arguments for EnvironmentalData"""


class AchievementIncludeFromEnvironmentalDataRecursive4(TypedDict, total=False):
    """Relational arguments for EnvironmentalData"""

    

class AchievementArgsFromEnvironmentalData(TypedDict, total=False):
    """Arguments for EnvironmentalData"""
    include: 'AchievementIncludeFromAchievementRecursive1'


class AchievementArgsFromEnvironmentalDataRecursive1(TypedDict, total=False):
    """Arguments for EnvironmentalData"""
    include: 'AchievementIncludeFromAchievementRecursive2'


class AchievementArgsFromEnvironmentalDataRecursive2(TypedDict, total=False):
    """Arguments for EnvironmentalData"""
    include: 'AchievementIncludeFromAchievementRecursive3'


class AchievementArgsFromEnvironmentalDataRecursive3(TypedDict, total=False):
    """Arguments for EnvironmentalData"""
    include: 'AchievementIncludeFromAchievementRecursive4'


class AchievementArgsFromEnvironmentalDataRecursive4(TypedDict, total=False):
    """Arguments for EnvironmentalData"""
    
    

class FindManyAchievementArgsFromEnvironmentalData(TypedDict, total=False):
    """Arguments for EnvironmentalData"""
    take: int
    skip: int
    order_by: Union['AchievementOrderByInput', List['AchievementOrderByInput']]
    where: 'AchievementWhereInput'
    cursor: 'AchievementWhereUniqueInput'
    distinct: List['AchievementScalarFieldKeys']
    include: 'AchievementIncludeFromAchievementRecursive1'


class FindManyAchievementArgsFromEnvironmentalDataRecursive1(TypedDict, total=False):
    """Arguments for EnvironmentalData"""
    take: int
    skip: int
    order_by: Union['AchievementOrderByInput', List['AchievementOrderByInput']]
    where: 'AchievementWhereInput'
    cursor: 'AchievementWhereUniqueInput'
    distinct: List['AchievementScalarFieldKeys']
    include: 'AchievementIncludeFromAchievementRecursive2'


class FindManyAchievementArgsFromEnvironmentalDataRecursive2(TypedDict, total=False):
    """Arguments for EnvironmentalData"""
    take: int
    skip: int
    order_by: Union['AchievementOrderByInput', List['AchievementOrderByInput']]
    where: 'AchievementWhereInput'
    cursor: 'AchievementWhereUniqueInput'
    distinct: List['AchievementScalarFieldKeys']
    include: 'AchievementIncludeFromAchievementRecursive3'


class FindManyAchievementArgsFromEnvironmentalDataRecursive3(TypedDict, total=False):
    """Arguments for EnvironmentalData"""
    take: int
    skip: int
    order_by: Union['AchievementOrderByInput', List['AchievementOrderByInput']]
    where: 'AchievementWhereInput'
    cursor: 'AchievementWhereUniqueInput'
    distinct: List['AchievementScalarFieldKeys']
    include: 'AchievementIncludeFromAchievementRecursive4'


class FindManyAchievementArgsFromEnvironmentalDataRecursive4(TypedDict, total=False):
    """Arguments for EnvironmentalData"""
    take: int
    skip: int
    order_by: Union['AchievementOrderByInput', List['AchievementOrderByInput']]
    where: 'AchievementWhereInput'
    cursor: 'AchievementWhereUniqueInput'
    distinct: List['AchievementScalarFieldKeys']
    
    

class CameraIncludeFromEnvironmentalData(TypedDict, total=False):
    """Relational arguments for EnvironmentalData"""


class CameraIncludeFromEnvironmentalDataRecursive1(TypedDict, total=False):
    """Relational arguments for EnvironmentalData"""


class CameraIncludeFromEnvironmentalDataRecursive2(TypedDict, total=False):
    """Relational arguments for EnvironmentalData"""


class CameraIncludeFromEnvironmentalDataRecursive3(TypedDict, total=False):
    """Relational arguments for EnvironmentalData"""


class CameraIncludeFromEnvironmentalDataRecursive4(TypedDict, total=False):
    """Relational arguments for EnvironmentalData"""

    

class CameraArgsFromEnvironmentalData(TypedDict, total=False):
    """Arguments for EnvironmentalData"""
    include: 'CameraIncludeFromCameraRecursive1'


class CameraArgsFromEnvironmentalDataRecursive1(TypedDict, total=False):
    """Arguments for EnvironmentalData"""
    include: 'CameraIncludeFromCameraRecursive2'


class CameraArgsFromEnvironmentalDataRecursive2(TypedDict, total=False):
    """Arguments for EnvironmentalData"""
    include: 'CameraIncludeFromCameraRecursive3'


class CameraArgsFromEnvironmentalDataRecursive3(TypedDict, total=False):
    """Arguments for EnvironmentalData"""
    include: 'CameraIncludeFromCameraRecursive4'


class CameraArgsFromEnvironmentalDataRecursive4(TypedDict, total=False):
    """Arguments for EnvironmentalData"""
    
    

class FindManyCameraArgsFromEnvironmentalData(TypedDict, total=False):
    """Arguments for EnvironmentalData"""
    take: int
    skip: int
    order_by: Union['CameraOrderByInput', List['CameraOrderByInput']]
    where: 'CameraWhereInput'
    cursor: 'CameraWhereUniqueInput'
    distinct: List['CameraScalarFieldKeys']
    include: 'CameraIncludeFromCameraRecursive1'


class FindManyCameraArgsFromEnvironmentalDataRecursive1(TypedDict, total=False):
    """Arguments for EnvironmentalData"""
    take: int
    skip: int
    order_by: Union['CameraOrderByInput', List['CameraOrderByInput']]
    where: 'CameraWhereInput'
    cursor: 'CameraWhereUniqueInput'
    distinct: List['CameraScalarFieldKeys']
    include: 'CameraIncludeFromCameraRecursive2'


class FindManyCameraArgsFromEnvironmentalDataRecursive2(TypedDict, total=False):
    """Arguments for EnvironmentalData"""
    take: int
    skip: int
    order_by: Union['CameraOrderByInput', List['CameraOrderByInput']]
    where: 'CameraWhereInput'
    cursor: 'CameraWhereUniqueInput'
    distinct: List['CameraScalarFieldKeys']
    include: 'CameraIncludeFromCameraRecursive3'


class FindManyCameraArgsFromEnvironmentalDataRecursive3(TypedDict, total=False):
    """Arguments for EnvironmentalData"""
    take: int
    skip: int
    order_by: Union['CameraOrderByInput', List['CameraOrderByInput']]
    where: 'CameraWhereInput'
    cursor: 'CameraWhereUniqueInput'
    distinct: List['CameraScalarFieldKeys']
    include: 'CameraIncludeFromCameraRecursive4'


class FindManyCameraArgsFromEnvironmentalDataRecursive4(TypedDict, total=False):
    """Arguments for EnvironmentalData"""
    take: int
    skip: int
    order_by: Union['CameraOrderByInput', List['CameraOrderByInput']]
    where: 'CameraWhereInput'
    cursor: 'CameraWhereUniqueInput'
    distinct: List['CameraScalarFieldKeys']
    
    

class EffectivenessIncludeFromEnvironmentalData(TypedDict, total=False):
    """Relational arguments for EnvironmentalData"""


class EffectivenessIncludeFromEnvironmentalDataRecursive1(TypedDict, total=False):
    """Relational arguments for EnvironmentalData"""


class EffectivenessIncludeFromEnvironmentalDataRecursive2(TypedDict, total=False):
    """Relational arguments for EnvironmentalData"""


class EffectivenessIncludeFromEnvironmentalDataRecursive3(TypedDict, total=False):
    """Relational arguments for EnvironmentalData"""


class EffectivenessIncludeFromEnvironmentalDataRecursive4(TypedDict, total=False):
    """Relational arguments for EnvironmentalData"""

    

class EffectivenessArgsFromEnvironmentalData(TypedDict, total=False):
    """Arguments for EnvironmentalData"""
    include: 'EffectivenessIncludeFromEffectivenessRecursive1'


class EffectivenessArgsFromEnvironmentalDataRecursive1(TypedDict, total=False):
    """Arguments for EnvironmentalData"""
    include: 'EffectivenessIncludeFromEffectivenessRecursive2'


class EffectivenessArgsFromEnvironmentalDataRecursive2(TypedDict, total=False):
    """Arguments for EnvironmentalData"""
    include: 'EffectivenessIncludeFromEffectivenessRecursive3'


class EffectivenessArgsFromEnvironmentalDataRecursive3(TypedDict, total=False):
    """Arguments for EnvironmentalData"""
    include: 'EffectivenessIncludeFromEffectivenessRecursive4'


class EffectivenessArgsFromEnvironmentalDataRecursive4(TypedDict, total=False):
    """Arguments for EnvironmentalData"""
    
    

class FindManyEffectivenessArgsFromEnvironmentalData(TypedDict, total=False):
    """Arguments for EnvironmentalData"""
    take: int
    skip: int
    order_by: Union['EffectivenessOrderByInput', List['EffectivenessOrderByInput']]
    where: 'EffectivenessWhereInput'
    cursor: 'EffectivenessWhereUniqueInput'
    distinct: List['EffectivenessScalarFieldKeys']
    include: 'EffectivenessIncludeFromEffectivenessRecursive1'


class FindManyEffectivenessArgsFromEnvironmentalDataRecursive1(TypedDict, total=False):
    """Arguments for EnvironmentalData"""
    take: int
    skip: int
    order_by: Union['EffectivenessOrderByInput', List['EffectivenessOrderByInput']]
    where: 'EffectivenessWhereInput'
    cursor: 'EffectivenessWhereUniqueInput'
    distinct: List['EffectivenessScalarFieldKeys']
    include: 'EffectivenessIncludeFromEffectivenessRecursive2'


class FindManyEffectivenessArgsFromEnvironmentalDataRecursive2(TypedDict, total=False):
    """Arguments for EnvironmentalData"""
    take: int
    skip: int
    order_by: Union['EffectivenessOrderByInput', List['EffectivenessOrderByInput']]
    where: 'EffectivenessWhereInput'
    cursor: 'EffectivenessWhereUniqueInput'
    distinct: List['EffectivenessScalarFieldKeys']
    include: 'EffectivenessIncludeFromEffectivenessRecursive3'


class FindManyEffectivenessArgsFromEnvironmentalDataRecursive3(TypedDict, total=False):
    """Arguments for EnvironmentalData"""
    take: int
    skip: int
    order_by: Union['EffectivenessOrderByInput', List['EffectivenessOrderByInput']]
    where: 'EffectivenessWhereInput'
    cursor: 'EffectivenessWhereUniqueInput'
    distinct: List['EffectivenessScalarFieldKeys']
    include: 'EffectivenessIncludeFromEffectivenessRecursive4'


class FindManyEffectivenessArgsFromEnvironmentalDataRecursive4(TypedDict, total=False):
    """Arguments for EnvironmentalData"""
    take: int
    skip: int
    order_by: Union['EffectivenessOrderByInput', List['EffectivenessOrderByInput']]
    where: 'EffectivenessWhereInput'
    cursor: 'EffectivenessWhereUniqueInput'
    distinct: List['EffectivenessScalarFieldKeys']
    
    

class EnvironmentalDataIncludeFromEnvironmentalData(TypedDict, total=False):
    """Relational arguments for EnvironmentalData"""


class EnvironmentalDataIncludeFromEnvironmentalDataRecursive1(TypedDict, total=False):
    """Relational arguments for EnvironmentalData"""


class EnvironmentalDataIncludeFromEnvironmentalDataRecursive2(TypedDict, total=False):
    """Relational arguments for EnvironmentalData"""


class EnvironmentalDataIncludeFromEnvironmentalDataRecursive3(TypedDict, total=False):
    """Relational arguments for EnvironmentalData"""


class EnvironmentalDataIncludeFromEnvironmentalDataRecursive4(TypedDict, total=False):
    """Relational arguments for EnvironmentalData"""

    

class EnvironmentalDataArgsFromEnvironmentalData(TypedDict, total=False):
    """Arguments for EnvironmentalData"""
    include: 'EnvironmentalDataIncludeFromEnvironmentalDataRecursive1'


class EnvironmentalDataArgsFromEnvironmentalDataRecursive1(TypedDict, total=False):
    """Arguments for EnvironmentalData"""
    include: 'EnvironmentalDataIncludeFromEnvironmentalDataRecursive2'


class EnvironmentalDataArgsFromEnvironmentalDataRecursive2(TypedDict, total=False):
    """Arguments for EnvironmentalData"""
    include: 'EnvironmentalDataIncludeFromEnvironmentalDataRecursive3'


class EnvironmentalDataArgsFromEnvironmentalDataRecursive3(TypedDict, total=False):
    """Arguments for EnvironmentalData"""
    include: 'EnvironmentalDataIncludeFromEnvironmentalDataRecursive4'


class EnvironmentalDataArgsFromEnvironmentalDataRecursive4(TypedDict, total=False):
    """Arguments for EnvironmentalData"""
    
    

class FindManyEnvironmentalDataArgsFromEnvironmentalData(TypedDict, total=False):
    """Arguments for EnvironmentalData"""
    take: int
    skip: int
    order_by: Union['EnvironmentalDataOrderByInput', List['EnvironmentalDataOrderByInput']]
    where: 'EnvironmentalDataWhereInput'
    cursor: 'EnvironmentalDataWhereUniqueInput'
    distinct: List['EnvironmentalDataScalarFieldKeys']
    include: 'EnvironmentalDataIncludeFromEnvironmentalDataRecursive1'


class FindManyEnvironmentalDataArgsFromEnvironmentalDataRecursive1(TypedDict, total=False):
    """Arguments for EnvironmentalData"""
    take: int
    skip: int
    order_by: Union['EnvironmentalDataOrderByInput', List['EnvironmentalDataOrderByInput']]
    where: 'EnvironmentalDataWhereInput'
    cursor: 'EnvironmentalDataWhereUniqueInput'
    distinct: List['EnvironmentalDataScalarFieldKeys']
    include: 'EnvironmentalDataIncludeFromEnvironmentalDataRecursive2'


class FindManyEnvironmentalDataArgsFromEnvironmentalDataRecursive2(TypedDict, total=False):
    """Arguments for EnvironmentalData"""
    take: int
    skip: int
    order_by: Union['EnvironmentalDataOrderByInput', List['EnvironmentalDataOrderByInput']]
    where: 'EnvironmentalDataWhereInput'
    cursor: 'EnvironmentalDataWhereUniqueInput'
    distinct: List['EnvironmentalDataScalarFieldKeys']
    include: 'EnvironmentalDataIncludeFromEnvironmentalDataRecursive3'


class FindManyEnvironmentalDataArgsFromEnvironmentalDataRecursive3(TypedDict, total=False):
    """Arguments for EnvironmentalData"""
    take: int
    skip: int
    order_by: Union['EnvironmentalDataOrderByInput', List['EnvironmentalDataOrderByInput']]
    where: 'EnvironmentalDataWhereInput'
    cursor: 'EnvironmentalDataWhereUniqueInput'
    distinct: List['EnvironmentalDataScalarFieldKeys']
    include: 'EnvironmentalDataIncludeFromEnvironmentalDataRecursive4'


class FindManyEnvironmentalDataArgsFromEnvironmentalDataRecursive4(TypedDict, total=False):
    """Arguments for EnvironmentalData"""
    take: int
    skip: int
    order_by: Union['EnvironmentalDataOrderByInput', List['EnvironmentalDataOrderByInput']]
    where: 'EnvironmentalDataWhereInput'
    cursor: 'EnvironmentalDataWhereUniqueInput'
    distinct: List['EnvironmentalDataScalarFieldKeys']
    
    

class EventIncludeFromEnvironmentalData(TypedDict, total=False):
    """Relational arguments for EnvironmentalData"""


class EventIncludeFromEnvironmentalDataRecursive1(TypedDict, total=False):
    """Relational arguments for EnvironmentalData"""


class EventIncludeFromEnvironmentalDataRecursive2(TypedDict, total=False):
    """Relational arguments for EnvironmentalData"""


class EventIncludeFromEnvironmentalDataRecursive3(TypedDict, total=False):
    """Relational arguments for EnvironmentalData"""


class EventIncludeFromEnvironmentalDataRecursive4(TypedDict, total=False):
    """Relational arguments for EnvironmentalData"""

    

class EventArgsFromEnvironmentalData(TypedDict, total=False):
    """Arguments for EnvironmentalData"""
    include: 'EventIncludeFromEventRecursive1'


class EventArgsFromEnvironmentalDataRecursive1(TypedDict, total=False):
    """Arguments for EnvironmentalData"""
    include: 'EventIncludeFromEventRecursive2'


class EventArgsFromEnvironmentalDataRecursive2(TypedDict, total=False):
    """Arguments for EnvironmentalData"""
    include: 'EventIncludeFromEventRecursive3'


class EventArgsFromEnvironmentalDataRecursive3(TypedDict, total=False):
    """Arguments for EnvironmentalData"""
    include: 'EventIncludeFromEventRecursive4'


class EventArgsFromEnvironmentalDataRecursive4(TypedDict, total=False):
    """Arguments for EnvironmentalData"""
    
    

class FindManyEventArgsFromEnvironmentalData(TypedDict, total=False):
    """Arguments for EnvironmentalData"""
    take: int
    skip: int
    order_by: Union['EventOrderByInput', List['EventOrderByInput']]
    where: 'EventWhereInput'
    cursor: 'EventWhereUniqueInput'
    distinct: List['EventScalarFieldKeys']
    include: 'EventIncludeFromEventRecursive1'


class FindManyEventArgsFromEnvironmentalDataRecursive1(TypedDict, total=False):
    """Arguments for EnvironmentalData"""
    take: int
    skip: int
    order_by: Union['EventOrderByInput', List['EventOrderByInput']]
    where: 'EventWhereInput'
    cursor: 'EventWhereUniqueInput'
    distinct: List['EventScalarFieldKeys']
    include: 'EventIncludeFromEventRecursive2'


class FindManyEventArgsFromEnvironmentalDataRecursive2(TypedDict, total=False):
    """Arguments for EnvironmentalData"""
    take: int
    skip: int
    order_by: Union['EventOrderByInput', List['EventOrderByInput']]
    where: 'EventWhereInput'
    cursor: 'EventWhereUniqueInput'
    distinct: List['EventScalarFieldKeys']
    include: 'EventIncludeFromEventRecursive3'


class FindManyEventArgsFromEnvironmentalDataRecursive3(TypedDict, total=False):
    """Arguments for EnvironmentalData"""
    take: int
    skip: int
    order_by: Union['EventOrderByInput', List['EventOrderByInput']]
    where: 'EventWhereInput'
    cursor: 'EventWhereUniqueInput'
    distinct: List['EventScalarFieldKeys']
    include: 'EventIncludeFromEventRecursive4'


class FindManyEventArgsFromEnvironmentalDataRecursive4(TypedDict, total=False):
    """Arguments for EnvironmentalData"""
    take: int
    skip: int
    order_by: Union['EventOrderByInput', List['EventOrderByInput']]
    where: 'EventWhereInput'
    cursor: 'EventWhereUniqueInput'
    distinct: List['EventScalarFieldKeys']
    
    

class ForecastIncludeFromEnvironmentalData(TypedDict, total=False):
    """Relational arguments for EnvironmentalData"""


class ForecastIncludeFromEnvironmentalDataRecursive1(TypedDict, total=False):
    """Relational arguments for EnvironmentalData"""


class ForecastIncludeFromEnvironmentalDataRecursive2(TypedDict, total=False):
    """Relational arguments for EnvironmentalData"""


class ForecastIncludeFromEnvironmentalDataRecursive3(TypedDict, total=False):
    """Relational arguments for EnvironmentalData"""


class ForecastIncludeFromEnvironmentalDataRecursive4(TypedDict, total=False):
    """Relational arguments for EnvironmentalData"""

    

class ForecastArgsFromEnvironmentalData(TypedDict, total=False):
    """Arguments for EnvironmentalData"""
    include: 'ForecastIncludeFromForecastRecursive1'


class ForecastArgsFromEnvironmentalDataRecursive1(TypedDict, total=False):
    """Arguments for EnvironmentalData"""
    include: 'ForecastIncludeFromForecastRecursive2'


class ForecastArgsFromEnvironmentalDataRecursive2(TypedDict, total=False):
    """Arguments for EnvironmentalData"""
    include: 'ForecastIncludeFromForecastRecursive3'


class ForecastArgsFromEnvironmentalDataRecursive3(TypedDict, total=False):
    """Arguments for EnvironmentalData"""
    include: 'ForecastIncludeFromForecastRecursive4'


class ForecastArgsFromEnvironmentalDataRecursive4(TypedDict, total=False):
    """Arguments for EnvironmentalData"""
    
    

class FindManyForecastArgsFromEnvironmentalData(TypedDict, total=False):
    """Arguments for EnvironmentalData"""
    take: int
    skip: int
    order_by: Union['ForecastOrderByInput', List['ForecastOrderByInput']]
    where: 'ForecastWhereInput'
    cursor: 'ForecastWhereUniqueInput'
    distinct: List['ForecastScalarFieldKeys']
    include: 'ForecastIncludeFromForecastRecursive1'


class FindManyForecastArgsFromEnvironmentalDataRecursive1(TypedDict, total=False):
    """Arguments for EnvironmentalData"""
    take: int
    skip: int
    order_by: Union['ForecastOrderByInput', List['ForecastOrderByInput']]
    where: 'ForecastWhereInput'
    cursor: 'ForecastWhereUniqueInput'
    distinct: List['ForecastScalarFieldKeys']
    include: 'ForecastIncludeFromForecastRecursive2'


class FindManyForecastArgsFromEnvironmentalDataRecursive2(TypedDict, total=False):
    """Arguments for EnvironmentalData"""
    take: int
    skip: int
    order_by: Union['ForecastOrderByInput', List['ForecastOrderByInput']]
    where: 'ForecastWhereInput'
    cursor: 'ForecastWhereUniqueInput'
    distinct: List['ForecastScalarFieldKeys']
    include: 'ForecastIncludeFromForecastRecursive3'


class FindManyForecastArgsFromEnvironmentalDataRecursive3(TypedDict, total=False):
    """Arguments for EnvironmentalData"""
    take: int
    skip: int
    order_by: Union['ForecastOrderByInput', List['ForecastOrderByInput']]
    where: 'ForecastWhereInput'
    cursor: 'ForecastWhereUniqueInput'
    distinct: List['ForecastScalarFieldKeys']
    include: 'ForecastIncludeFromForecastRecursive4'


class FindManyForecastArgsFromEnvironmentalDataRecursive4(TypedDict, total=False):
    """Arguments for EnvironmentalData"""
    take: int
    skip: int
    order_by: Union['ForecastOrderByInput', List['ForecastOrderByInput']]
    where: 'ForecastWhereInput'
    cursor: 'ForecastWhereUniqueInput'
    distinct: List['ForecastScalarFieldKeys']
    
    

class IncidentIncludeFromEnvironmentalData(TypedDict, total=False):
    """Relational arguments for EnvironmentalData"""


class IncidentIncludeFromEnvironmentalDataRecursive1(TypedDict, total=False):
    """Relational arguments for EnvironmentalData"""


class IncidentIncludeFromEnvironmentalDataRecursive2(TypedDict, total=False):
    """Relational arguments for EnvironmentalData"""


class IncidentIncludeFromEnvironmentalDataRecursive3(TypedDict, total=False):
    """Relational arguments for EnvironmentalData"""


class IncidentIncludeFromEnvironmentalDataRecursive4(TypedDict, total=False):
    """Relational arguments for EnvironmentalData"""

    

class IncidentArgsFromEnvironmentalData(TypedDict, total=False):
    """Arguments for EnvironmentalData"""
    include: 'IncidentIncludeFromIncidentRecursive1'


class IncidentArgsFromEnvironmentalDataRecursive1(TypedDict, total=False):
    """Arguments for EnvironmentalData"""
    include: 'IncidentIncludeFromIncidentRecursive2'


class IncidentArgsFromEnvironmentalDataRecursive2(TypedDict, total=False):
    """Arguments for EnvironmentalData"""
    include: 'IncidentIncludeFromIncidentRecursive3'


class IncidentArgsFromEnvironmentalDataRecursive3(TypedDict, total=False):
    """Arguments for EnvironmentalData"""
    include: 'IncidentIncludeFromIncidentRecursive4'


class IncidentArgsFromEnvironmentalDataRecursive4(TypedDict, total=False):
    """Arguments for EnvironmentalData"""
    
    

class FindManyIncidentArgsFromEnvironmentalData(TypedDict, total=False):
    """Arguments for EnvironmentalData"""
    take: int
    skip: int
    order_by: Union['IncidentOrderByInput', List['IncidentOrderByInput']]
    where: 'IncidentWhereInput'
    cursor: 'IncidentWhereUniqueInput'
    distinct: List['IncidentScalarFieldKeys']
    include: 'IncidentIncludeFromIncidentRecursive1'


class FindManyIncidentArgsFromEnvironmentalDataRecursive1(TypedDict, total=False):
    """Arguments for EnvironmentalData"""
    take: int
    skip: int
    order_by: Union['IncidentOrderByInput', List['IncidentOrderByInput']]
    where: 'IncidentWhereInput'
    cursor: 'IncidentWhereUniqueInput'
    distinct: List['IncidentScalarFieldKeys']
    include: 'IncidentIncludeFromIncidentRecursive2'


class FindManyIncidentArgsFromEnvironmentalDataRecursive2(TypedDict, total=False):
    """Arguments for EnvironmentalData"""
    take: int
    skip: int
    order_by: Union['IncidentOrderByInput', List['IncidentOrderByInput']]
    where: 'IncidentWhereInput'
    cursor: 'IncidentWhereUniqueInput'
    distinct: List['IncidentScalarFieldKeys']
    include: 'IncidentIncludeFromIncidentRecursive3'


class FindManyIncidentArgsFromEnvironmentalDataRecursive3(TypedDict, total=False):
    """Arguments for EnvironmentalData"""
    take: int
    skip: int
    order_by: Union['IncidentOrderByInput', List['IncidentOrderByInput']]
    where: 'IncidentWhereInput'
    cursor: 'IncidentWhereUniqueInput'
    distinct: List['IncidentScalarFieldKeys']
    include: 'IncidentIncludeFromIncidentRecursive4'


class FindManyIncidentArgsFromEnvironmentalDataRecursive4(TypedDict, total=False):
    """Arguments for EnvironmentalData"""
    take: int
    skip: int
    order_by: Union['IncidentOrderByInput', List['IncidentOrderByInput']]
    where: 'IncidentWhereInput'
    cursor: 'IncidentWhereUniqueInput'
    distinct: List['IncidentScalarFieldKeys']
    
    

class NotificationIncludeFromEnvironmentalData(TypedDict, total=False):
    """Relational arguments for EnvironmentalData"""


class NotificationIncludeFromEnvironmentalDataRecursive1(TypedDict, total=False):
    """Relational arguments for EnvironmentalData"""


class NotificationIncludeFromEnvironmentalDataRecursive2(TypedDict, total=False):
    """Relational arguments for EnvironmentalData"""


class NotificationIncludeFromEnvironmentalDataRecursive3(TypedDict, total=False):
    """Relational arguments for EnvironmentalData"""


class NotificationIncludeFromEnvironmentalDataRecursive4(TypedDict, total=False):
    """Relational arguments for EnvironmentalData"""

    

class NotificationArgsFromEnvironmentalData(TypedDict, total=False):
    """Arguments for EnvironmentalData"""
    include: 'NotificationIncludeFromNotificationRecursive1'


class NotificationArgsFromEnvironmentalDataRecursive1(TypedDict, total=False):
    """Arguments for EnvironmentalData"""
    include: 'NotificationIncludeFromNotificationRecursive2'


class NotificationArgsFromEnvironmentalDataRecursive2(TypedDict, total=False):
    """Arguments for EnvironmentalData"""
    include: 'NotificationIncludeFromNotificationRecursive3'


class NotificationArgsFromEnvironmentalDataRecursive3(TypedDict, total=False):
    """Arguments for EnvironmentalData"""
    include: 'NotificationIncludeFromNotificationRecursive4'


class NotificationArgsFromEnvironmentalDataRecursive4(TypedDict, total=False):
    """Arguments for EnvironmentalData"""
    
    

class FindManyNotificationArgsFromEnvironmentalData(TypedDict, total=False):
    """Arguments for EnvironmentalData"""
    take: int
    skip: int
    order_by: Union['NotificationOrderByInput', List['NotificationOrderByInput']]
    where: 'NotificationWhereInput'
    cursor: 'NotificationWhereUniqueInput'
    distinct: List['NotificationScalarFieldKeys']
    include: 'NotificationIncludeFromNotificationRecursive1'


class FindManyNotificationArgsFromEnvironmentalDataRecursive1(TypedDict, total=False):
    """Arguments for EnvironmentalData"""
    take: int
    skip: int
    order_by: Union['NotificationOrderByInput', List['NotificationOrderByInput']]
    where: 'NotificationWhereInput'
    cursor: 'NotificationWhereUniqueInput'
    distinct: List['NotificationScalarFieldKeys']
    include: 'NotificationIncludeFromNotificationRecursive2'


class FindManyNotificationArgsFromEnvironmentalDataRecursive2(TypedDict, total=False):
    """Arguments for EnvironmentalData"""
    take: int
    skip: int
    order_by: Union['NotificationOrderByInput', List['NotificationOrderByInput']]
    where: 'NotificationWhereInput'
    cursor: 'NotificationWhereUniqueInput'
    distinct: List['NotificationScalarFieldKeys']
    include: 'NotificationIncludeFromNotificationRecursive3'


class FindManyNotificationArgsFromEnvironmentalDataRecursive3(TypedDict, total=False):
    """Arguments for EnvironmentalData"""
    take: int
    skip: int
    order_by: Union['NotificationOrderByInput', List['NotificationOrderByInput']]
    where: 'NotificationWhereInput'
    cursor: 'NotificationWhereUniqueInput'
    distinct: List['NotificationScalarFieldKeys']
    include: 'NotificationIncludeFromNotificationRecursive4'


class FindManyNotificationArgsFromEnvironmentalDataRecursive4(TypedDict, total=False):
    """Arguments for EnvironmentalData"""
    take: int
    skip: int
    order_by: Union['NotificationOrderByInput', List['NotificationOrderByInput']]
    where: 'NotificationWhereInput'
    cursor: 'NotificationWhereUniqueInput'
    distinct: List['NotificationScalarFieldKeys']
    
    

class ScenarioIncludeFromEnvironmentalData(TypedDict, total=False):
    """Relational arguments for EnvironmentalData"""


class ScenarioIncludeFromEnvironmentalDataRecursive1(TypedDict, total=False):
    """Relational arguments for EnvironmentalData"""


class ScenarioIncludeFromEnvironmentalDataRecursive2(TypedDict, total=False):
    """Relational arguments for EnvironmentalData"""


class ScenarioIncludeFromEnvironmentalDataRecursive3(TypedDict, total=False):
    """Relational arguments for EnvironmentalData"""


class ScenarioIncludeFromEnvironmentalDataRecursive4(TypedDict, total=False):
    """Relational arguments for EnvironmentalData"""

    

class ScenarioArgsFromEnvironmentalData(TypedDict, total=False):
    """Arguments for EnvironmentalData"""
    include: 'ScenarioIncludeFromScenarioRecursive1'


class ScenarioArgsFromEnvironmentalDataRecursive1(TypedDict, total=False):
    """Arguments for EnvironmentalData"""
    include: 'ScenarioIncludeFromScenarioRecursive2'


class ScenarioArgsFromEnvironmentalDataRecursive2(TypedDict, total=False):
    """Arguments for EnvironmentalData"""
    include: 'ScenarioIncludeFromScenarioRecursive3'


class ScenarioArgsFromEnvironmentalDataRecursive3(TypedDict, total=False):
    """Arguments for EnvironmentalData"""
    include: 'ScenarioIncludeFromScenarioRecursive4'


class ScenarioArgsFromEnvironmentalDataRecursive4(TypedDict, total=False):
    """Arguments for EnvironmentalData"""
    
    

class FindManyScenarioArgsFromEnvironmentalData(TypedDict, total=False):
    """Arguments for EnvironmentalData"""
    take: int
    skip: int
    order_by: Union['ScenarioOrderByInput', List['ScenarioOrderByInput']]
    where: 'ScenarioWhereInput'
    cursor: 'ScenarioWhereUniqueInput'
    distinct: List['ScenarioScalarFieldKeys']
    include: 'ScenarioIncludeFromScenarioRecursive1'


class FindManyScenarioArgsFromEnvironmentalDataRecursive1(TypedDict, total=False):
    """Arguments for EnvironmentalData"""
    take: int
    skip: int
    order_by: Union['ScenarioOrderByInput', List['ScenarioOrderByInput']]
    where: 'ScenarioWhereInput'
    cursor: 'ScenarioWhereUniqueInput'
    distinct: List['ScenarioScalarFieldKeys']
    include: 'ScenarioIncludeFromScenarioRecursive2'


class FindManyScenarioArgsFromEnvironmentalDataRecursive2(TypedDict, total=False):
    """Arguments for EnvironmentalData"""
    take: int
    skip: int
    order_by: Union['ScenarioOrderByInput', List['ScenarioOrderByInput']]
    where: 'ScenarioWhereInput'
    cursor: 'ScenarioWhereUniqueInput'
    distinct: List['ScenarioScalarFieldKeys']
    include: 'ScenarioIncludeFromScenarioRecursive3'


class FindManyScenarioArgsFromEnvironmentalDataRecursive3(TypedDict, total=False):
    """Arguments for EnvironmentalData"""
    take: int
    skip: int
    order_by: Union['ScenarioOrderByInput', List['ScenarioOrderByInput']]
    where: 'ScenarioWhereInput'
    cursor: 'ScenarioWhereUniqueInput'
    distinct: List['ScenarioScalarFieldKeys']
    include: 'ScenarioIncludeFromScenarioRecursive4'


class FindManyScenarioArgsFromEnvironmentalDataRecursive4(TypedDict, total=False):
    """Arguments for EnvironmentalData"""
    take: int
    skip: int
    order_by: Union['ScenarioOrderByInput', List['ScenarioOrderByInput']]
    where: 'ScenarioWhereInput'
    cursor: 'ScenarioWhereUniqueInput'
    distinct: List['ScenarioScalarFieldKeys']
    
    

class SocialReportIncludeFromEnvironmentalData(TypedDict, total=False):
    """Relational arguments for EnvironmentalData"""


class SocialReportIncludeFromEnvironmentalDataRecursive1(TypedDict, total=False):
    """Relational arguments for EnvironmentalData"""


class SocialReportIncludeFromEnvironmentalDataRecursive2(TypedDict, total=False):
    """Relational arguments for EnvironmentalData"""


class SocialReportIncludeFromEnvironmentalDataRecursive3(TypedDict, total=False):
    """Relational arguments for EnvironmentalData"""


class SocialReportIncludeFromEnvironmentalDataRecursive4(TypedDict, total=False):
    """Relational arguments for EnvironmentalData"""

    

class SocialReportArgsFromEnvironmentalData(TypedDict, total=False):
    """Arguments for EnvironmentalData"""
    include: 'SocialReportIncludeFromSocialReportRecursive1'


class SocialReportArgsFromEnvironmentalDataRecursive1(TypedDict, total=False):
    """Arguments for EnvironmentalData"""
    include: 'SocialReportIncludeFromSocialReportRecursive2'


class SocialReportArgsFromEnvironmentalDataRecursive2(TypedDict, total=False):
    """Arguments for EnvironmentalData"""
    include: 'SocialReportIncludeFromSocialReportRecursive3'


class SocialReportArgsFromEnvironmentalDataRecursive3(TypedDict, total=False):
    """Arguments for EnvironmentalData"""
    include: 'SocialReportIncludeFromSocialReportRecursive4'


class SocialReportArgsFromEnvironmentalDataRecursive4(TypedDict, total=False):
    """Arguments for EnvironmentalData"""
    
    

class FindManySocialReportArgsFromEnvironmentalData(TypedDict, total=False):
    """Arguments for EnvironmentalData"""
    take: int
    skip: int
    order_by: Union['SocialReportOrderByInput', List['SocialReportOrderByInput']]
    where: 'SocialReportWhereInput'
    cursor: 'SocialReportWhereUniqueInput'
    distinct: List['SocialReportScalarFieldKeys']
    include: 'SocialReportIncludeFromSocialReportRecursive1'


class FindManySocialReportArgsFromEnvironmentalDataRecursive1(TypedDict, total=False):
    """Arguments for EnvironmentalData"""
    take: int
    skip: int
    order_by: Union['SocialReportOrderByInput', List['SocialReportOrderByInput']]
    where: 'SocialReportWhereInput'
    cursor: 'SocialReportWhereUniqueInput'
    distinct: List['SocialReportScalarFieldKeys']
    include: 'SocialReportIncludeFromSocialReportRecursive2'


class FindManySocialReportArgsFromEnvironmentalDataRecursive2(TypedDict, total=False):
    """Arguments for EnvironmentalData"""
    take: int
    skip: int
    order_by: Union['SocialReportOrderByInput', List['SocialReportOrderByInput']]
    where: 'SocialReportWhereInput'
    cursor: 'SocialReportWhereUniqueInput'
    distinct: List['SocialReportScalarFieldKeys']
    include: 'SocialReportIncludeFromSocialReportRecursive3'


class FindManySocialReportArgsFromEnvironmentalDataRecursive3(TypedDict, total=False):
    """Arguments for EnvironmentalData"""
    take: int
    skip: int
    order_by: Union['SocialReportOrderByInput', List['SocialReportOrderByInput']]
    where: 'SocialReportWhereInput'
    cursor: 'SocialReportWhereUniqueInput'
    distinct: List['SocialReportScalarFieldKeys']
    include: 'SocialReportIncludeFromSocialReportRecursive4'


class FindManySocialReportArgsFromEnvironmentalDataRecursive4(TypedDict, total=False):
    """Arguments for EnvironmentalData"""
    take: int
    skip: int
    order_by: Union['SocialReportOrderByInput', List['SocialReportOrderByInput']]
    where: 'SocialReportWhereInput'
    cursor: 'SocialReportWhereUniqueInput'
    distinct: List['SocialReportScalarFieldKeys']
    
    

class TrafficDataIncludeFromEnvironmentalData(TypedDict, total=False):
    """Relational arguments for EnvironmentalData"""


class TrafficDataIncludeFromEnvironmentalDataRecursive1(TypedDict, total=False):
    """Relational arguments for EnvironmentalData"""


class TrafficDataIncludeFromEnvironmentalDataRecursive2(TypedDict, total=False):
    """Relational arguments for EnvironmentalData"""


class TrafficDataIncludeFromEnvironmentalDataRecursive3(TypedDict, total=False):
    """Relational arguments for EnvironmentalData"""


class TrafficDataIncludeFromEnvironmentalDataRecursive4(TypedDict, total=False):
    """Relational arguments for EnvironmentalData"""

    

class TrafficDataArgsFromEnvironmentalData(TypedDict, total=False):
    """Arguments for EnvironmentalData"""
    include: 'TrafficDataIncludeFromTrafficDataRecursive1'


class TrafficDataArgsFromEnvironmentalDataRecursive1(TypedDict, total=False):
    """Arguments for EnvironmentalData"""
    include: 'TrafficDataIncludeFromTrafficDataRecursive2'


class TrafficDataArgsFromEnvironmentalDataRecursive2(TypedDict, total=False):
    """Arguments for EnvironmentalData"""
    include: 'TrafficDataIncludeFromTrafficDataRecursive3'


class TrafficDataArgsFromEnvironmentalDataRecursive3(TypedDict, total=False):
    """Arguments for EnvironmentalData"""
    include: 'TrafficDataIncludeFromTrafficDataRecursive4'


class TrafficDataArgsFromEnvironmentalDataRecursive4(TypedDict, total=False):
    """Arguments for EnvironmentalData"""
    
    

class FindManyTrafficDataArgsFromEnvironmentalData(TypedDict, total=False):
    """Arguments for EnvironmentalData"""
    take: int
    skip: int
    order_by: Union['TrafficDataOrderByInput', List['TrafficDataOrderByInput']]
    where: 'TrafficDataWhereInput'
    cursor: 'TrafficDataWhereUniqueInput'
    distinct: List['TrafficDataScalarFieldKeys']
    include: 'TrafficDataIncludeFromTrafficDataRecursive1'


class FindManyTrafficDataArgsFromEnvironmentalDataRecursive1(TypedDict, total=False):
    """Arguments for EnvironmentalData"""
    take: int
    skip: int
    order_by: Union['TrafficDataOrderByInput', List['TrafficDataOrderByInput']]
    where: 'TrafficDataWhereInput'
    cursor: 'TrafficDataWhereUniqueInput'
    distinct: List['TrafficDataScalarFieldKeys']
    include: 'TrafficDataIncludeFromTrafficDataRecursive2'


class FindManyTrafficDataArgsFromEnvironmentalDataRecursive2(TypedDict, total=False):
    """Arguments for EnvironmentalData"""
    take: int
    skip: int
    order_by: Union['TrafficDataOrderByInput', List['TrafficDataOrderByInput']]
    where: 'TrafficDataWhereInput'
    cursor: 'TrafficDataWhereUniqueInput'
    distinct: List['TrafficDataScalarFieldKeys']
    include: 'TrafficDataIncludeFromTrafficDataRecursive3'


class FindManyTrafficDataArgsFromEnvironmentalDataRecursive3(TypedDict, total=False):
    """Arguments for EnvironmentalData"""
    take: int
    skip: int
    order_by: Union['TrafficDataOrderByInput', List['TrafficDataOrderByInput']]
    where: 'TrafficDataWhereInput'
    cursor: 'TrafficDataWhereUniqueInput'
    distinct: List['TrafficDataScalarFieldKeys']
    include: 'TrafficDataIncludeFromTrafficDataRecursive4'


class FindManyTrafficDataArgsFromEnvironmentalDataRecursive4(TypedDict, total=False):
    """Arguments for EnvironmentalData"""
    take: int
    skip: int
    order_by: Union['TrafficDataOrderByInput', List['TrafficDataOrderByInput']]
    where: 'TrafficDataWhereInput'
    cursor: 'TrafficDataWhereUniqueInput'
    distinct: List['TrafficDataScalarFieldKeys']
    
    

class TrafficLightIncludeFromEnvironmentalData(TypedDict, total=False):
    """Relational arguments for EnvironmentalData"""


class TrafficLightIncludeFromEnvironmentalDataRecursive1(TypedDict, total=False):
    """Relational arguments for EnvironmentalData"""


class TrafficLightIncludeFromEnvironmentalDataRecursive2(TypedDict, total=False):
    """Relational arguments for EnvironmentalData"""


class TrafficLightIncludeFromEnvironmentalDataRecursive3(TypedDict, total=False):
    """Relational arguments for EnvironmentalData"""


class TrafficLightIncludeFromEnvironmentalDataRecursive4(TypedDict, total=False):
    """Relational arguments for EnvironmentalData"""

    

class TrafficLightArgsFromEnvironmentalData(TypedDict, total=False):
    """Arguments for EnvironmentalData"""
    include: 'TrafficLightIncludeFromTrafficLightRecursive1'


class TrafficLightArgsFromEnvironmentalDataRecursive1(TypedDict, total=False):
    """Arguments for EnvironmentalData"""
    include: 'TrafficLightIncludeFromTrafficLightRecursive2'


class TrafficLightArgsFromEnvironmentalDataRecursive2(TypedDict, total=False):
    """Arguments for EnvironmentalData"""
    include: 'TrafficLightIncludeFromTrafficLightRecursive3'


class TrafficLightArgsFromEnvironmentalDataRecursive3(TypedDict, total=False):
    """Arguments for EnvironmentalData"""
    include: 'TrafficLightIncludeFromTrafficLightRecursive4'


class TrafficLightArgsFromEnvironmentalDataRecursive4(TypedDict, total=False):
    """Arguments for EnvironmentalData"""
    
    

class FindManyTrafficLightArgsFromEnvironmentalData(TypedDict, total=False):
    """Arguments for EnvironmentalData"""
    take: int
    skip: int
    order_by: Union['TrafficLightOrderByInput', List['TrafficLightOrderByInput']]
    where: 'TrafficLightWhereInput'
    cursor: 'TrafficLightWhereUniqueInput'
    distinct: List['TrafficLightScalarFieldKeys']
    include: 'TrafficLightIncludeFromTrafficLightRecursive1'


class FindManyTrafficLightArgsFromEnvironmentalDataRecursive1(TypedDict, total=False):
    """Arguments for EnvironmentalData"""
    take: int
    skip: int
    order_by: Union['TrafficLightOrderByInput', List['TrafficLightOrderByInput']]
    where: 'TrafficLightWhereInput'
    cursor: 'TrafficLightWhereUniqueInput'
    distinct: List['TrafficLightScalarFieldKeys']
    include: 'TrafficLightIncludeFromTrafficLightRecursive2'


class FindManyTrafficLightArgsFromEnvironmentalDataRecursive2(TypedDict, total=False):
    """Arguments for EnvironmentalData"""
    take: int
    skip: int
    order_by: Union['TrafficLightOrderByInput', List['TrafficLightOrderByInput']]
    where: 'TrafficLightWhereInput'
    cursor: 'TrafficLightWhereUniqueInput'
    distinct: List['TrafficLightScalarFieldKeys']
    include: 'TrafficLightIncludeFromTrafficLightRecursive3'


class FindManyTrafficLightArgsFromEnvironmentalDataRecursive3(TypedDict, total=False):
    """Arguments for EnvironmentalData"""
    take: int
    skip: int
    order_by: Union['TrafficLightOrderByInput', List['TrafficLightOrderByInput']]
    where: 'TrafficLightWhereInput'
    cursor: 'TrafficLightWhereUniqueInput'
    distinct: List['TrafficLightScalarFieldKeys']
    include: 'TrafficLightIncludeFromTrafficLightRecursive4'


class FindManyTrafficLightArgsFromEnvironmentalDataRecursive4(TypedDict, total=False):
    """Arguments for EnvironmentalData"""
    take: int
    skip: int
    order_by: Union['TrafficLightOrderByInput', List['TrafficLightOrderByInput']]
    where: 'TrafficLightWhereInput'
    cursor: 'TrafficLightWhereUniqueInput'
    distinct: List['TrafficLightScalarFieldKeys']
    


FindManyEnvironmentalDataArgs = FindManyEnvironmentalDataArgsFromEnvironmentalData
FindFirstEnvironmentalDataArgs = FindManyEnvironmentalDataArgsFromEnvironmentalData


    

class EnvironmentalDataWhereInput(TypedDict, total=False):
    """EnvironmentalData arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    timestamp: Union[datetime.datetime, 'types.DateTimeFilter']
    location: Union['fields.Base64', 'types.BytesFilter']
    emissionLevel: Union[_float, 'types.FloatFilter']

    # should be noted that AND and NOT should be Union['EnvironmentalDataWhereInputRecursive1', List['EnvironmentalDataWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['EnvironmentalDataWhereInputRecursive1']
    OR: List['EnvironmentalDataWhereInputRecursive1']
    NOT: List['EnvironmentalDataWhereInputRecursive1']


class EnvironmentalDataWhereInputRecursive1(TypedDict, total=False):
    """EnvironmentalData arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    timestamp: Union[datetime.datetime, 'types.DateTimeFilter']
    location: Union['fields.Base64', 'types.BytesFilter']
    emissionLevel: Union[_float, 'types.FloatFilter']

    # should be noted that AND and NOT should be Union['EnvironmentalDataWhereInputRecursive2', List['EnvironmentalDataWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['EnvironmentalDataWhereInputRecursive2']
    OR: List['EnvironmentalDataWhereInputRecursive2']
    NOT: List['EnvironmentalDataWhereInputRecursive2']


class EnvironmentalDataWhereInputRecursive2(TypedDict, total=False):
    """EnvironmentalData arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    timestamp: Union[datetime.datetime, 'types.DateTimeFilter']
    location: Union['fields.Base64', 'types.BytesFilter']
    emissionLevel: Union[_float, 'types.FloatFilter']

    # should be noted that AND and NOT should be Union['EnvironmentalDataWhereInputRecursive3', List['EnvironmentalDataWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['EnvironmentalDataWhereInputRecursive3']
    OR: List['EnvironmentalDataWhereInputRecursive3']
    NOT: List['EnvironmentalDataWhereInputRecursive3']


class EnvironmentalDataWhereInputRecursive3(TypedDict, total=False):
    """EnvironmentalData arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    timestamp: Union[datetime.datetime, 'types.DateTimeFilter']
    location: Union['fields.Base64', 'types.BytesFilter']
    emissionLevel: Union[_float, 'types.FloatFilter']

    # should be noted that AND and NOT should be Union['EnvironmentalDataWhereInputRecursive4', List['EnvironmentalDataWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['EnvironmentalDataWhereInputRecursive4']
    OR: List['EnvironmentalDataWhereInputRecursive4']
    NOT: List['EnvironmentalDataWhereInputRecursive4']


class EnvironmentalDataWhereInputRecursive4(TypedDict, total=False):
    """EnvironmentalData arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    timestamp: Union[datetime.datetime, 'types.DateTimeFilter']
    location: Union['fields.Base64', 'types.BytesFilter']
    emissionLevel: Union[_float, 'types.FloatFilter']



# aggregate EnvironmentalData types


    

class EnvironmentalDataScalarWhereWithAggregatesInput(TypedDict, total=False):
    """EnvironmentalData arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    timestamp: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    location: Union['fields.Base64', 'types.BytesWithAggregatesFilter']
    emissionLevel: Union[_float, 'types.FloatWithAggregatesFilter']

    AND: List['EnvironmentalDataScalarWhereWithAggregatesInputRecursive1']
    OR: List['EnvironmentalDataScalarWhereWithAggregatesInputRecursive1']
    NOT: List['EnvironmentalDataScalarWhereWithAggregatesInputRecursive1']


class EnvironmentalDataScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """EnvironmentalData arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    timestamp: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    location: Union['fields.Base64', 'types.BytesWithAggregatesFilter']
    emissionLevel: Union[_float, 'types.FloatWithAggregatesFilter']

    AND: List['EnvironmentalDataScalarWhereWithAggregatesInputRecursive2']
    OR: List['EnvironmentalDataScalarWhereWithAggregatesInputRecursive2']
    NOT: List['EnvironmentalDataScalarWhereWithAggregatesInputRecursive2']


class EnvironmentalDataScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """EnvironmentalData arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    timestamp: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    location: Union['fields.Base64', 'types.BytesWithAggregatesFilter']
    emissionLevel: Union[_float, 'types.FloatWithAggregatesFilter']

    AND: List['EnvironmentalDataScalarWhereWithAggregatesInputRecursive3']
    OR: List['EnvironmentalDataScalarWhereWithAggregatesInputRecursive3']
    NOT: List['EnvironmentalDataScalarWhereWithAggregatesInputRecursive3']


class EnvironmentalDataScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """EnvironmentalData arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    timestamp: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    location: Union['fields.Base64', 'types.BytesWithAggregatesFilter']
    emissionLevel: Union[_float, 'types.FloatWithAggregatesFilter']

    AND: List['EnvironmentalDataScalarWhereWithAggregatesInputRecursive4']
    OR: List['EnvironmentalDataScalarWhereWithAggregatesInputRecursive4']
    NOT: List['EnvironmentalDataScalarWhereWithAggregatesInputRecursive4']


class EnvironmentalDataScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """EnvironmentalData arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    timestamp: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    location: Union['fields.Base64', 'types.BytesWithAggregatesFilter']
    emissionLevel: Union[_float, 'types.FloatWithAggregatesFilter']



class EnvironmentalDataGroupByOutput(TypedDict, total=False):
    id: _str
    timestamp: datetime.datetime
    location: 'fields.Base64'
    emissionLevel: _float
    _sum: 'EnvironmentalDataSumAggregateOutput'
    _avg: 'EnvironmentalDataAvgAggregateOutput'
    _min: 'EnvironmentalDataMinAggregateOutput'
    _max: 'EnvironmentalDataMaxAggregateOutput'
    _count: 'EnvironmentalDataCountAggregateOutput'


class EnvironmentalDataAvgAggregateOutput(TypedDict, total=False):
    """EnvironmentalData output for aggregating averages"""
    emissionLevel: float


class EnvironmentalDataSumAggregateOutput(TypedDict, total=False):
    """EnvironmentalData output for aggregating sums"""
    emissionLevel: _float


class EnvironmentalDataScalarAggregateOutput(TypedDict, total=False):
    """EnvironmentalData output including scalar fields"""
    id: _str
    timestamp: datetime.datetime
    location: 'fields.Base64'
    emissionLevel: _float


EnvironmentalDataMinAggregateOutput = EnvironmentalDataScalarAggregateOutput
EnvironmentalDataMaxAggregateOutput = EnvironmentalDataScalarAggregateOutput


class EnvironmentalDataMaxAggregateInput(TypedDict, total=False):
    """EnvironmentalData input for aggregating by max"""
    id: bool
    timestamp: bool
    location: bool
    emissionLevel: bool


class EnvironmentalDataMinAggregateInput(TypedDict, total=False):
    """EnvironmentalData input for aggregating by min"""
    id: bool
    timestamp: bool
    location: bool
    emissionLevel: bool


class EnvironmentalDataNumberAggregateInput(TypedDict, total=False):
    """EnvironmentalData input for aggregating numbers"""
    emissionLevel: bool


EnvironmentalDataAvgAggregateInput = EnvironmentalDataNumberAggregateInput
EnvironmentalDataSumAggregateInput = EnvironmentalDataNumberAggregateInput


EnvironmentalDataCountAggregateInput = TypedDict(
    'EnvironmentalDataCountAggregateInput',
    {
        'id': bool,
        'timestamp': bool,
        'location': bool,
        'emissionLevel': bool,
        '_all': bool,
    },
    total=False,
)

EnvironmentalDataCountAggregateOutput = TypedDict(
    'EnvironmentalDataCountAggregateOutput',
    {
        'id': int,
        'timestamp': int,
        'location': int,
        'emissionLevel': int,
        '_all': int,
    },
    total=False,
)


EnvironmentalDataKeys = Literal[
    'id',
    'timestamp',
    'location',
    'emissionLevel',
]
EnvironmentalDataScalarFieldKeys = Literal[
    'id',
    'timestamp',
    'location',
    'emissionLevel',
]
EnvironmentalDataScalarFieldKeysT = TypeVar('EnvironmentalDataScalarFieldKeysT', bound=EnvironmentalDataScalarFieldKeys)

EnvironmentalDataRelationalFieldKeys = _NoneType

# Event types

class EventOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the Event create method"""
    id: _str


class EventCreateInput(EventOptionalCreateInput):
    """Required arguments to the Event create method"""
    name: _str
    date: datetime.datetime
    location: 'fields.Base64'
    impactLevel: _int


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class EventOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the Event create method, without relations"""
    id: _str


class EventCreateWithoutRelationsInput(EventOptionalCreateWithoutRelationsInput):
    """Required arguments to the Event create method, without relations"""
    name: _str
    date: datetime.datetime
    location: 'fields.Base64'
    impactLevel: _int

class EventConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'EventCreateWithoutRelationsInput'
    where: 'EventWhereUniqueInput'

class EventCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'EventCreateWithoutRelationsInput'
    connect: 'EventWhereUniqueInput'
    connect_or_create: 'EventConnectOrCreateWithoutRelationsInput'


class EventCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['EventCreateWithoutRelationsInput', List['EventCreateWithoutRelationsInput']]
    connect: Union['EventWhereUniqueInput', List['EventWhereUniqueInput']]
    connect_or_create: Union['EventConnectOrCreateWithoutRelationsInput', List['EventConnectOrCreateWithoutRelationsInput']]

_EventWhereUnique_id_Input = TypedDict(
    '_EventWhereUnique_id_Input',
    {
        'id': '_str',
    },
    total=True
)

EventWhereUniqueInput = _EventWhereUnique_id_Input


class EventUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: _str
    name: _str
    date: datetime.datetime
    location: 'fields.Base64'
    impactLevel: Union[AtomicIntInput, _int]


class EventUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: _str
    name: _str
    date: datetime.datetime
    location: 'fields.Base64'
    impactLevel: Union[AtomicIntInput, _int]


class EventUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['EventCreateWithoutRelationsInput']
    connect: List['EventWhereUniqueInput']
    connect_or_create: List['EventConnectOrCreateWithoutRelationsInput']
    set: List['EventWhereUniqueInput']
    disconnect: List['EventWhereUniqueInput']
    delete: List['EventWhereUniqueInput']

    # TODO
    # update: List['EventUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['EventUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['EventScalarWhereInput']
    # upsert: List['EventUpserteWithWhereUniqueWithoutRelationsInput']


class EventUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'EventCreateWithoutRelationsInput'
    connect: 'EventWhereUniqueInput'
    connect_or_create: 'EventConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'EventUpdateInput'
    # upsert: 'EventUpsertWithoutRelationsInput'


class EventUpsertInput(TypedDict):
    create: 'EventCreateInput'
    update: 'EventUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_Event_id_OrderByInput = TypedDict(
    '_Event_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_Event_name_OrderByInput = TypedDict(
    '_Event_name_OrderByInput',
    {
        'name': 'SortOrder',
    },
    total=True
)

_Event_date_OrderByInput = TypedDict(
    '_Event_date_OrderByInput',
    {
        'date': 'SortOrder',
    },
    total=True
)

_Event_location_OrderByInput = TypedDict(
    '_Event_location_OrderByInput',
    {
        'location': 'SortOrder',
    },
    total=True
)

_Event_impactLevel_OrderByInput = TypedDict(
    '_Event_impactLevel_OrderByInput',
    {
        'impactLevel': 'SortOrder',
    },
    total=True
)

_Event_RelevanceInner = TypedDict(
    '_Event_RelevanceInner',
    {
        'fields': 'List[EventScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_Event_RelevanceOrderByInput = TypedDict(
    '_Event_RelevanceOrderByInput',
    {
        '_relevance': '_Event_RelevanceInner',
    },
    total=True
)

EventOrderByInput = Union[
    '_Event_id_OrderByInput',
    '_Event_name_OrderByInput',
    '_Event_date_OrderByInput',
    '_Event_location_OrderByInput',
    '_Event_impactLevel_OrderByInput',
    '_Event_RelevanceOrderByInput',
]



# recursive Event types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

EventRelationFilter = TypedDict(
    'EventRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class EventListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class EventInclude(TypedDict, total=False):
    """Event relational arguments"""


    

class AchievementIncludeFromEvent(TypedDict, total=False):
    """Relational arguments for Event"""


class AchievementIncludeFromEventRecursive1(TypedDict, total=False):
    """Relational arguments for Event"""


class AchievementIncludeFromEventRecursive2(TypedDict, total=False):
    """Relational arguments for Event"""


class AchievementIncludeFromEventRecursive3(TypedDict, total=False):
    """Relational arguments for Event"""


class AchievementIncludeFromEventRecursive4(TypedDict, total=False):
    """Relational arguments for Event"""

    

class AchievementArgsFromEvent(TypedDict, total=False):
    """Arguments for Event"""
    include: 'AchievementIncludeFromAchievementRecursive1'


class AchievementArgsFromEventRecursive1(TypedDict, total=False):
    """Arguments for Event"""
    include: 'AchievementIncludeFromAchievementRecursive2'


class AchievementArgsFromEventRecursive2(TypedDict, total=False):
    """Arguments for Event"""
    include: 'AchievementIncludeFromAchievementRecursive3'


class AchievementArgsFromEventRecursive3(TypedDict, total=False):
    """Arguments for Event"""
    include: 'AchievementIncludeFromAchievementRecursive4'


class AchievementArgsFromEventRecursive4(TypedDict, total=False):
    """Arguments for Event"""
    
    

class FindManyAchievementArgsFromEvent(TypedDict, total=False):
    """Arguments for Event"""
    take: int
    skip: int
    order_by: Union['AchievementOrderByInput', List['AchievementOrderByInput']]
    where: 'AchievementWhereInput'
    cursor: 'AchievementWhereUniqueInput'
    distinct: List['AchievementScalarFieldKeys']
    include: 'AchievementIncludeFromAchievementRecursive1'


class FindManyAchievementArgsFromEventRecursive1(TypedDict, total=False):
    """Arguments for Event"""
    take: int
    skip: int
    order_by: Union['AchievementOrderByInput', List['AchievementOrderByInput']]
    where: 'AchievementWhereInput'
    cursor: 'AchievementWhereUniqueInput'
    distinct: List['AchievementScalarFieldKeys']
    include: 'AchievementIncludeFromAchievementRecursive2'


class FindManyAchievementArgsFromEventRecursive2(TypedDict, total=False):
    """Arguments for Event"""
    take: int
    skip: int
    order_by: Union['AchievementOrderByInput', List['AchievementOrderByInput']]
    where: 'AchievementWhereInput'
    cursor: 'AchievementWhereUniqueInput'
    distinct: List['AchievementScalarFieldKeys']
    include: 'AchievementIncludeFromAchievementRecursive3'


class FindManyAchievementArgsFromEventRecursive3(TypedDict, total=False):
    """Arguments for Event"""
    take: int
    skip: int
    order_by: Union['AchievementOrderByInput', List['AchievementOrderByInput']]
    where: 'AchievementWhereInput'
    cursor: 'AchievementWhereUniqueInput'
    distinct: List['AchievementScalarFieldKeys']
    include: 'AchievementIncludeFromAchievementRecursive4'


class FindManyAchievementArgsFromEventRecursive4(TypedDict, total=False):
    """Arguments for Event"""
    take: int
    skip: int
    order_by: Union['AchievementOrderByInput', List['AchievementOrderByInput']]
    where: 'AchievementWhereInput'
    cursor: 'AchievementWhereUniqueInput'
    distinct: List['AchievementScalarFieldKeys']
    
    

class CameraIncludeFromEvent(TypedDict, total=False):
    """Relational arguments for Event"""


class CameraIncludeFromEventRecursive1(TypedDict, total=False):
    """Relational arguments for Event"""


class CameraIncludeFromEventRecursive2(TypedDict, total=False):
    """Relational arguments for Event"""


class CameraIncludeFromEventRecursive3(TypedDict, total=False):
    """Relational arguments for Event"""


class CameraIncludeFromEventRecursive4(TypedDict, total=False):
    """Relational arguments for Event"""

    

class CameraArgsFromEvent(TypedDict, total=False):
    """Arguments for Event"""
    include: 'CameraIncludeFromCameraRecursive1'


class CameraArgsFromEventRecursive1(TypedDict, total=False):
    """Arguments for Event"""
    include: 'CameraIncludeFromCameraRecursive2'


class CameraArgsFromEventRecursive2(TypedDict, total=False):
    """Arguments for Event"""
    include: 'CameraIncludeFromCameraRecursive3'


class CameraArgsFromEventRecursive3(TypedDict, total=False):
    """Arguments for Event"""
    include: 'CameraIncludeFromCameraRecursive4'


class CameraArgsFromEventRecursive4(TypedDict, total=False):
    """Arguments for Event"""
    
    

class FindManyCameraArgsFromEvent(TypedDict, total=False):
    """Arguments for Event"""
    take: int
    skip: int
    order_by: Union['CameraOrderByInput', List['CameraOrderByInput']]
    where: 'CameraWhereInput'
    cursor: 'CameraWhereUniqueInput'
    distinct: List['CameraScalarFieldKeys']
    include: 'CameraIncludeFromCameraRecursive1'


class FindManyCameraArgsFromEventRecursive1(TypedDict, total=False):
    """Arguments for Event"""
    take: int
    skip: int
    order_by: Union['CameraOrderByInput', List['CameraOrderByInput']]
    where: 'CameraWhereInput'
    cursor: 'CameraWhereUniqueInput'
    distinct: List['CameraScalarFieldKeys']
    include: 'CameraIncludeFromCameraRecursive2'


class FindManyCameraArgsFromEventRecursive2(TypedDict, total=False):
    """Arguments for Event"""
    take: int
    skip: int
    order_by: Union['CameraOrderByInput', List['CameraOrderByInput']]
    where: 'CameraWhereInput'
    cursor: 'CameraWhereUniqueInput'
    distinct: List['CameraScalarFieldKeys']
    include: 'CameraIncludeFromCameraRecursive3'


class FindManyCameraArgsFromEventRecursive3(TypedDict, total=False):
    """Arguments for Event"""
    take: int
    skip: int
    order_by: Union['CameraOrderByInput', List['CameraOrderByInput']]
    where: 'CameraWhereInput'
    cursor: 'CameraWhereUniqueInput'
    distinct: List['CameraScalarFieldKeys']
    include: 'CameraIncludeFromCameraRecursive4'


class FindManyCameraArgsFromEventRecursive4(TypedDict, total=False):
    """Arguments for Event"""
    take: int
    skip: int
    order_by: Union['CameraOrderByInput', List['CameraOrderByInput']]
    where: 'CameraWhereInput'
    cursor: 'CameraWhereUniqueInput'
    distinct: List['CameraScalarFieldKeys']
    
    

class EffectivenessIncludeFromEvent(TypedDict, total=False):
    """Relational arguments for Event"""


class EffectivenessIncludeFromEventRecursive1(TypedDict, total=False):
    """Relational arguments for Event"""


class EffectivenessIncludeFromEventRecursive2(TypedDict, total=False):
    """Relational arguments for Event"""


class EffectivenessIncludeFromEventRecursive3(TypedDict, total=False):
    """Relational arguments for Event"""


class EffectivenessIncludeFromEventRecursive4(TypedDict, total=False):
    """Relational arguments for Event"""

    

class EffectivenessArgsFromEvent(TypedDict, total=False):
    """Arguments for Event"""
    include: 'EffectivenessIncludeFromEffectivenessRecursive1'


class EffectivenessArgsFromEventRecursive1(TypedDict, total=False):
    """Arguments for Event"""
    include: 'EffectivenessIncludeFromEffectivenessRecursive2'


class EffectivenessArgsFromEventRecursive2(TypedDict, total=False):
    """Arguments for Event"""
    include: 'EffectivenessIncludeFromEffectivenessRecursive3'


class EffectivenessArgsFromEventRecursive3(TypedDict, total=False):
    """Arguments for Event"""
    include: 'EffectivenessIncludeFromEffectivenessRecursive4'


class EffectivenessArgsFromEventRecursive4(TypedDict, total=False):
    """Arguments for Event"""
    
    

class FindManyEffectivenessArgsFromEvent(TypedDict, total=False):
    """Arguments for Event"""
    take: int
    skip: int
    order_by: Union['EffectivenessOrderByInput', List['EffectivenessOrderByInput']]
    where: 'EffectivenessWhereInput'
    cursor: 'EffectivenessWhereUniqueInput'
    distinct: List['EffectivenessScalarFieldKeys']
    include: 'EffectivenessIncludeFromEffectivenessRecursive1'


class FindManyEffectivenessArgsFromEventRecursive1(TypedDict, total=False):
    """Arguments for Event"""
    take: int
    skip: int
    order_by: Union['EffectivenessOrderByInput', List['EffectivenessOrderByInput']]
    where: 'EffectivenessWhereInput'
    cursor: 'EffectivenessWhereUniqueInput'
    distinct: List['EffectivenessScalarFieldKeys']
    include: 'EffectivenessIncludeFromEffectivenessRecursive2'


class FindManyEffectivenessArgsFromEventRecursive2(TypedDict, total=False):
    """Arguments for Event"""
    take: int
    skip: int
    order_by: Union['EffectivenessOrderByInput', List['EffectivenessOrderByInput']]
    where: 'EffectivenessWhereInput'
    cursor: 'EffectivenessWhereUniqueInput'
    distinct: List['EffectivenessScalarFieldKeys']
    include: 'EffectivenessIncludeFromEffectivenessRecursive3'


class FindManyEffectivenessArgsFromEventRecursive3(TypedDict, total=False):
    """Arguments for Event"""
    take: int
    skip: int
    order_by: Union['EffectivenessOrderByInput', List['EffectivenessOrderByInput']]
    where: 'EffectivenessWhereInput'
    cursor: 'EffectivenessWhereUniqueInput'
    distinct: List['EffectivenessScalarFieldKeys']
    include: 'EffectivenessIncludeFromEffectivenessRecursive4'


class FindManyEffectivenessArgsFromEventRecursive4(TypedDict, total=False):
    """Arguments for Event"""
    take: int
    skip: int
    order_by: Union['EffectivenessOrderByInput', List['EffectivenessOrderByInput']]
    where: 'EffectivenessWhereInput'
    cursor: 'EffectivenessWhereUniqueInput'
    distinct: List['EffectivenessScalarFieldKeys']
    
    

class EnvironmentalDataIncludeFromEvent(TypedDict, total=False):
    """Relational arguments for Event"""


class EnvironmentalDataIncludeFromEventRecursive1(TypedDict, total=False):
    """Relational arguments for Event"""


class EnvironmentalDataIncludeFromEventRecursive2(TypedDict, total=False):
    """Relational arguments for Event"""


class EnvironmentalDataIncludeFromEventRecursive3(TypedDict, total=False):
    """Relational arguments for Event"""


class EnvironmentalDataIncludeFromEventRecursive4(TypedDict, total=False):
    """Relational arguments for Event"""

    

class EnvironmentalDataArgsFromEvent(TypedDict, total=False):
    """Arguments for Event"""
    include: 'EnvironmentalDataIncludeFromEnvironmentalDataRecursive1'


class EnvironmentalDataArgsFromEventRecursive1(TypedDict, total=False):
    """Arguments for Event"""
    include: 'EnvironmentalDataIncludeFromEnvironmentalDataRecursive2'


class EnvironmentalDataArgsFromEventRecursive2(TypedDict, total=False):
    """Arguments for Event"""
    include: 'EnvironmentalDataIncludeFromEnvironmentalDataRecursive3'


class EnvironmentalDataArgsFromEventRecursive3(TypedDict, total=False):
    """Arguments for Event"""
    include: 'EnvironmentalDataIncludeFromEnvironmentalDataRecursive4'


class EnvironmentalDataArgsFromEventRecursive4(TypedDict, total=False):
    """Arguments for Event"""
    
    

class FindManyEnvironmentalDataArgsFromEvent(TypedDict, total=False):
    """Arguments for Event"""
    take: int
    skip: int
    order_by: Union['EnvironmentalDataOrderByInput', List['EnvironmentalDataOrderByInput']]
    where: 'EnvironmentalDataWhereInput'
    cursor: 'EnvironmentalDataWhereUniqueInput'
    distinct: List['EnvironmentalDataScalarFieldKeys']
    include: 'EnvironmentalDataIncludeFromEnvironmentalDataRecursive1'


class FindManyEnvironmentalDataArgsFromEventRecursive1(TypedDict, total=False):
    """Arguments for Event"""
    take: int
    skip: int
    order_by: Union['EnvironmentalDataOrderByInput', List['EnvironmentalDataOrderByInput']]
    where: 'EnvironmentalDataWhereInput'
    cursor: 'EnvironmentalDataWhereUniqueInput'
    distinct: List['EnvironmentalDataScalarFieldKeys']
    include: 'EnvironmentalDataIncludeFromEnvironmentalDataRecursive2'


class FindManyEnvironmentalDataArgsFromEventRecursive2(TypedDict, total=False):
    """Arguments for Event"""
    take: int
    skip: int
    order_by: Union['EnvironmentalDataOrderByInput', List['EnvironmentalDataOrderByInput']]
    where: 'EnvironmentalDataWhereInput'
    cursor: 'EnvironmentalDataWhereUniqueInput'
    distinct: List['EnvironmentalDataScalarFieldKeys']
    include: 'EnvironmentalDataIncludeFromEnvironmentalDataRecursive3'


class FindManyEnvironmentalDataArgsFromEventRecursive3(TypedDict, total=False):
    """Arguments for Event"""
    take: int
    skip: int
    order_by: Union['EnvironmentalDataOrderByInput', List['EnvironmentalDataOrderByInput']]
    where: 'EnvironmentalDataWhereInput'
    cursor: 'EnvironmentalDataWhereUniqueInput'
    distinct: List['EnvironmentalDataScalarFieldKeys']
    include: 'EnvironmentalDataIncludeFromEnvironmentalDataRecursive4'


class FindManyEnvironmentalDataArgsFromEventRecursive4(TypedDict, total=False):
    """Arguments for Event"""
    take: int
    skip: int
    order_by: Union['EnvironmentalDataOrderByInput', List['EnvironmentalDataOrderByInput']]
    where: 'EnvironmentalDataWhereInput'
    cursor: 'EnvironmentalDataWhereUniqueInput'
    distinct: List['EnvironmentalDataScalarFieldKeys']
    
    

class EventIncludeFromEvent(TypedDict, total=False):
    """Relational arguments for Event"""


class EventIncludeFromEventRecursive1(TypedDict, total=False):
    """Relational arguments for Event"""


class EventIncludeFromEventRecursive2(TypedDict, total=False):
    """Relational arguments for Event"""


class EventIncludeFromEventRecursive3(TypedDict, total=False):
    """Relational arguments for Event"""


class EventIncludeFromEventRecursive4(TypedDict, total=False):
    """Relational arguments for Event"""

    

class EventArgsFromEvent(TypedDict, total=False):
    """Arguments for Event"""
    include: 'EventIncludeFromEventRecursive1'


class EventArgsFromEventRecursive1(TypedDict, total=False):
    """Arguments for Event"""
    include: 'EventIncludeFromEventRecursive2'


class EventArgsFromEventRecursive2(TypedDict, total=False):
    """Arguments for Event"""
    include: 'EventIncludeFromEventRecursive3'


class EventArgsFromEventRecursive3(TypedDict, total=False):
    """Arguments for Event"""
    include: 'EventIncludeFromEventRecursive4'


class EventArgsFromEventRecursive4(TypedDict, total=False):
    """Arguments for Event"""
    
    

class FindManyEventArgsFromEvent(TypedDict, total=False):
    """Arguments for Event"""
    take: int
    skip: int
    order_by: Union['EventOrderByInput', List['EventOrderByInput']]
    where: 'EventWhereInput'
    cursor: 'EventWhereUniqueInput'
    distinct: List['EventScalarFieldKeys']
    include: 'EventIncludeFromEventRecursive1'


class FindManyEventArgsFromEventRecursive1(TypedDict, total=False):
    """Arguments for Event"""
    take: int
    skip: int
    order_by: Union['EventOrderByInput', List['EventOrderByInput']]
    where: 'EventWhereInput'
    cursor: 'EventWhereUniqueInput'
    distinct: List['EventScalarFieldKeys']
    include: 'EventIncludeFromEventRecursive2'


class FindManyEventArgsFromEventRecursive2(TypedDict, total=False):
    """Arguments for Event"""
    take: int
    skip: int
    order_by: Union['EventOrderByInput', List['EventOrderByInput']]
    where: 'EventWhereInput'
    cursor: 'EventWhereUniqueInput'
    distinct: List['EventScalarFieldKeys']
    include: 'EventIncludeFromEventRecursive3'


class FindManyEventArgsFromEventRecursive3(TypedDict, total=False):
    """Arguments for Event"""
    take: int
    skip: int
    order_by: Union['EventOrderByInput', List['EventOrderByInput']]
    where: 'EventWhereInput'
    cursor: 'EventWhereUniqueInput'
    distinct: List['EventScalarFieldKeys']
    include: 'EventIncludeFromEventRecursive4'


class FindManyEventArgsFromEventRecursive4(TypedDict, total=False):
    """Arguments for Event"""
    take: int
    skip: int
    order_by: Union['EventOrderByInput', List['EventOrderByInput']]
    where: 'EventWhereInput'
    cursor: 'EventWhereUniqueInput'
    distinct: List['EventScalarFieldKeys']
    
    

class ForecastIncludeFromEvent(TypedDict, total=False):
    """Relational arguments for Event"""


class ForecastIncludeFromEventRecursive1(TypedDict, total=False):
    """Relational arguments for Event"""


class ForecastIncludeFromEventRecursive2(TypedDict, total=False):
    """Relational arguments for Event"""


class ForecastIncludeFromEventRecursive3(TypedDict, total=False):
    """Relational arguments for Event"""


class ForecastIncludeFromEventRecursive4(TypedDict, total=False):
    """Relational arguments for Event"""

    

class ForecastArgsFromEvent(TypedDict, total=False):
    """Arguments for Event"""
    include: 'ForecastIncludeFromForecastRecursive1'


class ForecastArgsFromEventRecursive1(TypedDict, total=False):
    """Arguments for Event"""
    include: 'ForecastIncludeFromForecastRecursive2'


class ForecastArgsFromEventRecursive2(TypedDict, total=False):
    """Arguments for Event"""
    include: 'ForecastIncludeFromForecastRecursive3'


class ForecastArgsFromEventRecursive3(TypedDict, total=False):
    """Arguments for Event"""
    include: 'ForecastIncludeFromForecastRecursive4'


class ForecastArgsFromEventRecursive4(TypedDict, total=False):
    """Arguments for Event"""
    
    

class FindManyForecastArgsFromEvent(TypedDict, total=False):
    """Arguments for Event"""
    take: int
    skip: int
    order_by: Union['ForecastOrderByInput', List['ForecastOrderByInput']]
    where: 'ForecastWhereInput'
    cursor: 'ForecastWhereUniqueInput'
    distinct: List['ForecastScalarFieldKeys']
    include: 'ForecastIncludeFromForecastRecursive1'


class FindManyForecastArgsFromEventRecursive1(TypedDict, total=False):
    """Arguments for Event"""
    take: int
    skip: int
    order_by: Union['ForecastOrderByInput', List['ForecastOrderByInput']]
    where: 'ForecastWhereInput'
    cursor: 'ForecastWhereUniqueInput'
    distinct: List['ForecastScalarFieldKeys']
    include: 'ForecastIncludeFromForecastRecursive2'


class FindManyForecastArgsFromEventRecursive2(TypedDict, total=False):
    """Arguments for Event"""
    take: int
    skip: int
    order_by: Union['ForecastOrderByInput', List['ForecastOrderByInput']]
    where: 'ForecastWhereInput'
    cursor: 'ForecastWhereUniqueInput'
    distinct: List['ForecastScalarFieldKeys']
    include: 'ForecastIncludeFromForecastRecursive3'


class FindManyForecastArgsFromEventRecursive3(TypedDict, total=False):
    """Arguments for Event"""
    take: int
    skip: int
    order_by: Union['ForecastOrderByInput', List['ForecastOrderByInput']]
    where: 'ForecastWhereInput'
    cursor: 'ForecastWhereUniqueInput'
    distinct: List['ForecastScalarFieldKeys']
    include: 'ForecastIncludeFromForecastRecursive4'


class FindManyForecastArgsFromEventRecursive4(TypedDict, total=False):
    """Arguments for Event"""
    take: int
    skip: int
    order_by: Union['ForecastOrderByInput', List['ForecastOrderByInput']]
    where: 'ForecastWhereInput'
    cursor: 'ForecastWhereUniqueInput'
    distinct: List['ForecastScalarFieldKeys']
    
    

class IncidentIncludeFromEvent(TypedDict, total=False):
    """Relational arguments for Event"""


class IncidentIncludeFromEventRecursive1(TypedDict, total=False):
    """Relational arguments for Event"""


class IncidentIncludeFromEventRecursive2(TypedDict, total=False):
    """Relational arguments for Event"""


class IncidentIncludeFromEventRecursive3(TypedDict, total=False):
    """Relational arguments for Event"""


class IncidentIncludeFromEventRecursive4(TypedDict, total=False):
    """Relational arguments for Event"""

    

class IncidentArgsFromEvent(TypedDict, total=False):
    """Arguments for Event"""
    include: 'IncidentIncludeFromIncidentRecursive1'


class IncidentArgsFromEventRecursive1(TypedDict, total=False):
    """Arguments for Event"""
    include: 'IncidentIncludeFromIncidentRecursive2'


class IncidentArgsFromEventRecursive2(TypedDict, total=False):
    """Arguments for Event"""
    include: 'IncidentIncludeFromIncidentRecursive3'


class IncidentArgsFromEventRecursive3(TypedDict, total=False):
    """Arguments for Event"""
    include: 'IncidentIncludeFromIncidentRecursive4'


class IncidentArgsFromEventRecursive4(TypedDict, total=False):
    """Arguments for Event"""
    
    

class FindManyIncidentArgsFromEvent(TypedDict, total=False):
    """Arguments for Event"""
    take: int
    skip: int
    order_by: Union['IncidentOrderByInput', List['IncidentOrderByInput']]
    where: 'IncidentWhereInput'
    cursor: 'IncidentWhereUniqueInput'
    distinct: List['IncidentScalarFieldKeys']
    include: 'IncidentIncludeFromIncidentRecursive1'


class FindManyIncidentArgsFromEventRecursive1(TypedDict, total=False):
    """Arguments for Event"""
    take: int
    skip: int
    order_by: Union['IncidentOrderByInput', List['IncidentOrderByInput']]
    where: 'IncidentWhereInput'
    cursor: 'IncidentWhereUniqueInput'
    distinct: List['IncidentScalarFieldKeys']
    include: 'IncidentIncludeFromIncidentRecursive2'


class FindManyIncidentArgsFromEventRecursive2(TypedDict, total=False):
    """Arguments for Event"""
    take: int
    skip: int
    order_by: Union['IncidentOrderByInput', List['IncidentOrderByInput']]
    where: 'IncidentWhereInput'
    cursor: 'IncidentWhereUniqueInput'
    distinct: List['IncidentScalarFieldKeys']
    include: 'IncidentIncludeFromIncidentRecursive3'


class FindManyIncidentArgsFromEventRecursive3(TypedDict, total=False):
    """Arguments for Event"""
    take: int
    skip: int
    order_by: Union['IncidentOrderByInput', List['IncidentOrderByInput']]
    where: 'IncidentWhereInput'
    cursor: 'IncidentWhereUniqueInput'
    distinct: List['IncidentScalarFieldKeys']
    include: 'IncidentIncludeFromIncidentRecursive4'


class FindManyIncidentArgsFromEventRecursive4(TypedDict, total=False):
    """Arguments for Event"""
    take: int
    skip: int
    order_by: Union['IncidentOrderByInput', List['IncidentOrderByInput']]
    where: 'IncidentWhereInput'
    cursor: 'IncidentWhereUniqueInput'
    distinct: List['IncidentScalarFieldKeys']
    
    

class NotificationIncludeFromEvent(TypedDict, total=False):
    """Relational arguments for Event"""


class NotificationIncludeFromEventRecursive1(TypedDict, total=False):
    """Relational arguments for Event"""


class NotificationIncludeFromEventRecursive2(TypedDict, total=False):
    """Relational arguments for Event"""


class NotificationIncludeFromEventRecursive3(TypedDict, total=False):
    """Relational arguments for Event"""


class NotificationIncludeFromEventRecursive4(TypedDict, total=False):
    """Relational arguments for Event"""

    

class NotificationArgsFromEvent(TypedDict, total=False):
    """Arguments for Event"""
    include: 'NotificationIncludeFromNotificationRecursive1'


class NotificationArgsFromEventRecursive1(TypedDict, total=False):
    """Arguments for Event"""
    include: 'NotificationIncludeFromNotificationRecursive2'


class NotificationArgsFromEventRecursive2(TypedDict, total=False):
    """Arguments for Event"""
    include: 'NotificationIncludeFromNotificationRecursive3'


class NotificationArgsFromEventRecursive3(TypedDict, total=False):
    """Arguments for Event"""
    include: 'NotificationIncludeFromNotificationRecursive4'


class NotificationArgsFromEventRecursive4(TypedDict, total=False):
    """Arguments for Event"""
    
    

class FindManyNotificationArgsFromEvent(TypedDict, total=False):
    """Arguments for Event"""
    take: int
    skip: int
    order_by: Union['NotificationOrderByInput', List['NotificationOrderByInput']]
    where: 'NotificationWhereInput'
    cursor: 'NotificationWhereUniqueInput'
    distinct: List['NotificationScalarFieldKeys']
    include: 'NotificationIncludeFromNotificationRecursive1'


class FindManyNotificationArgsFromEventRecursive1(TypedDict, total=False):
    """Arguments for Event"""
    take: int
    skip: int
    order_by: Union['NotificationOrderByInput', List['NotificationOrderByInput']]
    where: 'NotificationWhereInput'
    cursor: 'NotificationWhereUniqueInput'
    distinct: List['NotificationScalarFieldKeys']
    include: 'NotificationIncludeFromNotificationRecursive2'


class FindManyNotificationArgsFromEventRecursive2(TypedDict, total=False):
    """Arguments for Event"""
    take: int
    skip: int
    order_by: Union['NotificationOrderByInput', List['NotificationOrderByInput']]
    where: 'NotificationWhereInput'
    cursor: 'NotificationWhereUniqueInput'
    distinct: List['NotificationScalarFieldKeys']
    include: 'NotificationIncludeFromNotificationRecursive3'


class FindManyNotificationArgsFromEventRecursive3(TypedDict, total=False):
    """Arguments for Event"""
    take: int
    skip: int
    order_by: Union['NotificationOrderByInput', List['NotificationOrderByInput']]
    where: 'NotificationWhereInput'
    cursor: 'NotificationWhereUniqueInput'
    distinct: List['NotificationScalarFieldKeys']
    include: 'NotificationIncludeFromNotificationRecursive4'


class FindManyNotificationArgsFromEventRecursive4(TypedDict, total=False):
    """Arguments for Event"""
    take: int
    skip: int
    order_by: Union['NotificationOrderByInput', List['NotificationOrderByInput']]
    where: 'NotificationWhereInput'
    cursor: 'NotificationWhereUniqueInput'
    distinct: List['NotificationScalarFieldKeys']
    
    

class ScenarioIncludeFromEvent(TypedDict, total=False):
    """Relational arguments for Event"""


class ScenarioIncludeFromEventRecursive1(TypedDict, total=False):
    """Relational arguments for Event"""


class ScenarioIncludeFromEventRecursive2(TypedDict, total=False):
    """Relational arguments for Event"""


class ScenarioIncludeFromEventRecursive3(TypedDict, total=False):
    """Relational arguments for Event"""


class ScenarioIncludeFromEventRecursive4(TypedDict, total=False):
    """Relational arguments for Event"""

    

class ScenarioArgsFromEvent(TypedDict, total=False):
    """Arguments for Event"""
    include: 'ScenarioIncludeFromScenarioRecursive1'


class ScenarioArgsFromEventRecursive1(TypedDict, total=False):
    """Arguments for Event"""
    include: 'ScenarioIncludeFromScenarioRecursive2'


class ScenarioArgsFromEventRecursive2(TypedDict, total=False):
    """Arguments for Event"""
    include: 'ScenarioIncludeFromScenarioRecursive3'


class ScenarioArgsFromEventRecursive3(TypedDict, total=False):
    """Arguments for Event"""
    include: 'ScenarioIncludeFromScenarioRecursive4'


class ScenarioArgsFromEventRecursive4(TypedDict, total=False):
    """Arguments for Event"""
    
    

class FindManyScenarioArgsFromEvent(TypedDict, total=False):
    """Arguments for Event"""
    take: int
    skip: int
    order_by: Union['ScenarioOrderByInput', List['ScenarioOrderByInput']]
    where: 'ScenarioWhereInput'
    cursor: 'ScenarioWhereUniqueInput'
    distinct: List['ScenarioScalarFieldKeys']
    include: 'ScenarioIncludeFromScenarioRecursive1'


class FindManyScenarioArgsFromEventRecursive1(TypedDict, total=False):
    """Arguments for Event"""
    take: int
    skip: int
    order_by: Union['ScenarioOrderByInput', List['ScenarioOrderByInput']]
    where: 'ScenarioWhereInput'
    cursor: 'ScenarioWhereUniqueInput'
    distinct: List['ScenarioScalarFieldKeys']
    include: 'ScenarioIncludeFromScenarioRecursive2'


class FindManyScenarioArgsFromEventRecursive2(TypedDict, total=False):
    """Arguments for Event"""
    take: int
    skip: int
    order_by: Union['ScenarioOrderByInput', List['ScenarioOrderByInput']]
    where: 'ScenarioWhereInput'
    cursor: 'ScenarioWhereUniqueInput'
    distinct: List['ScenarioScalarFieldKeys']
    include: 'ScenarioIncludeFromScenarioRecursive3'


class FindManyScenarioArgsFromEventRecursive3(TypedDict, total=False):
    """Arguments for Event"""
    take: int
    skip: int
    order_by: Union['ScenarioOrderByInput', List['ScenarioOrderByInput']]
    where: 'ScenarioWhereInput'
    cursor: 'ScenarioWhereUniqueInput'
    distinct: List['ScenarioScalarFieldKeys']
    include: 'ScenarioIncludeFromScenarioRecursive4'


class FindManyScenarioArgsFromEventRecursive4(TypedDict, total=False):
    """Arguments for Event"""
    take: int
    skip: int
    order_by: Union['ScenarioOrderByInput', List['ScenarioOrderByInput']]
    where: 'ScenarioWhereInput'
    cursor: 'ScenarioWhereUniqueInput'
    distinct: List['ScenarioScalarFieldKeys']
    
    

class SocialReportIncludeFromEvent(TypedDict, total=False):
    """Relational arguments for Event"""


class SocialReportIncludeFromEventRecursive1(TypedDict, total=False):
    """Relational arguments for Event"""


class SocialReportIncludeFromEventRecursive2(TypedDict, total=False):
    """Relational arguments for Event"""


class SocialReportIncludeFromEventRecursive3(TypedDict, total=False):
    """Relational arguments for Event"""


class SocialReportIncludeFromEventRecursive4(TypedDict, total=False):
    """Relational arguments for Event"""

    

class SocialReportArgsFromEvent(TypedDict, total=False):
    """Arguments for Event"""
    include: 'SocialReportIncludeFromSocialReportRecursive1'


class SocialReportArgsFromEventRecursive1(TypedDict, total=False):
    """Arguments for Event"""
    include: 'SocialReportIncludeFromSocialReportRecursive2'


class SocialReportArgsFromEventRecursive2(TypedDict, total=False):
    """Arguments for Event"""
    include: 'SocialReportIncludeFromSocialReportRecursive3'


class SocialReportArgsFromEventRecursive3(TypedDict, total=False):
    """Arguments for Event"""
    include: 'SocialReportIncludeFromSocialReportRecursive4'


class SocialReportArgsFromEventRecursive4(TypedDict, total=False):
    """Arguments for Event"""
    
    

class FindManySocialReportArgsFromEvent(TypedDict, total=False):
    """Arguments for Event"""
    take: int
    skip: int
    order_by: Union['SocialReportOrderByInput', List['SocialReportOrderByInput']]
    where: 'SocialReportWhereInput'
    cursor: 'SocialReportWhereUniqueInput'
    distinct: List['SocialReportScalarFieldKeys']
    include: 'SocialReportIncludeFromSocialReportRecursive1'


class FindManySocialReportArgsFromEventRecursive1(TypedDict, total=False):
    """Arguments for Event"""
    take: int
    skip: int
    order_by: Union['SocialReportOrderByInput', List['SocialReportOrderByInput']]
    where: 'SocialReportWhereInput'
    cursor: 'SocialReportWhereUniqueInput'
    distinct: List['SocialReportScalarFieldKeys']
    include: 'SocialReportIncludeFromSocialReportRecursive2'


class FindManySocialReportArgsFromEventRecursive2(TypedDict, total=False):
    """Arguments for Event"""
    take: int
    skip: int
    order_by: Union['SocialReportOrderByInput', List['SocialReportOrderByInput']]
    where: 'SocialReportWhereInput'
    cursor: 'SocialReportWhereUniqueInput'
    distinct: List['SocialReportScalarFieldKeys']
    include: 'SocialReportIncludeFromSocialReportRecursive3'


class FindManySocialReportArgsFromEventRecursive3(TypedDict, total=False):
    """Arguments for Event"""
    take: int
    skip: int
    order_by: Union['SocialReportOrderByInput', List['SocialReportOrderByInput']]
    where: 'SocialReportWhereInput'
    cursor: 'SocialReportWhereUniqueInput'
    distinct: List['SocialReportScalarFieldKeys']
    include: 'SocialReportIncludeFromSocialReportRecursive4'


class FindManySocialReportArgsFromEventRecursive4(TypedDict, total=False):
    """Arguments for Event"""
    take: int
    skip: int
    order_by: Union['SocialReportOrderByInput', List['SocialReportOrderByInput']]
    where: 'SocialReportWhereInput'
    cursor: 'SocialReportWhereUniqueInput'
    distinct: List['SocialReportScalarFieldKeys']
    
    

class TrafficDataIncludeFromEvent(TypedDict, total=False):
    """Relational arguments for Event"""


class TrafficDataIncludeFromEventRecursive1(TypedDict, total=False):
    """Relational arguments for Event"""


class TrafficDataIncludeFromEventRecursive2(TypedDict, total=False):
    """Relational arguments for Event"""


class TrafficDataIncludeFromEventRecursive3(TypedDict, total=False):
    """Relational arguments for Event"""


class TrafficDataIncludeFromEventRecursive4(TypedDict, total=False):
    """Relational arguments for Event"""

    

class TrafficDataArgsFromEvent(TypedDict, total=False):
    """Arguments for Event"""
    include: 'TrafficDataIncludeFromTrafficDataRecursive1'


class TrafficDataArgsFromEventRecursive1(TypedDict, total=False):
    """Arguments for Event"""
    include: 'TrafficDataIncludeFromTrafficDataRecursive2'


class TrafficDataArgsFromEventRecursive2(TypedDict, total=False):
    """Arguments for Event"""
    include: 'TrafficDataIncludeFromTrafficDataRecursive3'


class TrafficDataArgsFromEventRecursive3(TypedDict, total=False):
    """Arguments for Event"""
    include: 'TrafficDataIncludeFromTrafficDataRecursive4'


class TrafficDataArgsFromEventRecursive4(TypedDict, total=False):
    """Arguments for Event"""
    
    

class FindManyTrafficDataArgsFromEvent(TypedDict, total=False):
    """Arguments for Event"""
    take: int
    skip: int
    order_by: Union['TrafficDataOrderByInput', List['TrafficDataOrderByInput']]
    where: 'TrafficDataWhereInput'
    cursor: 'TrafficDataWhereUniqueInput'
    distinct: List['TrafficDataScalarFieldKeys']
    include: 'TrafficDataIncludeFromTrafficDataRecursive1'


class FindManyTrafficDataArgsFromEventRecursive1(TypedDict, total=False):
    """Arguments for Event"""
    take: int
    skip: int
    order_by: Union['TrafficDataOrderByInput', List['TrafficDataOrderByInput']]
    where: 'TrafficDataWhereInput'
    cursor: 'TrafficDataWhereUniqueInput'
    distinct: List['TrafficDataScalarFieldKeys']
    include: 'TrafficDataIncludeFromTrafficDataRecursive2'


class FindManyTrafficDataArgsFromEventRecursive2(TypedDict, total=False):
    """Arguments for Event"""
    take: int
    skip: int
    order_by: Union['TrafficDataOrderByInput', List['TrafficDataOrderByInput']]
    where: 'TrafficDataWhereInput'
    cursor: 'TrafficDataWhereUniqueInput'
    distinct: List['TrafficDataScalarFieldKeys']
    include: 'TrafficDataIncludeFromTrafficDataRecursive3'


class FindManyTrafficDataArgsFromEventRecursive3(TypedDict, total=False):
    """Arguments for Event"""
    take: int
    skip: int
    order_by: Union['TrafficDataOrderByInput', List['TrafficDataOrderByInput']]
    where: 'TrafficDataWhereInput'
    cursor: 'TrafficDataWhereUniqueInput'
    distinct: List['TrafficDataScalarFieldKeys']
    include: 'TrafficDataIncludeFromTrafficDataRecursive4'


class FindManyTrafficDataArgsFromEventRecursive4(TypedDict, total=False):
    """Arguments for Event"""
    take: int
    skip: int
    order_by: Union['TrafficDataOrderByInput', List['TrafficDataOrderByInput']]
    where: 'TrafficDataWhereInput'
    cursor: 'TrafficDataWhereUniqueInput'
    distinct: List['TrafficDataScalarFieldKeys']
    
    

class TrafficLightIncludeFromEvent(TypedDict, total=False):
    """Relational arguments for Event"""


class TrafficLightIncludeFromEventRecursive1(TypedDict, total=False):
    """Relational arguments for Event"""


class TrafficLightIncludeFromEventRecursive2(TypedDict, total=False):
    """Relational arguments for Event"""


class TrafficLightIncludeFromEventRecursive3(TypedDict, total=False):
    """Relational arguments for Event"""


class TrafficLightIncludeFromEventRecursive4(TypedDict, total=False):
    """Relational arguments for Event"""

    

class TrafficLightArgsFromEvent(TypedDict, total=False):
    """Arguments for Event"""
    include: 'TrafficLightIncludeFromTrafficLightRecursive1'


class TrafficLightArgsFromEventRecursive1(TypedDict, total=False):
    """Arguments for Event"""
    include: 'TrafficLightIncludeFromTrafficLightRecursive2'


class TrafficLightArgsFromEventRecursive2(TypedDict, total=False):
    """Arguments for Event"""
    include: 'TrafficLightIncludeFromTrafficLightRecursive3'


class TrafficLightArgsFromEventRecursive3(TypedDict, total=False):
    """Arguments for Event"""
    include: 'TrafficLightIncludeFromTrafficLightRecursive4'


class TrafficLightArgsFromEventRecursive4(TypedDict, total=False):
    """Arguments for Event"""
    
    

class FindManyTrafficLightArgsFromEvent(TypedDict, total=False):
    """Arguments for Event"""
    take: int
    skip: int
    order_by: Union['TrafficLightOrderByInput', List['TrafficLightOrderByInput']]
    where: 'TrafficLightWhereInput'
    cursor: 'TrafficLightWhereUniqueInput'
    distinct: List['TrafficLightScalarFieldKeys']
    include: 'TrafficLightIncludeFromTrafficLightRecursive1'


class FindManyTrafficLightArgsFromEventRecursive1(TypedDict, total=False):
    """Arguments for Event"""
    take: int
    skip: int
    order_by: Union['TrafficLightOrderByInput', List['TrafficLightOrderByInput']]
    where: 'TrafficLightWhereInput'
    cursor: 'TrafficLightWhereUniqueInput'
    distinct: List['TrafficLightScalarFieldKeys']
    include: 'TrafficLightIncludeFromTrafficLightRecursive2'


class FindManyTrafficLightArgsFromEventRecursive2(TypedDict, total=False):
    """Arguments for Event"""
    take: int
    skip: int
    order_by: Union['TrafficLightOrderByInput', List['TrafficLightOrderByInput']]
    where: 'TrafficLightWhereInput'
    cursor: 'TrafficLightWhereUniqueInput'
    distinct: List['TrafficLightScalarFieldKeys']
    include: 'TrafficLightIncludeFromTrafficLightRecursive3'


class FindManyTrafficLightArgsFromEventRecursive3(TypedDict, total=False):
    """Arguments for Event"""
    take: int
    skip: int
    order_by: Union['TrafficLightOrderByInput', List['TrafficLightOrderByInput']]
    where: 'TrafficLightWhereInput'
    cursor: 'TrafficLightWhereUniqueInput'
    distinct: List['TrafficLightScalarFieldKeys']
    include: 'TrafficLightIncludeFromTrafficLightRecursive4'


class FindManyTrafficLightArgsFromEventRecursive4(TypedDict, total=False):
    """Arguments for Event"""
    take: int
    skip: int
    order_by: Union['TrafficLightOrderByInput', List['TrafficLightOrderByInput']]
    where: 'TrafficLightWhereInput'
    cursor: 'TrafficLightWhereUniqueInput'
    distinct: List['TrafficLightScalarFieldKeys']
    


FindManyEventArgs = FindManyEventArgsFromEvent
FindFirstEventArgs = FindManyEventArgsFromEvent


    

class EventWhereInput(TypedDict, total=False):
    """Event arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    name: Union[_str, 'types.StringFilter']
    date: Union[datetime.datetime, 'types.DateTimeFilter']
    location: Union['fields.Base64', 'types.BytesFilter']
    impactLevel: Union[_int, 'types.IntFilter']

    # should be noted that AND and NOT should be Union['EventWhereInputRecursive1', List['EventWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['EventWhereInputRecursive1']
    OR: List['EventWhereInputRecursive1']
    NOT: List['EventWhereInputRecursive1']


class EventWhereInputRecursive1(TypedDict, total=False):
    """Event arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    name: Union[_str, 'types.StringFilter']
    date: Union[datetime.datetime, 'types.DateTimeFilter']
    location: Union['fields.Base64', 'types.BytesFilter']
    impactLevel: Union[_int, 'types.IntFilter']

    # should be noted that AND and NOT should be Union['EventWhereInputRecursive2', List['EventWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['EventWhereInputRecursive2']
    OR: List['EventWhereInputRecursive2']
    NOT: List['EventWhereInputRecursive2']


class EventWhereInputRecursive2(TypedDict, total=False):
    """Event arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    name: Union[_str, 'types.StringFilter']
    date: Union[datetime.datetime, 'types.DateTimeFilter']
    location: Union['fields.Base64', 'types.BytesFilter']
    impactLevel: Union[_int, 'types.IntFilter']

    # should be noted that AND and NOT should be Union['EventWhereInputRecursive3', List['EventWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['EventWhereInputRecursive3']
    OR: List['EventWhereInputRecursive3']
    NOT: List['EventWhereInputRecursive3']


class EventWhereInputRecursive3(TypedDict, total=False):
    """Event arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    name: Union[_str, 'types.StringFilter']
    date: Union[datetime.datetime, 'types.DateTimeFilter']
    location: Union['fields.Base64', 'types.BytesFilter']
    impactLevel: Union[_int, 'types.IntFilter']

    # should be noted that AND and NOT should be Union['EventWhereInputRecursive4', List['EventWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['EventWhereInputRecursive4']
    OR: List['EventWhereInputRecursive4']
    NOT: List['EventWhereInputRecursive4']


class EventWhereInputRecursive4(TypedDict, total=False):
    """Event arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    name: Union[_str, 'types.StringFilter']
    date: Union[datetime.datetime, 'types.DateTimeFilter']
    location: Union['fields.Base64', 'types.BytesFilter']
    impactLevel: Union[_int, 'types.IntFilter']



# aggregate Event types


    

class EventScalarWhereWithAggregatesInput(TypedDict, total=False):
    """Event arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    date: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    location: Union['fields.Base64', 'types.BytesWithAggregatesFilter']
    impactLevel: Union[_int, 'types.IntWithAggregatesFilter']

    AND: List['EventScalarWhereWithAggregatesInputRecursive1']
    OR: List['EventScalarWhereWithAggregatesInputRecursive1']
    NOT: List['EventScalarWhereWithAggregatesInputRecursive1']


class EventScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """Event arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    date: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    location: Union['fields.Base64', 'types.BytesWithAggregatesFilter']
    impactLevel: Union[_int, 'types.IntWithAggregatesFilter']

    AND: List['EventScalarWhereWithAggregatesInputRecursive2']
    OR: List['EventScalarWhereWithAggregatesInputRecursive2']
    NOT: List['EventScalarWhereWithAggregatesInputRecursive2']


class EventScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """Event arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    date: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    location: Union['fields.Base64', 'types.BytesWithAggregatesFilter']
    impactLevel: Union[_int, 'types.IntWithAggregatesFilter']

    AND: List['EventScalarWhereWithAggregatesInputRecursive3']
    OR: List['EventScalarWhereWithAggregatesInputRecursive3']
    NOT: List['EventScalarWhereWithAggregatesInputRecursive3']


class EventScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """Event arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    date: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    location: Union['fields.Base64', 'types.BytesWithAggregatesFilter']
    impactLevel: Union[_int, 'types.IntWithAggregatesFilter']

    AND: List['EventScalarWhereWithAggregatesInputRecursive4']
    OR: List['EventScalarWhereWithAggregatesInputRecursive4']
    NOT: List['EventScalarWhereWithAggregatesInputRecursive4']


class EventScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """Event arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    date: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    location: Union['fields.Base64', 'types.BytesWithAggregatesFilter']
    impactLevel: Union[_int, 'types.IntWithAggregatesFilter']



class EventGroupByOutput(TypedDict, total=False):
    id: _str
    name: _str
    date: datetime.datetime
    location: 'fields.Base64'
    impactLevel: _int
    _sum: 'EventSumAggregateOutput'
    _avg: 'EventAvgAggregateOutput'
    _min: 'EventMinAggregateOutput'
    _max: 'EventMaxAggregateOutput'
    _count: 'EventCountAggregateOutput'


class EventAvgAggregateOutput(TypedDict, total=False):
    """Event output for aggregating averages"""
    impactLevel: float


class EventSumAggregateOutput(TypedDict, total=False):
    """Event output for aggregating sums"""
    impactLevel: _int


class EventScalarAggregateOutput(TypedDict, total=False):
    """Event output including scalar fields"""
    id: _str
    name: _str
    date: datetime.datetime
    location: 'fields.Base64'
    impactLevel: _int


EventMinAggregateOutput = EventScalarAggregateOutput
EventMaxAggregateOutput = EventScalarAggregateOutput


class EventMaxAggregateInput(TypedDict, total=False):
    """Event input for aggregating by max"""
    id: bool
    name: bool
    date: bool
    location: bool
    impactLevel: bool


class EventMinAggregateInput(TypedDict, total=False):
    """Event input for aggregating by min"""
    id: bool
    name: bool
    date: bool
    location: bool
    impactLevel: bool


class EventNumberAggregateInput(TypedDict, total=False):
    """Event input for aggregating numbers"""
    impactLevel: bool


EventAvgAggregateInput = EventNumberAggregateInput
EventSumAggregateInput = EventNumberAggregateInput


EventCountAggregateInput = TypedDict(
    'EventCountAggregateInput',
    {
        'id': bool,
        'name': bool,
        'date': bool,
        'location': bool,
        'impactLevel': bool,
        '_all': bool,
    },
    total=False,
)

EventCountAggregateOutput = TypedDict(
    'EventCountAggregateOutput',
    {
        'id': int,
        'name': int,
        'date': int,
        'location': int,
        'impactLevel': int,
        '_all': int,
    },
    total=False,
)


EventKeys = Literal[
    'id',
    'name',
    'date',
    'location',
    'impactLevel',
]
EventScalarFieldKeys = Literal[
    'id',
    'name',
    'date',
    'location',
    'impactLevel',
]
EventScalarFieldKeysT = TypeVar('EventScalarFieldKeysT', bound=EventScalarFieldKeys)

EventRelationalFieldKeys = _NoneType

# Forecast types

class ForecastOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the Forecast create method"""
    id: _str
    predictedDensity: Optional[_int]
    predictedSpeed: Optional[_float]


class ForecastCreateInput(ForecastOptionalCreateInput):
    """Required arguments to the Forecast create method"""
    timestamp: datetime.datetime
    location: 'fields.Base64'


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class ForecastOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the Forecast create method, without relations"""
    id: _str
    predictedDensity: Optional[_int]
    predictedSpeed: Optional[_float]


class ForecastCreateWithoutRelationsInput(ForecastOptionalCreateWithoutRelationsInput):
    """Required arguments to the Forecast create method, without relations"""
    timestamp: datetime.datetime
    location: 'fields.Base64'

class ForecastConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'ForecastCreateWithoutRelationsInput'
    where: 'ForecastWhereUniqueInput'

class ForecastCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'ForecastCreateWithoutRelationsInput'
    connect: 'ForecastWhereUniqueInput'
    connect_or_create: 'ForecastConnectOrCreateWithoutRelationsInput'


class ForecastCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['ForecastCreateWithoutRelationsInput', List['ForecastCreateWithoutRelationsInput']]
    connect: Union['ForecastWhereUniqueInput', List['ForecastWhereUniqueInput']]
    connect_or_create: Union['ForecastConnectOrCreateWithoutRelationsInput', List['ForecastConnectOrCreateWithoutRelationsInput']]

_ForecastWhereUnique_id_Input = TypedDict(
    '_ForecastWhereUnique_id_Input',
    {
        'id': '_str',
    },
    total=True
)

ForecastWhereUniqueInput = _ForecastWhereUnique_id_Input


class ForecastUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: _str
    timestamp: datetime.datetime
    location: 'fields.Base64'
    predictedDensity: Optional[Union[AtomicIntInput, _int]]
    predictedSpeed: Optional[Union[AtomicFloatInput, _float]]


class ForecastUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: _str
    timestamp: datetime.datetime
    location: 'fields.Base64'
    predictedDensity: Optional[Union[AtomicIntInput, _int]]
    predictedSpeed: Optional[Union[AtomicFloatInput, _float]]


class ForecastUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['ForecastCreateWithoutRelationsInput']
    connect: List['ForecastWhereUniqueInput']
    connect_or_create: List['ForecastConnectOrCreateWithoutRelationsInput']
    set: List['ForecastWhereUniqueInput']
    disconnect: List['ForecastWhereUniqueInput']
    delete: List['ForecastWhereUniqueInput']

    # TODO
    # update: List['ForecastUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['ForecastUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['ForecastScalarWhereInput']
    # upsert: List['ForecastUpserteWithWhereUniqueWithoutRelationsInput']


class ForecastUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'ForecastCreateWithoutRelationsInput'
    connect: 'ForecastWhereUniqueInput'
    connect_or_create: 'ForecastConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'ForecastUpdateInput'
    # upsert: 'ForecastUpsertWithoutRelationsInput'


class ForecastUpsertInput(TypedDict):
    create: 'ForecastCreateInput'
    update: 'ForecastUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_Forecast_id_OrderByInput = TypedDict(
    '_Forecast_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_Forecast_timestamp_OrderByInput = TypedDict(
    '_Forecast_timestamp_OrderByInput',
    {
        'timestamp': 'SortOrder',
    },
    total=True
)

_Forecast_location_OrderByInput = TypedDict(
    '_Forecast_location_OrderByInput',
    {
        'location': 'SortOrder',
    },
    total=True
)

_Forecast_predictedDensity_OrderByInput = TypedDict(
    '_Forecast_predictedDensity_OrderByInput',
    {
        'predictedDensity': 'SortOrder',
    },
    total=True
)

_Forecast_predictedSpeed_OrderByInput = TypedDict(
    '_Forecast_predictedSpeed_OrderByInput',
    {
        'predictedSpeed': 'SortOrder',
    },
    total=True
)

_Forecast_RelevanceInner = TypedDict(
    '_Forecast_RelevanceInner',
    {
        'fields': 'List[ForecastScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_Forecast_RelevanceOrderByInput = TypedDict(
    '_Forecast_RelevanceOrderByInput',
    {
        '_relevance': '_Forecast_RelevanceInner',
    },
    total=True
)

ForecastOrderByInput = Union[
    '_Forecast_id_OrderByInput',
    '_Forecast_timestamp_OrderByInput',
    '_Forecast_location_OrderByInput',
    '_Forecast_predictedDensity_OrderByInput',
    '_Forecast_predictedSpeed_OrderByInput',
    '_Forecast_RelevanceOrderByInput',
]



# recursive Forecast types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

ForecastRelationFilter = TypedDict(
    'ForecastRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class ForecastListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class ForecastInclude(TypedDict, total=False):
    """Forecast relational arguments"""


    

class AchievementIncludeFromForecast(TypedDict, total=False):
    """Relational arguments for Forecast"""


class AchievementIncludeFromForecastRecursive1(TypedDict, total=False):
    """Relational arguments for Forecast"""


class AchievementIncludeFromForecastRecursive2(TypedDict, total=False):
    """Relational arguments for Forecast"""


class AchievementIncludeFromForecastRecursive3(TypedDict, total=False):
    """Relational arguments for Forecast"""


class AchievementIncludeFromForecastRecursive4(TypedDict, total=False):
    """Relational arguments for Forecast"""

    

class AchievementArgsFromForecast(TypedDict, total=False):
    """Arguments for Forecast"""
    include: 'AchievementIncludeFromAchievementRecursive1'


class AchievementArgsFromForecastRecursive1(TypedDict, total=False):
    """Arguments for Forecast"""
    include: 'AchievementIncludeFromAchievementRecursive2'


class AchievementArgsFromForecastRecursive2(TypedDict, total=False):
    """Arguments for Forecast"""
    include: 'AchievementIncludeFromAchievementRecursive3'


class AchievementArgsFromForecastRecursive3(TypedDict, total=False):
    """Arguments for Forecast"""
    include: 'AchievementIncludeFromAchievementRecursive4'


class AchievementArgsFromForecastRecursive4(TypedDict, total=False):
    """Arguments for Forecast"""
    
    

class FindManyAchievementArgsFromForecast(TypedDict, total=False):
    """Arguments for Forecast"""
    take: int
    skip: int
    order_by: Union['AchievementOrderByInput', List['AchievementOrderByInput']]
    where: 'AchievementWhereInput'
    cursor: 'AchievementWhereUniqueInput'
    distinct: List['AchievementScalarFieldKeys']
    include: 'AchievementIncludeFromAchievementRecursive1'


class FindManyAchievementArgsFromForecastRecursive1(TypedDict, total=False):
    """Arguments for Forecast"""
    take: int
    skip: int
    order_by: Union['AchievementOrderByInput', List['AchievementOrderByInput']]
    where: 'AchievementWhereInput'
    cursor: 'AchievementWhereUniqueInput'
    distinct: List['AchievementScalarFieldKeys']
    include: 'AchievementIncludeFromAchievementRecursive2'


class FindManyAchievementArgsFromForecastRecursive2(TypedDict, total=False):
    """Arguments for Forecast"""
    take: int
    skip: int
    order_by: Union['AchievementOrderByInput', List['AchievementOrderByInput']]
    where: 'AchievementWhereInput'
    cursor: 'AchievementWhereUniqueInput'
    distinct: List['AchievementScalarFieldKeys']
    include: 'AchievementIncludeFromAchievementRecursive3'


class FindManyAchievementArgsFromForecastRecursive3(TypedDict, total=False):
    """Arguments for Forecast"""
    take: int
    skip: int
    order_by: Union['AchievementOrderByInput', List['AchievementOrderByInput']]
    where: 'AchievementWhereInput'
    cursor: 'AchievementWhereUniqueInput'
    distinct: List['AchievementScalarFieldKeys']
    include: 'AchievementIncludeFromAchievementRecursive4'


class FindManyAchievementArgsFromForecastRecursive4(TypedDict, total=False):
    """Arguments for Forecast"""
    take: int
    skip: int
    order_by: Union['AchievementOrderByInput', List['AchievementOrderByInput']]
    where: 'AchievementWhereInput'
    cursor: 'AchievementWhereUniqueInput'
    distinct: List['AchievementScalarFieldKeys']
    
    

class CameraIncludeFromForecast(TypedDict, total=False):
    """Relational arguments for Forecast"""


class CameraIncludeFromForecastRecursive1(TypedDict, total=False):
    """Relational arguments for Forecast"""


class CameraIncludeFromForecastRecursive2(TypedDict, total=False):
    """Relational arguments for Forecast"""


class CameraIncludeFromForecastRecursive3(TypedDict, total=False):
    """Relational arguments for Forecast"""


class CameraIncludeFromForecastRecursive4(TypedDict, total=False):
    """Relational arguments for Forecast"""

    

class CameraArgsFromForecast(TypedDict, total=False):
    """Arguments for Forecast"""
    include: 'CameraIncludeFromCameraRecursive1'


class CameraArgsFromForecastRecursive1(TypedDict, total=False):
    """Arguments for Forecast"""
    include: 'CameraIncludeFromCameraRecursive2'


class CameraArgsFromForecastRecursive2(TypedDict, total=False):
    """Arguments for Forecast"""
    include: 'CameraIncludeFromCameraRecursive3'


class CameraArgsFromForecastRecursive3(TypedDict, total=False):
    """Arguments for Forecast"""
    include: 'CameraIncludeFromCameraRecursive4'


class CameraArgsFromForecastRecursive4(TypedDict, total=False):
    """Arguments for Forecast"""
    
    

class FindManyCameraArgsFromForecast(TypedDict, total=False):
    """Arguments for Forecast"""
    take: int
    skip: int
    order_by: Union['CameraOrderByInput', List['CameraOrderByInput']]
    where: 'CameraWhereInput'
    cursor: 'CameraWhereUniqueInput'
    distinct: List['CameraScalarFieldKeys']
    include: 'CameraIncludeFromCameraRecursive1'


class FindManyCameraArgsFromForecastRecursive1(TypedDict, total=False):
    """Arguments for Forecast"""
    take: int
    skip: int
    order_by: Union['CameraOrderByInput', List['CameraOrderByInput']]
    where: 'CameraWhereInput'
    cursor: 'CameraWhereUniqueInput'
    distinct: List['CameraScalarFieldKeys']
    include: 'CameraIncludeFromCameraRecursive2'


class FindManyCameraArgsFromForecastRecursive2(TypedDict, total=False):
    """Arguments for Forecast"""
    take: int
    skip: int
    order_by: Union['CameraOrderByInput', List['CameraOrderByInput']]
    where: 'CameraWhereInput'
    cursor: 'CameraWhereUniqueInput'
    distinct: List['CameraScalarFieldKeys']
    include: 'CameraIncludeFromCameraRecursive3'


class FindManyCameraArgsFromForecastRecursive3(TypedDict, total=False):
    """Arguments for Forecast"""
    take: int
    skip: int
    order_by: Union['CameraOrderByInput', List['CameraOrderByInput']]
    where: 'CameraWhereInput'
    cursor: 'CameraWhereUniqueInput'
    distinct: List['CameraScalarFieldKeys']
    include: 'CameraIncludeFromCameraRecursive4'


class FindManyCameraArgsFromForecastRecursive4(TypedDict, total=False):
    """Arguments for Forecast"""
    take: int
    skip: int
    order_by: Union['CameraOrderByInput', List['CameraOrderByInput']]
    where: 'CameraWhereInput'
    cursor: 'CameraWhereUniqueInput'
    distinct: List['CameraScalarFieldKeys']
    
    

class EffectivenessIncludeFromForecast(TypedDict, total=False):
    """Relational arguments for Forecast"""


class EffectivenessIncludeFromForecastRecursive1(TypedDict, total=False):
    """Relational arguments for Forecast"""


class EffectivenessIncludeFromForecastRecursive2(TypedDict, total=False):
    """Relational arguments for Forecast"""


class EffectivenessIncludeFromForecastRecursive3(TypedDict, total=False):
    """Relational arguments for Forecast"""


class EffectivenessIncludeFromForecastRecursive4(TypedDict, total=False):
    """Relational arguments for Forecast"""

    

class EffectivenessArgsFromForecast(TypedDict, total=False):
    """Arguments for Forecast"""
    include: 'EffectivenessIncludeFromEffectivenessRecursive1'


class EffectivenessArgsFromForecastRecursive1(TypedDict, total=False):
    """Arguments for Forecast"""
    include: 'EffectivenessIncludeFromEffectivenessRecursive2'


class EffectivenessArgsFromForecastRecursive2(TypedDict, total=False):
    """Arguments for Forecast"""
    include: 'EffectivenessIncludeFromEffectivenessRecursive3'


class EffectivenessArgsFromForecastRecursive3(TypedDict, total=False):
    """Arguments for Forecast"""
    include: 'EffectivenessIncludeFromEffectivenessRecursive4'


class EffectivenessArgsFromForecastRecursive4(TypedDict, total=False):
    """Arguments for Forecast"""
    
    

class FindManyEffectivenessArgsFromForecast(TypedDict, total=False):
    """Arguments for Forecast"""
    take: int
    skip: int
    order_by: Union['EffectivenessOrderByInput', List['EffectivenessOrderByInput']]
    where: 'EffectivenessWhereInput'
    cursor: 'EffectivenessWhereUniqueInput'
    distinct: List['EffectivenessScalarFieldKeys']
    include: 'EffectivenessIncludeFromEffectivenessRecursive1'


class FindManyEffectivenessArgsFromForecastRecursive1(TypedDict, total=False):
    """Arguments for Forecast"""
    take: int
    skip: int
    order_by: Union['EffectivenessOrderByInput', List['EffectivenessOrderByInput']]
    where: 'EffectivenessWhereInput'
    cursor: 'EffectivenessWhereUniqueInput'
    distinct: List['EffectivenessScalarFieldKeys']
    include: 'EffectivenessIncludeFromEffectivenessRecursive2'


class FindManyEffectivenessArgsFromForecastRecursive2(TypedDict, total=False):
    """Arguments for Forecast"""
    take: int
    skip: int
    order_by: Union['EffectivenessOrderByInput', List['EffectivenessOrderByInput']]
    where: 'EffectivenessWhereInput'
    cursor: 'EffectivenessWhereUniqueInput'
    distinct: List['EffectivenessScalarFieldKeys']
    include: 'EffectivenessIncludeFromEffectivenessRecursive3'


class FindManyEffectivenessArgsFromForecastRecursive3(TypedDict, total=False):
    """Arguments for Forecast"""
    take: int
    skip: int
    order_by: Union['EffectivenessOrderByInput', List['EffectivenessOrderByInput']]
    where: 'EffectivenessWhereInput'
    cursor: 'EffectivenessWhereUniqueInput'
    distinct: List['EffectivenessScalarFieldKeys']
    include: 'EffectivenessIncludeFromEffectivenessRecursive4'


class FindManyEffectivenessArgsFromForecastRecursive4(TypedDict, total=False):
    """Arguments for Forecast"""
    take: int
    skip: int
    order_by: Union['EffectivenessOrderByInput', List['EffectivenessOrderByInput']]
    where: 'EffectivenessWhereInput'
    cursor: 'EffectivenessWhereUniqueInput'
    distinct: List['EffectivenessScalarFieldKeys']
    
    

class EnvironmentalDataIncludeFromForecast(TypedDict, total=False):
    """Relational arguments for Forecast"""


class EnvironmentalDataIncludeFromForecastRecursive1(TypedDict, total=False):
    """Relational arguments for Forecast"""


class EnvironmentalDataIncludeFromForecastRecursive2(TypedDict, total=False):
    """Relational arguments for Forecast"""


class EnvironmentalDataIncludeFromForecastRecursive3(TypedDict, total=False):
    """Relational arguments for Forecast"""


class EnvironmentalDataIncludeFromForecastRecursive4(TypedDict, total=False):
    """Relational arguments for Forecast"""

    

class EnvironmentalDataArgsFromForecast(TypedDict, total=False):
    """Arguments for Forecast"""
    include: 'EnvironmentalDataIncludeFromEnvironmentalDataRecursive1'


class EnvironmentalDataArgsFromForecastRecursive1(TypedDict, total=False):
    """Arguments for Forecast"""
    include: 'EnvironmentalDataIncludeFromEnvironmentalDataRecursive2'


class EnvironmentalDataArgsFromForecastRecursive2(TypedDict, total=False):
    """Arguments for Forecast"""
    include: 'EnvironmentalDataIncludeFromEnvironmentalDataRecursive3'


class EnvironmentalDataArgsFromForecastRecursive3(TypedDict, total=False):
    """Arguments for Forecast"""
    include: 'EnvironmentalDataIncludeFromEnvironmentalDataRecursive4'


class EnvironmentalDataArgsFromForecastRecursive4(TypedDict, total=False):
    """Arguments for Forecast"""
    
    

class FindManyEnvironmentalDataArgsFromForecast(TypedDict, total=False):
    """Arguments for Forecast"""
    take: int
    skip: int
    order_by: Union['EnvironmentalDataOrderByInput', List['EnvironmentalDataOrderByInput']]
    where: 'EnvironmentalDataWhereInput'
    cursor: 'EnvironmentalDataWhereUniqueInput'
    distinct: List['EnvironmentalDataScalarFieldKeys']
    include: 'EnvironmentalDataIncludeFromEnvironmentalDataRecursive1'


class FindManyEnvironmentalDataArgsFromForecastRecursive1(TypedDict, total=False):
    """Arguments for Forecast"""
    take: int
    skip: int
    order_by: Union['EnvironmentalDataOrderByInput', List['EnvironmentalDataOrderByInput']]
    where: 'EnvironmentalDataWhereInput'
    cursor: 'EnvironmentalDataWhereUniqueInput'
    distinct: List['EnvironmentalDataScalarFieldKeys']
    include: 'EnvironmentalDataIncludeFromEnvironmentalDataRecursive2'


class FindManyEnvironmentalDataArgsFromForecastRecursive2(TypedDict, total=False):
    """Arguments for Forecast"""
    take: int
    skip: int
    order_by: Union['EnvironmentalDataOrderByInput', List['EnvironmentalDataOrderByInput']]
    where: 'EnvironmentalDataWhereInput'
    cursor: 'EnvironmentalDataWhereUniqueInput'
    distinct: List['EnvironmentalDataScalarFieldKeys']
    include: 'EnvironmentalDataIncludeFromEnvironmentalDataRecursive3'


class FindManyEnvironmentalDataArgsFromForecastRecursive3(TypedDict, total=False):
    """Arguments for Forecast"""
    take: int
    skip: int
    order_by: Union['EnvironmentalDataOrderByInput', List['EnvironmentalDataOrderByInput']]
    where: 'EnvironmentalDataWhereInput'
    cursor: 'EnvironmentalDataWhereUniqueInput'
    distinct: List['EnvironmentalDataScalarFieldKeys']
    include: 'EnvironmentalDataIncludeFromEnvironmentalDataRecursive4'


class FindManyEnvironmentalDataArgsFromForecastRecursive4(TypedDict, total=False):
    """Arguments for Forecast"""
    take: int
    skip: int
    order_by: Union['EnvironmentalDataOrderByInput', List['EnvironmentalDataOrderByInput']]
    where: 'EnvironmentalDataWhereInput'
    cursor: 'EnvironmentalDataWhereUniqueInput'
    distinct: List['EnvironmentalDataScalarFieldKeys']
    
    

class EventIncludeFromForecast(TypedDict, total=False):
    """Relational arguments for Forecast"""


class EventIncludeFromForecastRecursive1(TypedDict, total=False):
    """Relational arguments for Forecast"""


class EventIncludeFromForecastRecursive2(TypedDict, total=False):
    """Relational arguments for Forecast"""


class EventIncludeFromForecastRecursive3(TypedDict, total=False):
    """Relational arguments for Forecast"""


class EventIncludeFromForecastRecursive4(TypedDict, total=False):
    """Relational arguments for Forecast"""

    

class EventArgsFromForecast(TypedDict, total=False):
    """Arguments for Forecast"""
    include: 'EventIncludeFromEventRecursive1'


class EventArgsFromForecastRecursive1(TypedDict, total=False):
    """Arguments for Forecast"""
    include: 'EventIncludeFromEventRecursive2'


class EventArgsFromForecastRecursive2(TypedDict, total=False):
    """Arguments for Forecast"""
    include: 'EventIncludeFromEventRecursive3'


class EventArgsFromForecastRecursive3(TypedDict, total=False):
    """Arguments for Forecast"""
    include: 'EventIncludeFromEventRecursive4'


class EventArgsFromForecastRecursive4(TypedDict, total=False):
    """Arguments for Forecast"""
    
    

class FindManyEventArgsFromForecast(TypedDict, total=False):
    """Arguments for Forecast"""
    take: int
    skip: int
    order_by: Union['EventOrderByInput', List['EventOrderByInput']]
    where: 'EventWhereInput'
    cursor: 'EventWhereUniqueInput'
    distinct: List['EventScalarFieldKeys']
    include: 'EventIncludeFromEventRecursive1'


class FindManyEventArgsFromForecastRecursive1(TypedDict, total=False):
    """Arguments for Forecast"""
    take: int
    skip: int
    order_by: Union['EventOrderByInput', List['EventOrderByInput']]
    where: 'EventWhereInput'
    cursor: 'EventWhereUniqueInput'
    distinct: List['EventScalarFieldKeys']
    include: 'EventIncludeFromEventRecursive2'


class FindManyEventArgsFromForecastRecursive2(TypedDict, total=False):
    """Arguments for Forecast"""
    take: int
    skip: int
    order_by: Union['EventOrderByInput', List['EventOrderByInput']]
    where: 'EventWhereInput'
    cursor: 'EventWhereUniqueInput'
    distinct: List['EventScalarFieldKeys']
    include: 'EventIncludeFromEventRecursive3'


class FindManyEventArgsFromForecastRecursive3(TypedDict, total=False):
    """Arguments for Forecast"""
    take: int
    skip: int
    order_by: Union['EventOrderByInput', List['EventOrderByInput']]
    where: 'EventWhereInput'
    cursor: 'EventWhereUniqueInput'
    distinct: List['EventScalarFieldKeys']
    include: 'EventIncludeFromEventRecursive4'


class FindManyEventArgsFromForecastRecursive4(TypedDict, total=False):
    """Arguments for Forecast"""
    take: int
    skip: int
    order_by: Union['EventOrderByInput', List['EventOrderByInput']]
    where: 'EventWhereInput'
    cursor: 'EventWhereUniqueInput'
    distinct: List['EventScalarFieldKeys']
    
    

class ForecastIncludeFromForecast(TypedDict, total=False):
    """Relational arguments for Forecast"""


class ForecastIncludeFromForecastRecursive1(TypedDict, total=False):
    """Relational arguments for Forecast"""


class ForecastIncludeFromForecastRecursive2(TypedDict, total=False):
    """Relational arguments for Forecast"""


class ForecastIncludeFromForecastRecursive3(TypedDict, total=False):
    """Relational arguments for Forecast"""


class ForecastIncludeFromForecastRecursive4(TypedDict, total=False):
    """Relational arguments for Forecast"""

    

class ForecastArgsFromForecast(TypedDict, total=False):
    """Arguments for Forecast"""
    include: 'ForecastIncludeFromForecastRecursive1'


class ForecastArgsFromForecastRecursive1(TypedDict, total=False):
    """Arguments for Forecast"""
    include: 'ForecastIncludeFromForecastRecursive2'


class ForecastArgsFromForecastRecursive2(TypedDict, total=False):
    """Arguments for Forecast"""
    include: 'ForecastIncludeFromForecastRecursive3'


class ForecastArgsFromForecastRecursive3(TypedDict, total=False):
    """Arguments for Forecast"""
    include: 'ForecastIncludeFromForecastRecursive4'


class ForecastArgsFromForecastRecursive4(TypedDict, total=False):
    """Arguments for Forecast"""
    
    

class FindManyForecastArgsFromForecast(TypedDict, total=False):
    """Arguments for Forecast"""
    take: int
    skip: int
    order_by: Union['ForecastOrderByInput', List['ForecastOrderByInput']]
    where: 'ForecastWhereInput'
    cursor: 'ForecastWhereUniqueInput'
    distinct: List['ForecastScalarFieldKeys']
    include: 'ForecastIncludeFromForecastRecursive1'


class FindManyForecastArgsFromForecastRecursive1(TypedDict, total=False):
    """Arguments for Forecast"""
    take: int
    skip: int
    order_by: Union['ForecastOrderByInput', List['ForecastOrderByInput']]
    where: 'ForecastWhereInput'
    cursor: 'ForecastWhereUniqueInput'
    distinct: List['ForecastScalarFieldKeys']
    include: 'ForecastIncludeFromForecastRecursive2'


class FindManyForecastArgsFromForecastRecursive2(TypedDict, total=False):
    """Arguments for Forecast"""
    take: int
    skip: int
    order_by: Union['ForecastOrderByInput', List['ForecastOrderByInput']]
    where: 'ForecastWhereInput'
    cursor: 'ForecastWhereUniqueInput'
    distinct: List['ForecastScalarFieldKeys']
    include: 'ForecastIncludeFromForecastRecursive3'


class FindManyForecastArgsFromForecastRecursive3(TypedDict, total=False):
    """Arguments for Forecast"""
    take: int
    skip: int
    order_by: Union['ForecastOrderByInput', List['ForecastOrderByInput']]
    where: 'ForecastWhereInput'
    cursor: 'ForecastWhereUniqueInput'
    distinct: List['ForecastScalarFieldKeys']
    include: 'ForecastIncludeFromForecastRecursive4'


class FindManyForecastArgsFromForecastRecursive4(TypedDict, total=False):
    """Arguments for Forecast"""
    take: int
    skip: int
    order_by: Union['ForecastOrderByInput', List['ForecastOrderByInput']]
    where: 'ForecastWhereInput'
    cursor: 'ForecastWhereUniqueInput'
    distinct: List['ForecastScalarFieldKeys']
    
    

class IncidentIncludeFromForecast(TypedDict, total=False):
    """Relational arguments for Forecast"""


class IncidentIncludeFromForecastRecursive1(TypedDict, total=False):
    """Relational arguments for Forecast"""


class IncidentIncludeFromForecastRecursive2(TypedDict, total=False):
    """Relational arguments for Forecast"""


class IncidentIncludeFromForecastRecursive3(TypedDict, total=False):
    """Relational arguments for Forecast"""


class IncidentIncludeFromForecastRecursive4(TypedDict, total=False):
    """Relational arguments for Forecast"""

    

class IncidentArgsFromForecast(TypedDict, total=False):
    """Arguments for Forecast"""
    include: 'IncidentIncludeFromIncidentRecursive1'


class IncidentArgsFromForecastRecursive1(TypedDict, total=False):
    """Arguments for Forecast"""
    include: 'IncidentIncludeFromIncidentRecursive2'


class IncidentArgsFromForecastRecursive2(TypedDict, total=False):
    """Arguments for Forecast"""
    include: 'IncidentIncludeFromIncidentRecursive3'


class IncidentArgsFromForecastRecursive3(TypedDict, total=False):
    """Arguments for Forecast"""
    include: 'IncidentIncludeFromIncidentRecursive4'


class IncidentArgsFromForecastRecursive4(TypedDict, total=False):
    """Arguments for Forecast"""
    
    

class FindManyIncidentArgsFromForecast(TypedDict, total=False):
    """Arguments for Forecast"""
    take: int
    skip: int
    order_by: Union['IncidentOrderByInput', List['IncidentOrderByInput']]
    where: 'IncidentWhereInput'
    cursor: 'IncidentWhereUniqueInput'
    distinct: List['IncidentScalarFieldKeys']
    include: 'IncidentIncludeFromIncidentRecursive1'


class FindManyIncidentArgsFromForecastRecursive1(TypedDict, total=False):
    """Arguments for Forecast"""
    take: int
    skip: int
    order_by: Union['IncidentOrderByInput', List['IncidentOrderByInput']]
    where: 'IncidentWhereInput'
    cursor: 'IncidentWhereUniqueInput'
    distinct: List['IncidentScalarFieldKeys']
    include: 'IncidentIncludeFromIncidentRecursive2'


class FindManyIncidentArgsFromForecastRecursive2(TypedDict, total=False):
    """Arguments for Forecast"""
    take: int
    skip: int
    order_by: Union['IncidentOrderByInput', List['IncidentOrderByInput']]
    where: 'IncidentWhereInput'
    cursor: 'IncidentWhereUniqueInput'
    distinct: List['IncidentScalarFieldKeys']
    include: 'IncidentIncludeFromIncidentRecursive3'


class FindManyIncidentArgsFromForecastRecursive3(TypedDict, total=False):
    """Arguments for Forecast"""
    take: int
    skip: int
    order_by: Union['IncidentOrderByInput', List['IncidentOrderByInput']]
    where: 'IncidentWhereInput'
    cursor: 'IncidentWhereUniqueInput'
    distinct: List['IncidentScalarFieldKeys']
    include: 'IncidentIncludeFromIncidentRecursive4'


class FindManyIncidentArgsFromForecastRecursive4(TypedDict, total=False):
    """Arguments for Forecast"""
    take: int
    skip: int
    order_by: Union['IncidentOrderByInput', List['IncidentOrderByInput']]
    where: 'IncidentWhereInput'
    cursor: 'IncidentWhereUniqueInput'
    distinct: List['IncidentScalarFieldKeys']
    
    

class NotificationIncludeFromForecast(TypedDict, total=False):
    """Relational arguments for Forecast"""


class NotificationIncludeFromForecastRecursive1(TypedDict, total=False):
    """Relational arguments for Forecast"""


class NotificationIncludeFromForecastRecursive2(TypedDict, total=False):
    """Relational arguments for Forecast"""


class NotificationIncludeFromForecastRecursive3(TypedDict, total=False):
    """Relational arguments for Forecast"""


class NotificationIncludeFromForecastRecursive4(TypedDict, total=False):
    """Relational arguments for Forecast"""

    

class NotificationArgsFromForecast(TypedDict, total=False):
    """Arguments for Forecast"""
    include: 'NotificationIncludeFromNotificationRecursive1'


class NotificationArgsFromForecastRecursive1(TypedDict, total=False):
    """Arguments for Forecast"""
    include: 'NotificationIncludeFromNotificationRecursive2'


class NotificationArgsFromForecastRecursive2(TypedDict, total=False):
    """Arguments for Forecast"""
    include: 'NotificationIncludeFromNotificationRecursive3'


class NotificationArgsFromForecastRecursive3(TypedDict, total=False):
    """Arguments for Forecast"""
    include: 'NotificationIncludeFromNotificationRecursive4'


class NotificationArgsFromForecastRecursive4(TypedDict, total=False):
    """Arguments for Forecast"""
    
    

class FindManyNotificationArgsFromForecast(TypedDict, total=False):
    """Arguments for Forecast"""
    take: int
    skip: int
    order_by: Union['NotificationOrderByInput', List['NotificationOrderByInput']]
    where: 'NotificationWhereInput'
    cursor: 'NotificationWhereUniqueInput'
    distinct: List['NotificationScalarFieldKeys']
    include: 'NotificationIncludeFromNotificationRecursive1'


class FindManyNotificationArgsFromForecastRecursive1(TypedDict, total=False):
    """Arguments for Forecast"""
    take: int
    skip: int
    order_by: Union['NotificationOrderByInput', List['NotificationOrderByInput']]
    where: 'NotificationWhereInput'
    cursor: 'NotificationWhereUniqueInput'
    distinct: List['NotificationScalarFieldKeys']
    include: 'NotificationIncludeFromNotificationRecursive2'


class FindManyNotificationArgsFromForecastRecursive2(TypedDict, total=False):
    """Arguments for Forecast"""
    take: int
    skip: int
    order_by: Union['NotificationOrderByInput', List['NotificationOrderByInput']]
    where: 'NotificationWhereInput'
    cursor: 'NotificationWhereUniqueInput'
    distinct: List['NotificationScalarFieldKeys']
    include: 'NotificationIncludeFromNotificationRecursive3'


class FindManyNotificationArgsFromForecastRecursive3(TypedDict, total=False):
    """Arguments for Forecast"""
    take: int
    skip: int
    order_by: Union['NotificationOrderByInput', List['NotificationOrderByInput']]
    where: 'NotificationWhereInput'
    cursor: 'NotificationWhereUniqueInput'
    distinct: List['NotificationScalarFieldKeys']
    include: 'NotificationIncludeFromNotificationRecursive4'


class FindManyNotificationArgsFromForecastRecursive4(TypedDict, total=False):
    """Arguments for Forecast"""
    take: int
    skip: int
    order_by: Union['NotificationOrderByInput', List['NotificationOrderByInput']]
    where: 'NotificationWhereInput'
    cursor: 'NotificationWhereUniqueInput'
    distinct: List['NotificationScalarFieldKeys']
    
    

class ScenarioIncludeFromForecast(TypedDict, total=False):
    """Relational arguments for Forecast"""


class ScenarioIncludeFromForecastRecursive1(TypedDict, total=False):
    """Relational arguments for Forecast"""


class ScenarioIncludeFromForecastRecursive2(TypedDict, total=False):
    """Relational arguments for Forecast"""


class ScenarioIncludeFromForecastRecursive3(TypedDict, total=False):
    """Relational arguments for Forecast"""


class ScenarioIncludeFromForecastRecursive4(TypedDict, total=False):
    """Relational arguments for Forecast"""

    

class ScenarioArgsFromForecast(TypedDict, total=False):
    """Arguments for Forecast"""
    include: 'ScenarioIncludeFromScenarioRecursive1'


class ScenarioArgsFromForecastRecursive1(TypedDict, total=False):
    """Arguments for Forecast"""
    include: 'ScenarioIncludeFromScenarioRecursive2'


class ScenarioArgsFromForecastRecursive2(TypedDict, total=False):
    """Arguments for Forecast"""
    include: 'ScenarioIncludeFromScenarioRecursive3'


class ScenarioArgsFromForecastRecursive3(TypedDict, total=False):
    """Arguments for Forecast"""
    include: 'ScenarioIncludeFromScenarioRecursive4'


class ScenarioArgsFromForecastRecursive4(TypedDict, total=False):
    """Arguments for Forecast"""
    
    

class FindManyScenarioArgsFromForecast(TypedDict, total=False):
    """Arguments for Forecast"""
    take: int
    skip: int
    order_by: Union['ScenarioOrderByInput', List['ScenarioOrderByInput']]
    where: 'ScenarioWhereInput'
    cursor: 'ScenarioWhereUniqueInput'
    distinct: List['ScenarioScalarFieldKeys']
    include: 'ScenarioIncludeFromScenarioRecursive1'


class FindManyScenarioArgsFromForecastRecursive1(TypedDict, total=False):
    """Arguments for Forecast"""
    take: int
    skip: int
    order_by: Union['ScenarioOrderByInput', List['ScenarioOrderByInput']]
    where: 'ScenarioWhereInput'
    cursor: 'ScenarioWhereUniqueInput'
    distinct: List['ScenarioScalarFieldKeys']
    include: 'ScenarioIncludeFromScenarioRecursive2'


class FindManyScenarioArgsFromForecastRecursive2(TypedDict, total=False):
    """Arguments for Forecast"""
    take: int
    skip: int
    order_by: Union['ScenarioOrderByInput', List['ScenarioOrderByInput']]
    where: 'ScenarioWhereInput'
    cursor: 'ScenarioWhereUniqueInput'
    distinct: List['ScenarioScalarFieldKeys']
    include: 'ScenarioIncludeFromScenarioRecursive3'


class FindManyScenarioArgsFromForecastRecursive3(TypedDict, total=False):
    """Arguments for Forecast"""
    take: int
    skip: int
    order_by: Union['ScenarioOrderByInput', List['ScenarioOrderByInput']]
    where: 'ScenarioWhereInput'
    cursor: 'ScenarioWhereUniqueInput'
    distinct: List['ScenarioScalarFieldKeys']
    include: 'ScenarioIncludeFromScenarioRecursive4'


class FindManyScenarioArgsFromForecastRecursive4(TypedDict, total=False):
    """Arguments for Forecast"""
    take: int
    skip: int
    order_by: Union['ScenarioOrderByInput', List['ScenarioOrderByInput']]
    where: 'ScenarioWhereInput'
    cursor: 'ScenarioWhereUniqueInput'
    distinct: List['ScenarioScalarFieldKeys']
    
    

class SocialReportIncludeFromForecast(TypedDict, total=False):
    """Relational arguments for Forecast"""


class SocialReportIncludeFromForecastRecursive1(TypedDict, total=False):
    """Relational arguments for Forecast"""


class SocialReportIncludeFromForecastRecursive2(TypedDict, total=False):
    """Relational arguments for Forecast"""


class SocialReportIncludeFromForecastRecursive3(TypedDict, total=False):
    """Relational arguments for Forecast"""


class SocialReportIncludeFromForecastRecursive4(TypedDict, total=False):
    """Relational arguments for Forecast"""

    

class SocialReportArgsFromForecast(TypedDict, total=False):
    """Arguments for Forecast"""
    include: 'SocialReportIncludeFromSocialReportRecursive1'


class SocialReportArgsFromForecastRecursive1(TypedDict, total=False):
    """Arguments for Forecast"""
    include: 'SocialReportIncludeFromSocialReportRecursive2'


class SocialReportArgsFromForecastRecursive2(TypedDict, total=False):
    """Arguments for Forecast"""
    include: 'SocialReportIncludeFromSocialReportRecursive3'


class SocialReportArgsFromForecastRecursive3(TypedDict, total=False):
    """Arguments for Forecast"""
    include: 'SocialReportIncludeFromSocialReportRecursive4'


class SocialReportArgsFromForecastRecursive4(TypedDict, total=False):
    """Arguments for Forecast"""
    
    

class FindManySocialReportArgsFromForecast(TypedDict, total=False):
    """Arguments for Forecast"""
    take: int
    skip: int
    order_by: Union['SocialReportOrderByInput', List['SocialReportOrderByInput']]
    where: 'SocialReportWhereInput'
    cursor: 'SocialReportWhereUniqueInput'
    distinct: List['SocialReportScalarFieldKeys']
    include: 'SocialReportIncludeFromSocialReportRecursive1'


class FindManySocialReportArgsFromForecastRecursive1(TypedDict, total=False):
    """Arguments for Forecast"""
    take: int
    skip: int
    order_by: Union['SocialReportOrderByInput', List['SocialReportOrderByInput']]
    where: 'SocialReportWhereInput'
    cursor: 'SocialReportWhereUniqueInput'
    distinct: List['SocialReportScalarFieldKeys']
    include: 'SocialReportIncludeFromSocialReportRecursive2'


class FindManySocialReportArgsFromForecastRecursive2(TypedDict, total=False):
    """Arguments for Forecast"""
    take: int
    skip: int
    order_by: Union['SocialReportOrderByInput', List['SocialReportOrderByInput']]
    where: 'SocialReportWhereInput'
    cursor: 'SocialReportWhereUniqueInput'
    distinct: List['SocialReportScalarFieldKeys']
    include: 'SocialReportIncludeFromSocialReportRecursive3'


class FindManySocialReportArgsFromForecastRecursive3(TypedDict, total=False):
    """Arguments for Forecast"""
    take: int
    skip: int
    order_by: Union['SocialReportOrderByInput', List['SocialReportOrderByInput']]
    where: 'SocialReportWhereInput'
    cursor: 'SocialReportWhereUniqueInput'
    distinct: List['SocialReportScalarFieldKeys']
    include: 'SocialReportIncludeFromSocialReportRecursive4'


class FindManySocialReportArgsFromForecastRecursive4(TypedDict, total=False):
    """Arguments for Forecast"""
    take: int
    skip: int
    order_by: Union['SocialReportOrderByInput', List['SocialReportOrderByInput']]
    where: 'SocialReportWhereInput'
    cursor: 'SocialReportWhereUniqueInput'
    distinct: List['SocialReportScalarFieldKeys']
    
    

class TrafficDataIncludeFromForecast(TypedDict, total=False):
    """Relational arguments for Forecast"""


class TrafficDataIncludeFromForecastRecursive1(TypedDict, total=False):
    """Relational arguments for Forecast"""


class TrafficDataIncludeFromForecastRecursive2(TypedDict, total=False):
    """Relational arguments for Forecast"""


class TrafficDataIncludeFromForecastRecursive3(TypedDict, total=False):
    """Relational arguments for Forecast"""


class TrafficDataIncludeFromForecastRecursive4(TypedDict, total=False):
    """Relational arguments for Forecast"""

    

class TrafficDataArgsFromForecast(TypedDict, total=False):
    """Arguments for Forecast"""
    include: 'TrafficDataIncludeFromTrafficDataRecursive1'


class TrafficDataArgsFromForecastRecursive1(TypedDict, total=False):
    """Arguments for Forecast"""
    include: 'TrafficDataIncludeFromTrafficDataRecursive2'


class TrafficDataArgsFromForecastRecursive2(TypedDict, total=False):
    """Arguments for Forecast"""
    include: 'TrafficDataIncludeFromTrafficDataRecursive3'


class TrafficDataArgsFromForecastRecursive3(TypedDict, total=False):
    """Arguments for Forecast"""
    include: 'TrafficDataIncludeFromTrafficDataRecursive4'


class TrafficDataArgsFromForecastRecursive4(TypedDict, total=False):
    """Arguments for Forecast"""
    
    

class FindManyTrafficDataArgsFromForecast(TypedDict, total=False):
    """Arguments for Forecast"""
    take: int
    skip: int
    order_by: Union['TrafficDataOrderByInput', List['TrafficDataOrderByInput']]
    where: 'TrafficDataWhereInput'
    cursor: 'TrafficDataWhereUniqueInput'
    distinct: List['TrafficDataScalarFieldKeys']
    include: 'TrafficDataIncludeFromTrafficDataRecursive1'


class FindManyTrafficDataArgsFromForecastRecursive1(TypedDict, total=False):
    """Arguments for Forecast"""
    take: int
    skip: int
    order_by: Union['TrafficDataOrderByInput', List['TrafficDataOrderByInput']]
    where: 'TrafficDataWhereInput'
    cursor: 'TrafficDataWhereUniqueInput'
    distinct: List['TrafficDataScalarFieldKeys']
    include: 'TrafficDataIncludeFromTrafficDataRecursive2'


class FindManyTrafficDataArgsFromForecastRecursive2(TypedDict, total=False):
    """Arguments for Forecast"""
    take: int
    skip: int
    order_by: Union['TrafficDataOrderByInput', List['TrafficDataOrderByInput']]
    where: 'TrafficDataWhereInput'
    cursor: 'TrafficDataWhereUniqueInput'
    distinct: List['TrafficDataScalarFieldKeys']
    include: 'TrafficDataIncludeFromTrafficDataRecursive3'


class FindManyTrafficDataArgsFromForecastRecursive3(TypedDict, total=False):
    """Arguments for Forecast"""
    take: int
    skip: int
    order_by: Union['TrafficDataOrderByInput', List['TrafficDataOrderByInput']]
    where: 'TrafficDataWhereInput'
    cursor: 'TrafficDataWhereUniqueInput'
    distinct: List['TrafficDataScalarFieldKeys']
    include: 'TrafficDataIncludeFromTrafficDataRecursive4'


class FindManyTrafficDataArgsFromForecastRecursive4(TypedDict, total=False):
    """Arguments for Forecast"""
    take: int
    skip: int
    order_by: Union['TrafficDataOrderByInput', List['TrafficDataOrderByInput']]
    where: 'TrafficDataWhereInput'
    cursor: 'TrafficDataWhereUniqueInput'
    distinct: List['TrafficDataScalarFieldKeys']
    
    

class TrafficLightIncludeFromForecast(TypedDict, total=False):
    """Relational arguments for Forecast"""


class TrafficLightIncludeFromForecastRecursive1(TypedDict, total=False):
    """Relational arguments for Forecast"""


class TrafficLightIncludeFromForecastRecursive2(TypedDict, total=False):
    """Relational arguments for Forecast"""


class TrafficLightIncludeFromForecastRecursive3(TypedDict, total=False):
    """Relational arguments for Forecast"""


class TrafficLightIncludeFromForecastRecursive4(TypedDict, total=False):
    """Relational arguments for Forecast"""

    

class TrafficLightArgsFromForecast(TypedDict, total=False):
    """Arguments for Forecast"""
    include: 'TrafficLightIncludeFromTrafficLightRecursive1'


class TrafficLightArgsFromForecastRecursive1(TypedDict, total=False):
    """Arguments for Forecast"""
    include: 'TrafficLightIncludeFromTrafficLightRecursive2'


class TrafficLightArgsFromForecastRecursive2(TypedDict, total=False):
    """Arguments for Forecast"""
    include: 'TrafficLightIncludeFromTrafficLightRecursive3'


class TrafficLightArgsFromForecastRecursive3(TypedDict, total=False):
    """Arguments for Forecast"""
    include: 'TrafficLightIncludeFromTrafficLightRecursive4'


class TrafficLightArgsFromForecastRecursive4(TypedDict, total=False):
    """Arguments for Forecast"""
    
    

class FindManyTrafficLightArgsFromForecast(TypedDict, total=False):
    """Arguments for Forecast"""
    take: int
    skip: int
    order_by: Union['TrafficLightOrderByInput', List['TrafficLightOrderByInput']]
    where: 'TrafficLightWhereInput'
    cursor: 'TrafficLightWhereUniqueInput'
    distinct: List['TrafficLightScalarFieldKeys']
    include: 'TrafficLightIncludeFromTrafficLightRecursive1'


class FindManyTrafficLightArgsFromForecastRecursive1(TypedDict, total=False):
    """Arguments for Forecast"""
    take: int
    skip: int
    order_by: Union['TrafficLightOrderByInput', List['TrafficLightOrderByInput']]
    where: 'TrafficLightWhereInput'
    cursor: 'TrafficLightWhereUniqueInput'
    distinct: List['TrafficLightScalarFieldKeys']
    include: 'TrafficLightIncludeFromTrafficLightRecursive2'


class FindManyTrafficLightArgsFromForecastRecursive2(TypedDict, total=False):
    """Arguments for Forecast"""
    take: int
    skip: int
    order_by: Union['TrafficLightOrderByInput', List['TrafficLightOrderByInput']]
    where: 'TrafficLightWhereInput'
    cursor: 'TrafficLightWhereUniqueInput'
    distinct: List['TrafficLightScalarFieldKeys']
    include: 'TrafficLightIncludeFromTrafficLightRecursive3'


class FindManyTrafficLightArgsFromForecastRecursive3(TypedDict, total=False):
    """Arguments for Forecast"""
    take: int
    skip: int
    order_by: Union['TrafficLightOrderByInput', List['TrafficLightOrderByInput']]
    where: 'TrafficLightWhereInput'
    cursor: 'TrafficLightWhereUniqueInput'
    distinct: List['TrafficLightScalarFieldKeys']
    include: 'TrafficLightIncludeFromTrafficLightRecursive4'


class FindManyTrafficLightArgsFromForecastRecursive4(TypedDict, total=False):
    """Arguments for Forecast"""
    take: int
    skip: int
    order_by: Union['TrafficLightOrderByInput', List['TrafficLightOrderByInput']]
    where: 'TrafficLightWhereInput'
    cursor: 'TrafficLightWhereUniqueInput'
    distinct: List['TrafficLightScalarFieldKeys']
    


FindManyForecastArgs = FindManyForecastArgsFromForecast
FindFirstForecastArgs = FindManyForecastArgsFromForecast


    

class ForecastWhereInput(TypedDict, total=False):
    """Forecast arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    timestamp: Union[datetime.datetime, 'types.DateTimeFilter']
    location: Union['fields.Base64', 'types.BytesFilter']
    predictedDensity: Union[None, _int, 'types.IntFilter']
    predictedSpeed: Union[None, _float, 'types.FloatFilter']

    # should be noted that AND and NOT should be Union['ForecastWhereInputRecursive1', List['ForecastWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['ForecastWhereInputRecursive1']
    OR: List['ForecastWhereInputRecursive1']
    NOT: List['ForecastWhereInputRecursive1']


class ForecastWhereInputRecursive1(TypedDict, total=False):
    """Forecast arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    timestamp: Union[datetime.datetime, 'types.DateTimeFilter']
    location: Union['fields.Base64', 'types.BytesFilter']
    predictedDensity: Union[None, _int, 'types.IntFilter']
    predictedSpeed: Union[None, _float, 'types.FloatFilter']

    # should be noted that AND and NOT should be Union['ForecastWhereInputRecursive2', List['ForecastWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['ForecastWhereInputRecursive2']
    OR: List['ForecastWhereInputRecursive2']
    NOT: List['ForecastWhereInputRecursive2']


class ForecastWhereInputRecursive2(TypedDict, total=False):
    """Forecast arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    timestamp: Union[datetime.datetime, 'types.DateTimeFilter']
    location: Union['fields.Base64', 'types.BytesFilter']
    predictedDensity: Union[None, _int, 'types.IntFilter']
    predictedSpeed: Union[None, _float, 'types.FloatFilter']

    # should be noted that AND and NOT should be Union['ForecastWhereInputRecursive3', List['ForecastWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['ForecastWhereInputRecursive3']
    OR: List['ForecastWhereInputRecursive3']
    NOT: List['ForecastWhereInputRecursive3']


class ForecastWhereInputRecursive3(TypedDict, total=False):
    """Forecast arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    timestamp: Union[datetime.datetime, 'types.DateTimeFilter']
    location: Union['fields.Base64', 'types.BytesFilter']
    predictedDensity: Union[None, _int, 'types.IntFilter']
    predictedSpeed: Union[None, _float, 'types.FloatFilter']

    # should be noted that AND and NOT should be Union['ForecastWhereInputRecursive4', List['ForecastWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['ForecastWhereInputRecursive4']
    OR: List['ForecastWhereInputRecursive4']
    NOT: List['ForecastWhereInputRecursive4']


class ForecastWhereInputRecursive4(TypedDict, total=False):
    """Forecast arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    timestamp: Union[datetime.datetime, 'types.DateTimeFilter']
    location: Union['fields.Base64', 'types.BytesFilter']
    predictedDensity: Union[None, _int, 'types.IntFilter']
    predictedSpeed: Union[None, _float, 'types.FloatFilter']



# aggregate Forecast types


    

class ForecastScalarWhereWithAggregatesInput(TypedDict, total=False):
    """Forecast arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    timestamp: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    location: Union['fields.Base64', 'types.BytesWithAggregatesFilter']
    predictedDensity: Union[_int, 'types.IntWithAggregatesFilter']
    predictedSpeed: Union[_float, 'types.FloatWithAggregatesFilter']

    AND: List['ForecastScalarWhereWithAggregatesInputRecursive1']
    OR: List['ForecastScalarWhereWithAggregatesInputRecursive1']
    NOT: List['ForecastScalarWhereWithAggregatesInputRecursive1']


class ForecastScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """Forecast arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    timestamp: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    location: Union['fields.Base64', 'types.BytesWithAggregatesFilter']
    predictedDensity: Union[_int, 'types.IntWithAggregatesFilter']
    predictedSpeed: Union[_float, 'types.FloatWithAggregatesFilter']

    AND: List['ForecastScalarWhereWithAggregatesInputRecursive2']
    OR: List['ForecastScalarWhereWithAggregatesInputRecursive2']
    NOT: List['ForecastScalarWhereWithAggregatesInputRecursive2']


class ForecastScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """Forecast arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    timestamp: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    location: Union['fields.Base64', 'types.BytesWithAggregatesFilter']
    predictedDensity: Union[_int, 'types.IntWithAggregatesFilter']
    predictedSpeed: Union[_float, 'types.FloatWithAggregatesFilter']

    AND: List['ForecastScalarWhereWithAggregatesInputRecursive3']
    OR: List['ForecastScalarWhereWithAggregatesInputRecursive3']
    NOT: List['ForecastScalarWhereWithAggregatesInputRecursive3']


class ForecastScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """Forecast arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    timestamp: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    location: Union['fields.Base64', 'types.BytesWithAggregatesFilter']
    predictedDensity: Union[_int, 'types.IntWithAggregatesFilter']
    predictedSpeed: Union[_float, 'types.FloatWithAggregatesFilter']

    AND: List['ForecastScalarWhereWithAggregatesInputRecursive4']
    OR: List['ForecastScalarWhereWithAggregatesInputRecursive4']
    NOT: List['ForecastScalarWhereWithAggregatesInputRecursive4']


class ForecastScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """Forecast arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    timestamp: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    location: Union['fields.Base64', 'types.BytesWithAggregatesFilter']
    predictedDensity: Union[_int, 'types.IntWithAggregatesFilter']
    predictedSpeed: Union[_float, 'types.FloatWithAggregatesFilter']



class ForecastGroupByOutput(TypedDict, total=False):
    id: _str
    timestamp: datetime.datetime
    location: 'fields.Base64'
    predictedDensity: _int
    predictedSpeed: _float
    _sum: 'ForecastSumAggregateOutput'
    _avg: 'ForecastAvgAggregateOutput'
    _min: 'ForecastMinAggregateOutput'
    _max: 'ForecastMaxAggregateOutput'
    _count: 'ForecastCountAggregateOutput'


class ForecastAvgAggregateOutput(TypedDict, total=False):
    """Forecast output for aggregating averages"""
    predictedDensity: float
    predictedSpeed: float


class ForecastSumAggregateOutput(TypedDict, total=False):
    """Forecast output for aggregating sums"""
    predictedDensity: _int
    predictedSpeed: _float


class ForecastScalarAggregateOutput(TypedDict, total=False):
    """Forecast output including scalar fields"""
    id: _str
    timestamp: datetime.datetime
    location: 'fields.Base64'
    predictedDensity: _int
    predictedSpeed: _float


ForecastMinAggregateOutput = ForecastScalarAggregateOutput
ForecastMaxAggregateOutput = ForecastScalarAggregateOutput


class ForecastMaxAggregateInput(TypedDict, total=False):
    """Forecast input for aggregating by max"""
    id: bool
    timestamp: bool
    location: bool
    predictedDensity: bool
    predictedSpeed: bool


class ForecastMinAggregateInput(TypedDict, total=False):
    """Forecast input for aggregating by min"""
    id: bool
    timestamp: bool
    location: bool
    predictedDensity: bool
    predictedSpeed: bool


class ForecastNumberAggregateInput(TypedDict, total=False):
    """Forecast input for aggregating numbers"""
    predictedDensity: bool
    predictedSpeed: bool


ForecastAvgAggregateInput = ForecastNumberAggregateInput
ForecastSumAggregateInput = ForecastNumberAggregateInput


ForecastCountAggregateInput = TypedDict(
    'ForecastCountAggregateInput',
    {
        'id': bool,
        'timestamp': bool,
        'location': bool,
        'predictedDensity': bool,
        'predictedSpeed': bool,
        '_all': bool,
    },
    total=False,
)

ForecastCountAggregateOutput = TypedDict(
    'ForecastCountAggregateOutput',
    {
        'id': int,
        'timestamp': int,
        'location': int,
        'predictedDensity': int,
        'predictedSpeed': int,
        '_all': int,
    },
    total=False,
)


ForecastKeys = Literal[
    'id',
    'timestamp',
    'location',
    'predictedDensity',
    'predictedSpeed',
]
ForecastScalarFieldKeys = Literal[
    'id',
    'timestamp',
    'location',
    'predictedDensity',
    'predictedSpeed',
]
ForecastScalarFieldKeysT = TypeVar('ForecastScalarFieldKeysT', bound=ForecastScalarFieldKeys)

ForecastRelationalFieldKeys = _NoneType

# Incident types

class IncidentOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the Incident create method"""
    id: _str
    location: Optional[_str]


class IncidentCreateInput(IncidentOptionalCreateInput):
    """Required arguments to the Incident create method"""
    description: _str
    severity: _int
    timestamp: datetime.datetime


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class IncidentOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the Incident create method, without relations"""
    id: _str
    location: Optional[_str]


class IncidentCreateWithoutRelationsInput(IncidentOptionalCreateWithoutRelationsInput):
    """Required arguments to the Incident create method, without relations"""
    description: _str
    severity: _int
    timestamp: datetime.datetime

class IncidentConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'IncidentCreateWithoutRelationsInput'
    where: 'IncidentWhereUniqueInput'

class IncidentCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'IncidentCreateWithoutRelationsInput'
    connect: 'IncidentWhereUniqueInput'
    connect_or_create: 'IncidentConnectOrCreateWithoutRelationsInput'


class IncidentCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['IncidentCreateWithoutRelationsInput', List['IncidentCreateWithoutRelationsInput']]
    connect: Union['IncidentWhereUniqueInput', List['IncidentWhereUniqueInput']]
    connect_or_create: Union['IncidentConnectOrCreateWithoutRelationsInput', List['IncidentConnectOrCreateWithoutRelationsInput']]

_IncidentWhereUnique_id_Input = TypedDict(
    '_IncidentWhereUnique_id_Input',
    {
        'id': '_str',
    },
    total=True
)

IncidentWhereUniqueInput = _IncidentWhereUnique_id_Input


class IncidentUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: _str
    description: _str
    severity: Union[AtomicIntInput, _int]
    timestamp: datetime.datetime
    location: Optional[_str]


class IncidentUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: _str
    description: _str
    severity: Union[AtomicIntInput, _int]
    timestamp: datetime.datetime
    location: Optional[_str]


class IncidentUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['IncidentCreateWithoutRelationsInput']
    connect: List['IncidentWhereUniqueInput']
    connect_or_create: List['IncidentConnectOrCreateWithoutRelationsInput']
    set: List['IncidentWhereUniqueInput']
    disconnect: List['IncidentWhereUniqueInput']
    delete: List['IncidentWhereUniqueInput']

    # TODO
    # update: List['IncidentUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['IncidentUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['IncidentScalarWhereInput']
    # upsert: List['IncidentUpserteWithWhereUniqueWithoutRelationsInput']


class IncidentUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'IncidentCreateWithoutRelationsInput'
    connect: 'IncidentWhereUniqueInput'
    connect_or_create: 'IncidentConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'IncidentUpdateInput'
    # upsert: 'IncidentUpsertWithoutRelationsInput'


class IncidentUpsertInput(TypedDict):
    create: 'IncidentCreateInput'
    update: 'IncidentUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_Incident_id_OrderByInput = TypedDict(
    '_Incident_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_Incident_description_OrderByInput = TypedDict(
    '_Incident_description_OrderByInput',
    {
        'description': 'SortOrder',
    },
    total=True
)

_Incident_severity_OrderByInput = TypedDict(
    '_Incident_severity_OrderByInput',
    {
        'severity': 'SortOrder',
    },
    total=True
)

_Incident_timestamp_OrderByInput = TypedDict(
    '_Incident_timestamp_OrderByInput',
    {
        'timestamp': 'SortOrder',
    },
    total=True
)

_Incident_location_OrderByInput = TypedDict(
    '_Incident_location_OrderByInput',
    {
        'location': 'SortOrder',
    },
    total=True
)

_Incident_RelevanceInner = TypedDict(
    '_Incident_RelevanceInner',
    {
        'fields': 'List[IncidentScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_Incident_RelevanceOrderByInput = TypedDict(
    '_Incident_RelevanceOrderByInput',
    {
        '_relevance': '_Incident_RelevanceInner',
    },
    total=True
)

IncidentOrderByInput = Union[
    '_Incident_id_OrderByInput',
    '_Incident_description_OrderByInput',
    '_Incident_severity_OrderByInput',
    '_Incident_timestamp_OrderByInput',
    '_Incident_location_OrderByInput',
    '_Incident_RelevanceOrderByInput',
]



# recursive Incident types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

IncidentRelationFilter = TypedDict(
    'IncidentRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class IncidentListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class IncidentInclude(TypedDict, total=False):
    """Incident relational arguments"""


    

class AchievementIncludeFromIncident(TypedDict, total=False):
    """Relational arguments for Incident"""


class AchievementIncludeFromIncidentRecursive1(TypedDict, total=False):
    """Relational arguments for Incident"""


class AchievementIncludeFromIncidentRecursive2(TypedDict, total=False):
    """Relational arguments for Incident"""


class AchievementIncludeFromIncidentRecursive3(TypedDict, total=False):
    """Relational arguments for Incident"""


class AchievementIncludeFromIncidentRecursive4(TypedDict, total=False):
    """Relational arguments for Incident"""

    

class AchievementArgsFromIncident(TypedDict, total=False):
    """Arguments for Incident"""
    include: 'AchievementIncludeFromAchievementRecursive1'


class AchievementArgsFromIncidentRecursive1(TypedDict, total=False):
    """Arguments for Incident"""
    include: 'AchievementIncludeFromAchievementRecursive2'


class AchievementArgsFromIncidentRecursive2(TypedDict, total=False):
    """Arguments for Incident"""
    include: 'AchievementIncludeFromAchievementRecursive3'


class AchievementArgsFromIncidentRecursive3(TypedDict, total=False):
    """Arguments for Incident"""
    include: 'AchievementIncludeFromAchievementRecursive4'


class AchievementArgsFromIncidentRecursive4(TypedDict, total=False):
    """Arguments for Incident"""
    
    

class FindManyAchievementArgsFromIncident(TypedDict, total=False):
    """Arguments for Incident"""
    take: int
    skip: int
    order_by: Union['AchievementOrderByInput', List['AchievementOrderByInput']]
    where: 'AchievementWhereInput'
    cursor: 'AchievementWhereUniqueInput'
    distinct: List['AchievementScalarFieldKeys']
    include: 'AchievementIncludeFromAchievementRecursive1'


class FindManyAchievementArgsFromIncidentRecursive1(TypedDict, total=False):
    """Arguments for Incident"""
    take: int
    skip: int
    order_by: Union['AchievementOrderByInput', List['AchievementOrderByInput']]
    where: 'AchievementWhereInput'
    cursor: 'AchievementWhereUniqueInput'
    distinct: List['AchievementScalarFieldKeys']
    include: 'AchievementIncludeFromAchievementRecursive2'


class FindManyAchievementArgsFromIncidentRecursive2(TypedDict, total=False):
    """Arguments for Incident"""
    take: int
    skip: int
    order_by: Union['AchievementOrderByInput', List['AchievementOrderByInput']]
    where: 'AchievementWhereInput'
    cursor: 'AchievementWhereUniqueInput'
    distinct: List['AchievementScalarFieldKeys']
    include: 'AchievementIncludeFromAchievementRecursive3'


class FindManyAchievementArgsFromIncidentRecursive3(TypedDict, total=False):
    """Arguments for Incident"""
    take: int
    skip: int
    order_by: Union['AchievementOrderByInput', List['AchievementOrderByInput']]
    where: 'AchievementWhereInput'
    cursor: 'AchievementWhereUniqueInput'
    distinct: List['AchievementScalarFieldKeys']
    include: 'AchievementIncludeFromAchievementRecursive4'


class FindManyAchievementArgsFromIncidentRecursive4(TypedDict, total=False):
    """Arguments for Incident"""
    take: int
    skip: int
    order_by: Union['AchievementOrderByInput', List['AchievementOrderByInput']]
    where: 'AchievementWhereInput'
    cursor: 'AchievementWhereUniqueInput'
    distinct: List['AchievementScalarFieldKeys']
    
    

class CameraIncludeFromIncident(TypedDict, total=False):
    """Relational arguments for Incident"""


class CameraIncludeFromIncidentRecursive1(TypedDict, total=False):
    """Relational arguments for Incident"""


class CameraIncludeFromIncidentRecursive2(TypedDict, total=False):
    """Relational arguments for Incident"""


class CameraIncludeFromIncidentRecursive3(TypedDict, total=False):
    """Relational arguments for Incident"""


class CameraIncludeFromIncidentRecursive4(TypedDict, total=False):
    """Relational arguments for Incident"""

    

class CameraArgsFromIncident(TypedDict, total=False):
    """Arguments for Incident"""
    include: 'CameraIncludeFromCameraRecursive1'


class CameraArgsFromIncidentRecursive1(TypedDict, total=False):
    """Arguments for Incident"""
    include: 'CameraIncludeFromCameraRecursive2'


class CameraArgsFromIncidentRecursive2(TypedDict, total=False):
    """Arguments for Incident"""
    include: 'CameraIncludeFromCameraRecursive3'


class CameraArgsFromIncidentRecursive3(TypedDict, total=False):
    """Arguments for Incident"""
    include: 'CameraIncludeFromCameraRecursive4'


class CameraArgsFromIncidentRecursive4(TypedDict, total=False):
    """Arguments for Incident"""
    
    

class FindManyCameraArgsFromIncident(TypedDict, total=False):
    """Arguments for Incident"""
    take: int
    skip: int
    order_by: Union['CameraOrderByInput', List['CameraOrderByInput']]
    where: 'CameraWhereInput'
    cursor: 'CameraWhereUniqueInput'
    distinct: List['CameraScalarFieldKeys']
    include: 'CameraIncludeFromCameraRecursive1'


class FindManyCameraArgsFromIncidentRecursive1(TypedDict, total=False):
    """Arguments for Incident"""
    take: int
    skip: int
    order_by: Union['CameraOrderByInput', List['CameraOrderByInput']]
    where: 'CameraWhereInput'
    cursor: 'CameraWhereUniqueInput'
    distinct: List['CameraScalarFieldKeys']
    include: 'CameraIncludeFromCameraRecursive2'


class FindManyCameraArgsFromIncidentRecursive2(TypedDict, total=False):
    """Arguments for Incident"""
    take: int
    skip: int
    order_by: Union['CameraOrderByInput', List['CameraOrderByInput']]
    where: 'CameraWhereInput'
    cursor: 'CameraWhereUniqueInput'
    distinct: List['CameraScalarFieldKeys']
    include: 'CameraIncludeFromCameraRecursive3'


class FindManyCameraArgsFromIncidentRecursive3(TypedDict, total=False):
    """Arguments for Incident"""
    take: int
    skip: int
    order_by: Union['CameraOrderByInput', List['CameraOrderByInput']]
    where: 'CameraWhereInput'
    cursor: 'CameraWhereUniqueInput'
    distinct: List['CameraScalarFieldKeys']
    include: 'CameraIncludeFromCameraRecursive4'


class FindManyCameraArgsFromIncidentRecursive4(TypedDict, total=False):
    """Arguments for Incident"""
    take: int
    skip: int
    order_by: Union['CameraOrderByInput', List['CameraOrderByInput']]
    where: 'CameraWhereInput'
    cursor: 'CameraWhereUniqueInput'
    distinct: List['CameraScalarFieldKeys']
    
    

class EffectivenessIncludeFromIncident(TypedDict, total=False):
    """Relational arguments for Incident"""


class EffectivenessIncludeFromIncidentRecursive1(TypedDict, total=False):
    """Relational arguments for Incident"""


class EffectivenessIncludeFromIncidentRecursive2(TypedDict, total=False):
    """Relational arguments for Incident"""


class EffectivenessIncludeFromIncidentRecursive3(TypedDict, total=False):
    """Relational arguments for Incident"""


class EffectivenessIncludeFromIncidentRecursive4(TypedDict, total=False):
    """Relational arguments for Incident"""

    

class EffectivenessArgsFromIncident(TypedDict, total=False):
    """Arguments for Incident"""
    include: 'EffectivenessIncludeFromEffectivenessRecursive1'


class EffectivenessArgsFromIncidentRecursive1(TypedDict, total=False):
    """Arguments for Incident"""
    include: 'EffectivenessIncludeFromEffectivenessRecursive2'


class EffectivenessArgsFromIncidentRecursive2(TypedDict, total=False):
    """Arguments for Incident"""
    include: 'EffectivenessIncludeFromEffectivenessRecursive3'


class EffectivenessArgsFromIncidentRecursive3(TypedDict, total=False):
    """Arguments for Incident"""
    include: 'EffectivenessIncludeFromEffectivenessRecursive4'


class EffectivenessArgsFromIncidentRecursive4(TypedDict, total=False):
    """Arguments for Incident"""
    
    

class FindManyEffectivenessArgsFromIncident(TypedDict, total=False):
    """Arguments for Incident"""
    take: int
    skip: int
    order_by: Union['EffectivenessOrderByInput', List['EffectivenessOrderByInput']]
    where: 'EffectivenessWhereInput'
    cursor: 'EffectivenessWhereUniqueInput'
    distinct: List['EffectivenessScalarFieldKeys']
    include: 'EffectivenessIncludeFromEffectivenessRecursive1'


class FindManyEffectivenessArgsFromIncidentRecursive1(TypedDict, total=False):
    """Arguments for Incident"""
    take: int
    skip: int
    order_by: Union['EffectivenessOrderByInput', List['EffectivenessOrderByInput']]
    where: 'EffectivenessWhereInput'
    cursor: 'EffectivenessWhereUniqueInput'
    distinct: List['EffectivenessScalarFieldKeys']
    include: 'EffectivenessIncludeFromEffectivenessRecursive2'


class FindManyEffectivenessArgsFromIncidentRecursive2(TypedDict, total=False):
    """Arguments for Incident"""
    take: int
    skip: int
    order_by: Union['EffectivenessOrderByInput', List['EffectivenessOrderByInput']]
    where: 'EffectivenessWhereInput'
    cursor: 'EffectivenessWhereUniqueInput'
    distinct: List['EffectivenessScalarFieldKeys']
    include: 'EffectivenessIncludeFromEffectivenessRecursive3'


class FindManyEffectivenessArgsFromIncidentRecursive3(TypedDict, total=False):
    """Arguments for Incident"""
    take: int
    skip: int
    order_by: Union['EffectivenessOrderByInput', List['EffectivenessOrderByInput']]
    where: 'EffectivenessWhereInput'
    cursor: 'EffectivenessWhereUniqueInput'
    distinct: List['EffectivenessScalarFieldKeys']
    include: 'EffectivenessIncludeFromEffectivenessRecursive4'


class FindManyEffectivenessArgsFromIncidentRecursive4(TypedDict, total=False):
    """Arguments for Incident"""
    take: int
    skip: int
    order_by: Union['EffectivenessOrderByInput', List['EffectivenessOrderByInput']]
    where: 'EffectivenessWhereInput'
    cursor: 'EffectivenessWhereUniqueInput'
    distinct: List['EffectivenessScalarFieldKeys']
    
    

class EnvironmentalDataIncludeFromIncident(TypedDict, total=False):
    """Relational arguments for Incident"""


class EnvironmentalDataIncludeFromIncidentRecursive1(TypedDict, total=False):
    """Relational arguments for Incident"""


class EnvironmentalDataIncludeFromIncidentRecursive2(TypedDict, total=False):
    """Relational arguments for Incident"""


class EnvironmentalDataIncludeFromIncidentRecursive3(TypedDict, total=False):
    """Relational arguments for Incident"""


class EnvironmentalDataIncludeFromIncidentRecursive4(TypedDict, total=False):
    """Relational arguments for Incident"""

    

class EnvironmentalDataArgsFromIncident(TypedDict, total=False):
    """Arguments for Incident"""
    include: 'EnvironmentalDataIncludeFromEnvironmentalDataRecursive1'


class EnvironmentalDataArgsFromIncidentRecursive1(TypedDict, total=False):
    """Arguments for Incident"""
    include: 'EnvironmentalDataIncludeFromEnvironmentalDataRecursive2'


class EnvironmentalDataArgsFromIncidentRecursive2(TypedDict, total=False):
    """Arguments for Incident"""
    include: 'EnvironmentalDataIncludeFromEnvironmentalDataRecursive3'


class EnvironmentalDataArgsFromIncidentRecursive3(TypedDict, total=False):
    """Arguments for Incident"""
    include: 'EnvironmentalDataIncludeFromEnvironmentalDataRecursive4'


class EnvironmentalDataArgsFromIncidentRecursive4(TypedDict, total=False):
    """Arguments for Incident"""
    
    

class FindManyEnvironmentalDataArgsFromIncident(TypedDict, total=False):
    """Arguments for Incident"""
    take: int
    skip: int
    order_by: Union['EnvironmentalDataOrderByInput', List['EnvironmentalDataOrderByInput']]
    where: 'EnvironmentalDataWhereInput'
    cursor: 'EnvironmentalDataWhereUniqueInput'
    distinct: List['EnvironmentalDataScalarFieldKeys']
    include: 'EnvironmentalDataIncludeFromEnvironmentalDataRecursive1'


class FindManyEnvironmentalDataArgsFromIncidentRecursive1(TypedDict, total=False):
    """Arguments for Incident"""
    take: int
    skip: int
    order_by: Union['EnvironmentalDataOrderByInput', List['EnvironmentalDataOrderByInput']]
    where: 'EnvironmentalDataWhereInput'
    cursor: 'EnvironmentalDataWhereUniqueInput'
    distinct: List['EnvironmentalDataScalarFieldKeys']
    include: 'EnvironmentalDataIncludeFromEnvironmentalDataRecursive2'


class FindManyEnvironmentalDataArgsFromIncidentRecursive2(TypedDict, total=False):
    """Arguments for Incident"""
    take: int
    skip: int
    order_by: Union['EnvironmentalDataOrderByInput', List['EnvironmentalDataOrderByInput']]
    where: 'EnvironmentalDataWhereInput'
    cursor: 'EnvironmentalDataWhereUniqueInput'
    distinct: List['EnvironmentalDataScalarFieldKeys']
    include: 'EnvironmentalDataIncludeFromEnvironmentalDataRecursive3'


class FindManyEnvironmentalDataArgsFromIncidentRecursive3(TypedDict, total=False):
    """Arguments for Incident"""
    take: int
    skip: int
    order_by: Union['EnvironmentalDataOrderByInput', List['EnvironmentalDataOrderByInput']]
    where: 'EnvironmentalDataWhereInput'
    cursor: 'EnvironmentalDataWhereUniqueInput'
    distinct: List['EnvironmentalDataScalarFieldKeys']
    include: 'EnvironmentalDataIncludeFromEnvironmentalDataRecursive4'


class FindManyEnvironmentalDataArgsFromIncidentRecursive4(TypedDict, total=False):
    """Arguments for Incident"""
    take: int
    skip: int
    order_by: Union['EnvironmentalDataOrderByInput', List['EnvironmentalDataOrderByInput']]
    where: 'EnvironmentalDataWhereInput'
    cursor: 'EnvironmentalDataWhereUniqueInput'
    distinct: List['EnvironmentalDataScalarFieldKeys']
    
    

class EventIncludeFromIncident(TypedDict, total=False):
    """Relational arguments for Incident"""


class EventIncludeFromIncidentRecursive1(TypedDict, total=False):
    """Relational arguments for Incident"""


class EventIncludeFromIncidentRecursive2(TypedDict, total=False):
    """Relational arguments for Incident"""


class EventIncludeFromIncidentRecursive3(TypedDict, total=False):
    """Relational arguments for Incident"""


class EventIncludeFromIncidentRecursive4(TypedDict, total=False):
    """Relational arguments for Incident"""

    

class EventArgsFromIncident(TypedDict, total=False):
    """Arguments for Incident"""
    include: 'EventIncludeFromEventRecursive1'


class EventArgsFromIncidentRecursive1(TypedDict, total=False):
    """Arguments for Incident"""
    include: 'EventIncludeFromEventRecursive2'


class EventArgsFromIncidentRecursive2(TypedDict, total=False):
    """Arguments for Incident"""
    include: 'EventIncludeFromEventRecursive3'


class EventArgsFromIncidentRecursive3(TypedDict, total=False):
    """Arguments for Incident"""
    include: 'EventIncludeFromEventRecursive4'


class EventArgsFromIncidentRecursive4(TypedDict, total=False):
    """Arguments for Incident"""
    
    

class FindManyEventArgsFromIncident(TypedDict, total=False):
    """Arguments for Incident"""
    take: int
    skip: int
    order_by: Union['EventOrderByInput', List['EventOrderByInput']]
    where: 'EventWhereInput'
    cursor: 'EventWhereUniqueInput'
    distinct: List['EventScalarFieldKeys']
    include: 'EventIncludeFromEventRecursive1'


class FindManyEventArgsFromIncidentRecursive1(TypedDict, total=False):
    """Arguments for Incident"""
    take: int
    skip: int
    order_by: Union['EventOrderByInput', List['EventOrderByInput']]
    where: 'EventWhereInput'
    cursor: 'EventWhereUniqueInput'
    distinct: List['EventScalarFieldKeys']
    include: 'EventIncludeFromEventRecursive2'


class FindManyEventArgsFromIncidentRecursive2(TypedDict, total=False):
    """Arguments for Incident"""
    take: int
    skip: int
    order_by: Union['EventOrderByInput', List['EventOrderByInput']]
    where: 'EventWhereInput'
    cursor: 'EventWhereUniqueInput'
    distinct: List['EventScalarFieldKeys']
    include: 'EventIncludeFromEventRecursive3'


class FindManyEventArgsFromIncidentRecursive3(TypedDict, total=False):
    """Arguments for Incident"""
    take: int
    skip: int
    order_by: Union['EventOrderByInput', List['EventOrderByInput']]
    where: 'EventWhereInput'
    cursor: 'EventWhereUniqueInput'
    distinct: List['EventScalarFieldKeys']
    include: 'EventIncludeFromEventRecursive4'


class FindManyEventArgsFromIncidentRecursive4(TypedDict, total=False):
    """Arguments for Incident"""
    take: int
    skip: int
    order_by: Union['EventOrderByInput', List['EventOrderByInput']]
    where: 'EventWhereInput'
    cursor: 'EventWhereUniqueInput'
    distinct: List['EventScalarFieldKeys']
    
    

class ForecastIncludeFromIncident(TypedDict, total=False):
    """Relational arguments for Incident"""


class ForecastIncludeFromIncidentRecursive1(TypedDict, total=False):
    """Relational arguments for Incident"""


class ForecastIncludeFromIncidentRecursive2(TypedDict, total=False):
    """Relational arguments for Incident"""


class ForecastIncludeFromIncidentRecursive3(TypedDict, total=False):
    """Relational arguments for Incident"""


class ForecastIncludeFromIncidentRecursive4(TypedDict, total=False):
    """Relational arguments for Incident"""

    

class ForecastArgsFromIncident(TypedDict, total=False):
    """Arguments for Incident"""
    include: 'ForecastIncludeFromForecastRecursive1'


class ForecastArgsFromIncidentRecursive1(TypedDict, total=False):
    """Arguments for Incident"""
    include: 'ForecastIncludeFromForecastRecursive2'


class ForecastArgsFromIncidentRecursive2(TypedDict, total=False):
    """Arguments for Incident"""
    include: 'ForecastIncludeFromForecastRecursive3'


class ForecastArgsFromIncidentRecursive3(TypedDict, total=False):
    """Arguments for Incident"""
    include: 'ForecastIncludeFromForecastRecursive4'


class ForecastArgsFromIncidentRecursive4(TypedDict, total=False):
    """Arguments for Incident"""
    
    

class FindManyForecastArgsFromIncident(TypedDict, total=False):
    """Arguments for Incident"""
    take: int
    skip: int
    order_by: Union['ForecastOrderByInput', List['ForecastOrderByInput']]
    where: 'ForecastWhereInput'
    cursor: 'ForecastWhereUniqueInput'
    distinct: List['ForecastScalarFieldKeys']
    include: 'ForecastIncludeFromForecastRecursive1'


class FindManyForecastArgsFromIncidentRecursive1(TypedDict, total=False):
    """Arguments for Incident"""
    take: int
    skip: int
    order_by: Union['ForecastOrderByInput', List['ForecastOrderByInput']]
    where: 'ForecastWhereInput'
    cursor: 'ForecastWhereUniqueInput'
    distinct: List['ForecastScalarFieldKeys']
    include: 'ForecastIncludeFromForecastRecursive2'


class FindManyForecastArgsFromIncidentRecursive2(TypedDict, total=False):
    """Arguments for Incident"""
    take: int
    skip: int
    order_by: Union['ForecastOrderByInput', List['ForecastOrderByInput']]
    where: 'ForecastWhereInput'
    cursor: 'ForecastWhereUniqueInput'
    distinct: List['ForecastScalarFieldKeys']
    include: 'ForecastIncludeFromForecastRecursive3'


class FindManyForecastArgsFromIncidentRecursive3(TypedDict, total=False):
    """Arguments for Incident"""
    take: int
    skip: int
    order_by: Union['ForecastOrderByInput', List['ForecastOrderByInput']]
    where: 'ForecastWhereInput'
    cursor: 'ForecastWhereUniqueInput'
    distinct: List['ForecastScalarFieldKeys']
    include: 'ForecastIncludeFromForecastRecursive4'


class FindManyForecastArgsFromIncidentRecursive4(TypedDict, total=False):
    """Arguments for Incident"""
    take: int
    skip: int
    order_by: Union['ForecastOrderByInput', List['ForecastOrderByInput']]
    where: 'ForecastWhereInput'
    cursor: 'ForecastWhereUniqueInput'
    distinct: List['ForecastScalarFieldKeys']
    
    

class IncidentIncludeFromIncident(TypedDict, total=False):
    """Relational arguments for Incident"""


class IncidentIncludeFromIncidentRecursive1(TypedDict, total=False):
    """Relational arguments for Incident"""


class IncidentIncludeFromIncidentRecursive2(TypedDict, total=False):
    """Relational arguments for Incident"""


class IncidentIncludeFromIncidentRecursive3(TypedDict, total=False):
    """Relational arguments for Incident"""


class IncidentIncludeFromIncidentRecursive4(TypedDict, total=False):
    """Relational arguments for Incident"""

    

class IncidentArgsFromIncident(TypedDict, total=False):
    """Arguments for Incident"""
    include: 'IncidentIncludeFromIncidentRecursive1'


class IncidentArgsFromIncidentRecursive1(TypedDict, total=False):
    """Arguments for Incident"""
    include: 'IncidentIncludeFromIncidentRecursive2'


class IncidentArgsFromIncidentRecursive2(TypedDict, total=False):
    """Arguments for Incident"""
    include: 'IncidentIncludeFromIncidentRecursive3'


class IncidentArgsFromIncidentRecursive3(TypedDict, total=False):
    """Arguments for Incident"""
    include: 'IncidentIncludeFromIncidentRecursive4'


class IncidentArgsFromIncidentRecursive4(TypedDict, total=False):
    """Arguments for Incident"""
    
    

class FindManyIncidentArgsFromIncident(TypedDict, total=False):
    """Arguments for Incident"""
    take: int
    skip: int
    order_by: Union['IncidentOrderByInput', List['IncidentOrderByInput']]
    where: 'IncidentWhereInput'
    cursor: 'IncidentWhereUniqueInput'
    distinct: List['IncidentScalarFieldKeys']
    include: 'IncidentIncludeFromIncidentRecursive1'


class FindManyIncidentArgsFromIncidentRecursive1(TypedDict, total=False):
    """Arguments for Incident"""
    take: int
    skip: int
    order_by: Union['IncidentOrderByInput', List['IncidentOrderByInput']]
    where: 'IncidentWhereInput'
    cursor: 'IncidentWhereUniqueInput'
    distinct: List['IncidentScalarFieldKeys']
    include: 'IncidentIncludeFromIncidentRecursive2'


class FindManyIncidentArgsFromIncidentRecursive2(TypedDict, total=False):
    """Arguments for Incident"""
    take: int
    skip: int
    order_by: Union['IncidentOrderByInput', List['IncidentOrderByInput']]
    where: 'IncidentWhereInput'
    cursor: 'IncidentWhereUniqueInput'
    distinct: List['IncidentScalarFieldKeys']
    include: 'IncidentIncludeFromIncidentRecursive3'


class FindManyIncidentArgsFromIncidentRecursive3(TypedDict, total=False):
    """Arguments for Incident"""
    take: int
    skip: int
    order_by: Union['IncidentOrderByInput', List['IncidentOrderByInput']]
    where: 'IncidentWhereInput'
    cursor: 'IncidentWhereUniqueInput'
    distinct: List['IncidentScalarFieldKeys']
    include: 'IncidentIncludeFromIncidentRecursive4'


class FindManyIncidentArgsFromIncidentRecursive4(TypedDict, total=False):
    """Arguments for Incident"""
    take: int
    skip: int
    order_by: Union['IncidentOrderByInput', List['IncidentOrderByInput']]
    where: 'IncidentWhereInput'
    cursor: 'IncidentWhereUniqueInput'
    distinct: List['IncidentScalarFieldKeys']
    
    

class NotificationIncludeFromIncident(TypedDict, total=False):
    """Relational arguments for Incident"""


class NotificationIncludeFromIncidentRecursive1(TypedDict, total=False):
    """Relational arguments for Incident"""


class NotificationIncludeFromIncidentRecursive2(TypedDict, total=False):
    """Relational arguments for Incident"""


class NotificationIncludeFromIncidentRecursive3(TypedDict, total=False):
    """Relational arguments for Incident"""


class NotificationIncludeFromIncidentRecursive4(TypedDict, total=False):
    """Relational arguments for Incident"""

    

class NotificationArgsFromIncident(TypedDict, total=False):
    """Arguments for Incident"""
    include: 'NotificationIncludeFromNotificationRecursive1'


class NotificationArgsFromIncidentRecursive1(TypedDict, total=False):
    """Arguments for Incident"""
    include: 'NotificationIncludeFromNotificationRecursive2'


class NotificationArgsFromIncidentRecursive2(TypedDict, total=False):
    """Arguments for Incident"""
    include: 'NotificationIncludeFromNotificationRecursive3'


class NotificationArgsFromIncidentRecursive3(TypedDict, total=False):
    """Arguments for Incident"""
    include: 'NotificationIncludeFromNotificationRecursive4'


class NotificationArgsFromIncidentRecursive4(TypedDict, total=False):
    """Arguments for Incident"""
    
    

class FindManyNotificationArgsFromIncident(TypedDict, total=False):
    """Arguments for Incident"""
    take: int
    skip: int
    order_by: Union['NotificationOrderByInput', List['NotificationOrderByInput']]
    where: 'NotificationWhereInput'
    cursor: 'NotificationWhereUniqueInput'
    distinct: List['NotificationScalarFieldKeys']
    include: 'NotificationIncludeFromNotificationRecursive1'


class FindManyNotificationArgsFromIncidentRecursive1(TypedDict, total=False):
    """Arguments for Incident"""
    take: int
    skip: int
    order_by: Union['NotificationOrderByInput', List['NotificationOrderByInput']]
    where: 'NotificationWhereInput'
    cursor: 'NotificationWhereUniqueInput'
    distinct: List['NotificationScalarFieldKeys']
    include: 'NotificationIncludeFromNotificationRecursive2'


class FindManyNotificationArgsFromIncidentRecursive2(TypedDict, total=False):
    """Arguments for Incident"""
    take: int
    skip: int
    order_by: Union['NotificationOrderByInput', List['NotificationOrderByInput']]
    where: 'NotificationWhereInput'
    cursor: 'NotificationWhereUniqueInput'
    distinct: List['NotificationScalarFieldKeys']
    include: 'NotificationIncludeFromNotificationRecursive3'


class FindManyNotificationArgsFromIncidentRecursive3(TypedDict, total=False):
    """Arguments for Incident"""
    take: int
    skip: int
    order_by: Union['NotificationOrderByInput', List['NotificationOrderByInput']]
    where: 'NotificationWhereInput'
    cursor: 'NotificationWhereUniqueInput'
    distinct: List['NotificationScalarFieldKeys']
    include: 'NotificationIncludeFromNotificationRecursive4'


class FindManyNotificationArgsFromIncidentRecursive4(TypedDict, total=False):
    """Arguments for Incident"""
    take: int
    skip: int
    order_by: Union['NotificationOrderByInput', List['NotificationOrderByInput']]
    where: 'NotificationWhereInput'
    cursor: 'NotificationWhereUniqueInput'
    distinct: List['NotificationScalarFieldKeys']
    
    

class ScenarioIncludeFromIncident(TypedDict, total=False):
    """Relational arguments for Incident"""


class ScenarioIncludeFromIncidentRecursive1(TypedDict, total=False):
    """Relational arguments for Incident"""


class ScenarioIncludeFromIncidentRecursive2(TypedDict, total=False):
    """Relational arguments for Incident"""


class ScenarioIncludeFromIncidentRecursive3(TypedDict, total=False):
    """Relational arguments for Incident"""


class ScenarioIncludeFromIncidentRecursive4(TypedDict, total=False):
    """Relational arguments for Incident"""

    

class ScenarioArgsFromIncident(TypedDict, total=False):
    """Arguments for Incident"""
    include: 'ScenarioIncludeFromScenarioRecursive1'


class ScenarioArgsFromIncidentRecursive1(TypedDict, total=False):
    """Arguments for Incident"""
    include: 'ScenarioIncludeFromScenarioRecursive2'


class ScenarioArgsFromIncidentRecursive2(TypedDict, total=False):
    """Arguments for Incident"""
    include: 'ScenarioIncludeFromScenarioRecursive3'


class ScenarioArgsFromIncidentRecursive3(TypedDict, total=False):
    """Arguments for Incident"""
    include: 'ScenarioIncludeFromScenarioRecursive4'


class ScenarioArgsFromIncidentRecursive4(TypedDict, total=False):
    """Arguments for Incident"""
    
    

class FindManyScenarioArgsFromIncident(TypedDict, total=False):
    """Arguments for Incident"""
    take: int
    skip: int
    order_by: Union['ScenarioOrderByInput', List['ScenarioOrderByInput']]
    where: 'ScenarioWhereInput'
    cursor: 'ScenarioWhereUniqueInput'
    distinct: List['ScenarioScalarFieldKeys']
    include: 'ScenarioIncludeFromScenarioRecursive1'


class FindManyScenarioArgsFromIncidentRecursive1(TypedDict, total=False):
    """Arguments for Incident"""
    take: int
    skip: int
    order_by: Union['ScenarioOrderByInput', List['ScenarioOrderByInput']]
    where: 'ScenarioWhereInput'
    cursor: 'ScenarioWhereUniqueInput'
    distinct: List['ScenarioScalarFieldKeys']
    include: 'ScenarioIncludeFromScenarioRecursive2'


class FindManyScenarioArgsFromIncidentRecursive2(TypedDict, total=False):
    """Arguments for Incident"""
    take: int
    skip: int
    order_by: Union['ScenarioOrderByInput', List['ScenarioOrderByInput']]
    where: 'ScenarioWhereInput'
    cursor: 'ScenarioWhereUniqueInput'
    distinct: List['ScenarioScalarFieldKeys']
    include: 'ScenarioIncludeFromScenarioRecursive3'


class FindManyScenarioArgsFromIncidentRecursive3(TypedDict, total=False):
    """Arguments for Incident"""
    take: int
    skip: int
    order_by: Union['ScenarioOrderByInput', List['ScenarioOrderByInput']]
    where: 'ScenarioWhereInput'
    cursor: 'ScenarioWhereUniqueInput'
    distinct: List['ScenarioScalarFieldKeys']
    include: 'ScenarioIncludeFromScenarioRecursive4'


class FindManyScenarioArgsFromIncidentRecursive4(TypedDict, total=False):
    """Arguments for Incident"""
    take: int
    skip: int
    order_by: Union['ScenarioOrderByInput', List['ScenarioOrderByInput']]
    where: 'ScenarioWhereInput'
    cursor: 'ScenarioWhereUniqueInput'
    distinct: List['ScenarioScalarFieldKeys']
    
    

class SocialReportIncludeFromIncident(TypedDict, total=False):
    """Relational arguments for Incident"""


class SocialReportIncludeFromIncidentRecursive1(TypedDict, total=False):
    """Relational arguments for Incident"""


class SocialReportIncludeFromIncidentRecursive2(TypedDict, total=False):
    """Relational arguments for Incident"""


class SocialReportIncludeFromIncidentRecursive3(TypedDict, total=False):
    """Relational arguments for Incident"""


class SocialReportIncludeFromIncidentRecursive4(TypedDict, total=False):
    """Relational arguments for Incident"""

    

class SocialReportArgsFromIncident(TypedDict, total=False):
    """Arguments for Incident"""
    include: 'SocialReportIncludeFromSocialReportRecursive1'


class SocialReportArgsFromIncidentRecursive1(TypedDict, total=False):
    """Arguments for Incident"""
    include: 'SocialReportIncludeFromSocialReportRecursive2'


class SocialReportArgsFromIncidentRecursive2(TypedDict, total=False):
    """Arguments for Incident"""
    include: 'SocialReportIncludeFromSocialReportRecursive3'


class SocialReportArgsFromIncidentRecursive3(TypedDict, total=False):
    """Arguments for Incident"""
    include: 'SocialReportIncludeFromSocialReportRecursive4'


class SocialReportArgsFromIncidentRecursive4(TypedDict, total=False):
    """Arguments for Incident"""
    
    

class FindManySocialReportArgsFromIncident(TypedDict, total=False):
    """Arguments for Incident"""
    take: int
    skip: int
    order_by: Union['SocialReportOrderByInput', List['SocialReportOrderByInput']]
    where: 'SocialReportWhereInput'
    cursor: 'SocialReportWhereUniqueInput'
    distinct: List['SocialReportScalarFieldKeys']
    include: 'SocialReportIncludeFromSocialReportRecursive1'


class FindManySocialReportArgsFromIncidentRecursive1(TypedDict, total=False):
    """Arguments for Incident"""
    take: int
    skip: int
    order_by: Union['SocialReportOrderByInput', List['SocialReportOrderByInput']]
    where: 'SocialReportWhereInput'
    cursor: 'SocialReportWhereUniqueInput'
    distinct: List['SocialReportScalarFieldKeys']
    include: 'SocialReportIncludeFromSocialReportRecursive2'


class FindManySocialReportArgsFromIncidentRecursive2(TypedDict, total=False):
    """Arguments for Incident"""
    take: int
    skip: int
    order_by: Union['SocialReportOrderByInput', List['SocialReportOrderByInput']]
    where: 'SocialReportWhereInput'
    cursor: 'SocialReportWhereUniqueInput'
    distinct: List['SocialReportScalarFieldKeys']
    include: 'SocialReportIncludeFromSocialReportRecursive3'


class FindManySocialReportArgsFromIncidentRecursive3(TypedDict, total=False):
    """Arguments for Incident"""
    take: int
    skip: int
    order_by: Union['SocialReportOrderByInput', List['SocialReportOrderByInput']]
    where: 'SocialReportWhereInput'
    cursor: 'SocialReportWhereUniqueInput'
    distinct: List['SocialReportScalarFieldKeys']
    include: 'SocialReportIncludeFromSocialReportRecursive4'


class FindManySocialReportArgsFromIncidentRecursive4(TypedDict, total=False):
    """Arguments for Incident"""
    take: int
    skip: int
    order_by: Union['SocialReportOrderByInput', List['SocialReportOrderByInput']]
    where: 'SocialReportWhereInput'
    cursor: 'SocialReportWhereUniqueInput'
    distinct: List['SocialReportScalarFieldKeys']
    
    

class TrafficDataIncludeFromIncident(TypedDict, total=False):
    """Relational arguments for Incident"""


class TrafficDataIncludeFromIncidentRecursive1(TypedDict, total=False):
    """Relational arguments for Incident"""


class TrafficDataIncludeFromIncidentRecursive2(TypedDict, total=False):
    """Relational arguments for Incident"""


class TrafficDataIncludeFromIncidentRecursive3(TypedDict, total=False):
    """Relational arguments for Incident"""


class TrafficDataIncludeFromIncidentRecursive4(TypedDict, total=False):
    """Relational arguments for Incident"""

    

class TrafficDataArgsFromIncident(TypedDict, total=False):
    """Arguments for Incident"""
    include: 'TrafficDataIncludeFromTrafficDataRecursive1'


class TrafficDataArgsFromIncidentRecursive1(TypedDict, total=False):
    """Arguments for Incident"""
    include: 'TrafficDataIncludeFromTrafficDataRecursive2'


class TrafficDataArgsFromIncidentRecursive2(TypedDict, total=False):
    """Arguments for Incident"""
    include: 'TrafficDataIncludeFromTrafficDataRecursive3'


class TrafficDataArgsFromIncidentRecursive3(TypedDict, total=False):
    """Arguments for Incident"""
    include: 'TrafficDataIncludeFromTrafficDataRecursive4'


class TrafficDataArgsFromIncidentRecursive4(TypedDict, total=False):
    """Arguments for Incident"""
    
    

class FindManyTrafficDataArgsFromIncident(TypedDict, total=False):
    """Arguments for Incident"""
    take: int
    skip: int
    order_by: Union['TrafficDataOrderByInput', List['TrafficDataOrderByInput']]
    where: 'TrafficDataWhereInput'
    cursor: 'TrafficDataWhereUniqueInput'
    distinct: List['TrafficDataScalarFieldKeys']
    include: 'TrafficDataIncludeFromTrafficDataRecursive1'


class FindManyTrafficDataArgsFromIncidentRecursive1(TypedDict, total=False):
    """Arguments for Incident"""
    take: int
    skip: int
    order_by: Union['TrafficDataOrderByInput', List['TrafficDataOrderByInput']]
    where: 'TrafficDataWhereInput'
    cursor: 'TrafficDataWhereUniqueInput'
    distinct: List['TrafficDataScalarFieldKeys']
    include: 'TrafficDataIncludeFromTrafficDataRecursive2'


class FindManyTrafficDataArgsFromIncidentRecursive2(TypedDict, total=False):
    """Arguments for Incident"""
    take: int
    skip: int
    order_by: Union['TrafficDataOrderByInput', List['TrafficDataOrderByInput']]
    where: 'TrafficDataWhereInput'
    cursor: 'TrafficDataWhereUniqueInput'
    distinct: List['TrafficDataScalarFieldKeys']
    include: 'TrafficDataIncludeFromTrafficDataRecursive3'


class FindManyTrafficDataArgsFromIncidentRecursive3(TypedDict, total=False):
    """Arguments for Incident"""
    take: int
    skip: int
    order_by: Union['TrafficDataOrderByInput', List['TrafficDataOrderByInput']]
    where: 'TrafficDataWhereInput'
    cursor: 'TrafficDataWhereUniqueInput'
    distinct: List['TrafficDataScalarFieldKeys']
    include: 'TrafficDataIncludeFromTrafficDataRecursive4'


class FindManyTrafficDataArgsFromIncidentRecursive4(TypedDict, total=False):
    """Arguments for Incident"""
    take: int
    skip: int
    order_by: Union['TrafficDataOrderByInput', List['TrafficDataOrderByInput']]
    where: 'TrafficDataWhereInput'
    cursor: 'TrafficDataWhereUniqueInput'
    distinct: List['TrafficDataScalarFieldKeys']
    
    

class TrafficLightIncludeFromIncident(TypedDict, total=False):
    """Relational arguments for Incident"""


class TrafficLightIncludeFromIncidentRecursive1(TypedDict, total=False):
    """Relational arguments for Incident"""


class TrafficLightIncludeFromIncidentRecursive2(TypedDict, total=False):
    """Relational arguments for Incident"""


class TrafficLightIncludeFromIncidentRecursive3(TypedDict, total=False):
    """Relational arguments for Incident"""


class TrafficLightIncludeFromIncidentRecursive4(TypedDict, total=False):
    """Relational arguments for Incident"""

    

class TrafficLightArgsFromIncident(TypedDict, total=False):
    """Arguments for Incident"""
    include: 'TrafficLightIncludeFromTrafficLightRecursive1'


class TrafficLightArgsFromIncidentRecursive1(TypedDict, total=False):
    """Arguments for Incident"""
    include: 'TrafficLightIncludeFromTrafficLightRecursive2'


class TrafficLightArgsFromIncidentRecursive2(TypedDict, total=False):
    """Arguments for Incident"""
    include: 'TrafficLightIncludeFromTrafficLightRecursive3'


class TrafficLightArgsFromIncidentRecursive3(TypedDict, total=False):
    """Arguments for Incident"""
    include: 'TrafficLightIncludeFromTrafficLightRecursive4'


class TrafficLightArgsFromIncidentRecursive4(TypedDict, total=False):
    """Arguments for Incident"""
    
    

class FindManyTrafficLightArgsFromIncident(TypedDict, total=False):
    """Arguments for Incident"""
    take: int
    skip: int
    order_by: Union['TrafficLightOrderByInput', List['TrafficLightOrderByInput']]
    where: 'TrafficLightWhereInput'
    cursor: 'TrafficLightWhereUniqueInput'
    distinct: List['TrafficLightScalarFieldKeys']
    include: 'TrafficLightIncludeFromTrafficLightRecursive1'


class FindManyTrafficLightArgsFromIncidentRecursive1(TypedDict, total=False):
    """Arguments for Incident"""
    take: int
    skip: int
    order_by: Union['TrafficLightOrderByInput', List['TrafficLightOrderByInput']]
    where: 'TrafficLightWhereInput'
    cursor: 'TrafficLightWhereUniqueInput'
    distinct: List['TrafficLightScalarFieldKeys']
    include: 'TrafficLightIncludeFromTrafficLightRecursive2'


class FindManyTrafficLightArgsFromIncidentRecursive2(TypedDict, total=False):
    """Arguments for Incident"""
    take: int
    skip: int
    order_by: Union['TrafficLightOrderByInput', List['TrafficLightOrderByInput']]
    where: 'TrafficLightWhereInput'
    cursor: 'TrafficLightWhereUniqueInput'
    distinct: List['TrafficLightScalarFieldKeys']
    include: 'TrafficLightIncludeFromTrafficLightRecursive3'


class FindManyTrafficLightArgsFromIncidentRecursive3(TypedDict, total=False):
    """Arguments for Incident"""
    take: int
    skip: int
    order_by: Union['TrafficLightOrderByInput', List['TrafficLightOrderByInput']]
    where: 'TrafficLightWhereInput'
    cursor: 'TrafficLightWhereUniqueInput'
    distinct: List['TrafficLightScalarFieldKeys']
    include: 'TrafficLightIncludeFromTrafficLightRecursive4'


class FindManyTrafficLightArgsFromIncidentRecursive4(TypedDict, total=False):
    """Arguments for Incident"""
    take: int
    skip: int
    order_by: Union['TrafficLightOrderByInput', List['TrafficLightOrderByInput']]
    where: 'TrafficLightWhereInput'
    cursor: 'TrafficLightWhereUniqueInput'
    distinct: List['TrafficLightScalarFieldKeys']
    


FindManyIncidentArgs = FindManyIncidentArgsFromIncident
FindFirstIncidentArgs = FindManyIncidentArgsFromIncident


    

class IncidentWhereInput(TypedDict, total=False):
    """Incident arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    description: Union[_str, 'types.StringFilter']
    severity: Union[_int, 'types.IntFilter']
    timestamp: Union[datetime.datetime, 'types.DateTimeFilter']
    location: Union[None, _str, 'types.StringFilter']

    # should be noted that AND and NOT should be Union['IncidentWhereInputRecursive1', List['IncidentWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['IncidentWhereInputRecursive1']
    OR: List['IncidentWhereInputRecursive1']
    NOT: List['IncidentWhereInputRecursive1']


class IncidentWhereInputRecursive1(TypedDict, total=False):
    """Incident arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    description: Union[_str, 'types.StringFilter']
    severity: Union[_int, 'types.IntFilter']
    timestamp: Union[datetime.datetime, 'types.DateTimeFilter']
    location: Union[None, _str, 'types.StringFilter']

    # should be noted that AND and NOT should be Union['IncidentWhereInputRecursive2', List['IncidentWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['IncidentWhereInputRecursive2']
    OR: List['IncidentWhereInputRecursive2']
    NOT: List['IncidentWhereInputRecursive2']


class IncidentWhereInputRecursive2(TypedDict, total=False):
    """Incident arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    description: Union[_str, 'types.StringFilter']
    severity: Union[_int, 'types.IntFilter']
    timestamp: Union[datetime.datetime, 'types.DateTimeFilter']
    location: Union[None, _str, 'types.StringFilter']

    # should be noted that AND and NOT should be Union['IncidentWhereInputRecursive3', List['IncidentWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['IncidentWhereInputRecursive3']
    OR: List['IncidentWhereInputRecursive3']
    NOT: List['IncidentWhereInputRecursive3']


class IncidentWhereInputRecursive3(TypedDict, total=False):
    """Incident arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    description: Union[_str, 'types.StringFilter']
    severity: Union[_int, 'types.IntFilter']
    timestamp: Union[datetime.datetime, 'types.DateTimeFilter']
    location: Union[None, _str, 'types.StringFilter']

    # should be noted that AND and NOT should be Union['IncidentWhereInputRecursive4', List['IncidentWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['IncidentWhereInputRecursive4']
    OR: List['IncidentWhereInputRecursive4']
    NOT: List['IncidentWhereInputRecursive4']


class IncidentWhereInputRecursive4(TypedDict, total=False):
    """Incident arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    description: Union[_str, 'types.StringFilter']
    severity: Union[_int, 'types.IntFilter']
    timestamp: Union[datetime.datetime, 'types.DateTimeFilter']
    location: Union[None, _str, 'types.StringFilter']



# aggregate Incident types


    

class IncidentScalarWhereWithAggregatesInput(TypedDict, total=False):
    """Incident arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']
    severity: Union[_int, 'types.IntWithAggregatesFilter']
    timestamp: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    location: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['IncidentScalarWhereWithAggregatesInputRecursive1']
    OR: List['IncidentScalarWhereWithAggregatesInputRecursive1']
    NOT: List['IncidentScalarWhereWithAggregatesInputRecursive1']


class IncidentScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """Incident arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']
    severity: Union[_int, 'types.IntWithAggregatesFilter']
    timestamp: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    location: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['IncidentScalarWhereWithAggregatesInputRecursive2']
    OR: List['IncidentScalarWhereWithAggregatesInputRecursive2']
    NOT: List['IncidentScalarWhereWithAggregatesInputRecursive2']


class IncidentScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """Incident arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']
    severity: Union[_int, 'types.IntWithAggregatesFilter']
    timestamp: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    location: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['IncidentScalarWhereWithAggregatesInputRecursive3']
    OR: List['IncidentScalarWhereWithAggregatesInputRecursive3']
    NOT: List['IncidentScalarWhereWithAggregatesInputRecursive3']


class IncidentScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """Incident arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']
    severity: Union[_int, 'types.IntWithAggregatesFilter']
    timestamp: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    location: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['IncidentScalarWhereWithAggregatesInputRecursive4']
    OR: List['IncidentScalarWhereWithAggregatesInputRecursive4']
    NOT: List['IncidentScalarWhereWithAggregatesInputRecursive4']


class IncidentScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """Incident arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']
    severity: Union[_int, 'types.IntWithAggregatesFilter']
    timestamp: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    location: Union[_str, 'types.StringWithAggregatesFilter']



class IncidentGroupByOutput(TypedDict, total=False):
    id: _str
    description: _str
    severity: _int
    timestamp: datetime.datetime
    location: _str
    _sum: 'IncidentSumAggregateOutput'
    _avg: 'IncidentAvgAggregateOutput'
    _min: 'IncidentMinAggregateOutput'
    _max: 'IncidentMaxAggregateOutput'
    _count: 'IncidentCountAggregateOutput'


class IncidentAvgAggregateOutput(TypedDict, total=False):
    """Incident output for aggregating averages"""
    severity: float


class IncidentSumAggregateOutput(TypedDict, total=False):
    """Incident output for aggregating sums"""
    severity: _int


class IncidentScalarAggregateOutput(TypedDict, total=False):
    """Incident output including scalar fields"""
    id: _str
    description: _str
    severity: _int
    timestamp: datetime.datetime
    location: _str


IncidentMinAggregateOutput = IncidentScalarAggregateOutput
IncidentMaxAggregateOutput = IncidentScalarAggregateOutput


class IncidentMaxAggregateInput(TypedDict, total=False):
    """Incident input for aggregating by max"""
    id: bool
    description: bool
    severity: bool
    timestamp: bool
    location: bool


class IncidentMinAggregateInput(TypedDict, total=False):
    """Incident input for aggregating by min"""
    id: bool
    description: bool
    severity: bool
    timestamp: bool
    location: bool


class IncidentNumberAggregateInput(TypedDict, total=False):
    """Incident input for aggregating numbers"""
    severity: bool


IncidentAvgAggregateInput = IncidentNumberAggregateInput
IncidentSumAggregateInput = IncidentNumberAggregateInput


IncidentCountAggregateInput = TypedDict(
    'IncidentCountAggregateInput',
    {
        'id': bool,
        'description': bool,
        'severity': bool,
        'timestamp': bool,
        'location': bool,
        '_all': bool,
    },
    total=False,
)

IncidentCountAggregateOutput = TypedDict(
    'IncidentCountAggregateOutput',
    {
        'id': int,
        'description': int,
        'severity': int,
        'timestamp': int,
        'location': int,
        '_all': int,
    },
    total=False,
)


IncidentKeys = Literal[
    'id',
    'description',
    'severity',
    'timestamp',
    'location',
]
IncidentScalarFieldKeys = Literal[
    'id',
    'description',
    'severity',
    'timestamp',
    'location',
]
IncidentScalarFieldKeysT = TypeVar('IncidentScalarFieldKeysT', bound=IncidentScalarFieldKeys)

IncidentRelationalFieldKeys = _NoneType

# Notification types

class NotificationOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the Notification create method"""
    id: _str
    driverId: Optional[_str]


class NotificationCreateInput(NotificationOptionalCreateInput):
    """Required arguments to the Notification create method"""
    timestamp: datetime.datetime
    message: _str


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class NotificationOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the Notification create method, without relations"""
    id: _str
    driverId: Optional[_str]


class NotificationCreateWithoutRelationsInput(NotificationOptionalCreateWithoutRelationsInput):
    """Required arguments to the Notification create method, without relations"""
    timestamp: datetime.datetime
    message: _str

class NotificationConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'NotificationCreateWithoutRelationsInput'
    where: 'NotificationWhereUniqueInput'

class NotificationCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'NotificationCreateWithoutRelationsInput'
    connect: 'NotificationWhereUniqueInput'
    connect_or_create: 'NotificationConnectOrCreateWithoutRelationsInput'


class NotificationCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['NotificationCreateWithoutRelationsInput', List['NotificationCreateWithoutRelationsInput']]
    connect: Union['NotificationWhereUniqueInput', List['NotificationWhereUniqueInput']]
    connect_or_create: Union['NotificationConnectOrCreateWithoutRelationsInput', List['NotificationConnectOrCreateWithoutRelationsInput']]

_NotificationWhereUnique_id_Input = TypedDict(
    '_NotificationWhereUnique_id_Input',
    {
        'id': '_str',
    },
    total=True
)

NotificationWhereUniqueInput = _NotificationWhereUnique_id_Input


class NotificationUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: _str
    timestamp: datetime.datetime
    driverId: Optional[_str]
    message: _str


class NotificationUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: _str
    timestamp: datetime.datetime
    driverId: Optional[_str]
    message: _str


class NotificationUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['NotificationCreateWithoutRelationsInput']
    connect: List['NotificationWhereUniqueInput']
    connect_or_create: List['NotificationConnectOrCreateWithoutRelationsInput']
    set: List['NotificationWhereUniqueInput']
    disconnect: List['NotificationWhereUniqueInput']
    delete: List['NotificationWhereUniqueInput']

    # TODO
    # update: List['NotificationUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['NotificationUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['NotificationScalarWhereInput']
    # upsert: List['NotificationUpserteWithWhereUniqueWithoutRelationsInput']


class NotificationUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'NotificationCreateWithoutRelationsInput'
    connect: 'NotificationWhereUniqueInput'
    connect_or_create: 'NotificationConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'NotificationUpdateInput'
    # upsert: 'NotificationUpsertWithoutRelationsInput'


class NotificationUpsertInput(TypedDict):
    create: 'NotificationCreateInput'
    update: 'NotificationUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_Notification_id_OrderByInput = TypedDict(
    '_Notification_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_Notification_timestamp_OrderByInput = TypedDict(
    '_Notification_timestamp_OrderByInput',
    {
        'timestamp': 'SortOrder',
    },
    total=True
)

_Notification_driverId_OrderByInput = TypedDict(
    '_Notification_driverId_OrderByInput',
    {
        'driverId': 'SortOrder',
    },
    total=True
)

_Notification_message_OrderByInput = TypedDict(
    '_Notification_message_OrderByInput',
    {
        'message': 'SortOrder',
    },
    total=True
)

_Notification_RelevanceInner = TypedDict(
    '_Notification_RelevanceInner',
    {
        'fields': 'List[NotificationScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_Notification_RelevanceOrderByInput = TypedDict(
    '_Notification_RelevanceOrderByInput',
    {
        '_relevance': '_Notification_RelevanceInner',
    },
    total=True
)

NotificationOrderByInput = Union[
    '_Notification_id_OrderByInput',
    '_Notification_timestamp_OrderByInput',
    '_Notification_driverId_OrderByInput',
    '_Notification_message_OrderByInput',
    '_Notification_RelevanceOrderByInput',
]



# recursive Notification types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

NotificationRelationFilter = TypedDict(
    'NotificationRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class NotificationListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class NotificationInclude(TypedDict, total=False):
    """Notification relational arguments"""


    

class AchievementIncludeFromNotification(TypedDict, total=False):
    """Relational arguments for Notification"""


class AchievementIncludeFromNotificationRecursive1(TypedDict, total=False):
    """Relational arguments for Notification"""


class AchievementIncludeFromNotificationRecursive2(TypedDict, total=False):
    """Relational arguments for Notification"""


class AchievementIncludeFromNotificationRecursive3(TypedDict, total=False):
    """Relational arguments for Notification"""


class AchievementIncludeFromNotificationRecursive4(TypedDict, total=False):
    """Relational arguments for Notification"""

    

class AchievementArgsFromNotification(TypedDict, total=False):
    """Arguments for Notification"""
    include: 'AchievementIncludeFromAchievementRecursive1'


class AchievementArgsFromNotificationRecursive1(TypedDict, total=False):
    """Arguments for Notification"""
    include: 'AchievementIncludeFromAchievementRecursive2'


class AchievementArgsFromNotificationRecursive2(TypedDict, total=False):
    """Arguments for Notification"""
    include: 'AchievementIncludeFromAchievementRecursive3'


class AchievementArgsFromNotificationRecursive3(TypedDict, total=False):
    """Arguments for Notification"""
    include: 'AchievementIncludeFromAchievementRecursive4'


class AchievementArgsFromNotificationRecursive4(TypedDict, total=False):
    """Arguments for Notification"""
    
    

class FindManyAchievementArgsFromNotification(TypedDict, total=False):
    """Arguments for Notification"""
    take: int
    skip: int
    order_by: Union['AchievementOrderByInput', List['AchievementOrderByInput']]
    where: 'AchievementWhereInput'
    cursor: 'AchievementWhereUniqueInput'
    distinct: List['AchievementScalarFieldKeys']
    include: 'AchievementIncludeFromAchievementRecursive1'


class FindManyAchievementArgsFromNotificationRecursive1(TypedDict, total=False):
    """Arguments for Notification"""
    take: int
    skip: int
    order_by: Union['AchievementOrderByInput', List['AchievementOrderByInput']]
    where: 'AchievementWhereInput'
    cursor: 'AchievementWhereUniqueInput'
    distinct: List['AchievementScalarFieldKeys']
    include: 'AchievementIncludeFromAchievementRecursive2'


class FindManyAchievementArgsFromNotificationRecursive2(TypedDict, total=False):
    """Arguments for Notification"""
    take: int
    skip: int
    order_by: Union['AchievementOrderByInput', List['AchievementOrderByInput']]
    where: 'AchievementWhereInput'
    cursor: 'AchievementWhereUniqueInput'
    distinct: List['AchievementScalarFieldKeys']
    include: 'AchievementIncludeFromAchievementRecursive3'


class FindManyAchievementArgsFromNotificationRecursive3(TypedDict, total=False):
    """Arguments for Notification"""
    take: int
    skip: int
    order_by: Union['AchievementOrderByInput', List['AchievementOrderByInput']]
    where: 'AchievementWhereInput'
    cursor: 'AchievementWhereUniqueInput'
    distinct: List['AchievementScalarFieldKeys']
    include: 'AchievementIncludeFromAchievementRecursive4'


class FindManyAchievementArgsFromNotificationRecursive4(TypedDict, total=False):
    """Arguments for Notification"""
    take: int
    skip: int
    order_by: Union['AchievementOrderByInput', List['AchievementOrderByInput']]
    where: 'AchievementWhereInput'
    cursor: 'AchievementWhereUniqueInput'
    distinct: List['AchievementScalarFieldKeys']
    
    

class CameraIncludeFromNotification(TypedDict, total=False):
    """Relational arguments for Notification"""


class CameraIncludeFromNotificationRecursive1(TypedDict, total=False):
    """Relational arguments for Notification"""


class CameraIncludeFromNotificationRecursive2(TypedDict, total=False):
    """Relational arguments for Notification"""


class CameraIncludeFromNotificationRecursive3(TypedDict, total=False):
    """Relational arguments for Notification"""


class CameraIncludeFromNotificationRecursive4(TypedDict, total=False):
    """Relational arguments for Notification"""

    

class CameraArgsFromNotification(TypedDict, total=False):
    """Arguments for Notification"""
    include: 'CameraIncludeFromCameraRecursive1'


class CameraArgsFromNotificationRecursive1(TypedDict, total=False):
    """Arguments for Notification"""
    include: 'CameraIncludeFromCameraRecursive2'


class CameraArgsFromNotificationRecursive2(TypedDict, total=False):
    """Arguments for Notification"""
    include: 'CameraIncludeFromCameraRecursive3'


class CameraArgsFromNotificationRecursive3(TypedDict, total=False):
    """Arguments for Notification"""
    include: 'CameraIncludeFromCameraRecursive4'


class CameraArgsFromNotificationRecursive4(TypedDict, total=False):
    """Arguments for Notification"""
    
    

class FindManyCameraArgsFromNotification(TypedDict, total=False):
    """Arguments for Notification"""
    take: int
    skip: int
    order_by: Union['CameraOrderByInput', List['CameraOrderByInput']]
    where: 'CameraWhereInput'
    cursor: 'CameraWhereUniqueInput'
    distinct: List['CameraScalarFieldKeys']
    include: 'CameraIncludeFromCameraRecursive1'


class FindManyCameraArgsFromNotificationRecursive1(TypedDict, total=False):
    """Arguments for Notification"""
    take: int
    skip: int
    order_by: Union['CameraOrderByInput', List['CameraOrderByInput']]
    where: 'CameraWhereInput'
    cursor: 'CameraWhereUniqueInput'
    distinct: List['CameraScalarFieldKeys']
    include: 'CameraIncludeFromCameraRecursive2'


class FindManyCameraArgsFromNotificationRecursive2(TypedDict, total=False):
    """Arguments for Notification"""
    take: int
    skip: int
    order_by: Union['CameraOrderByInput', List['CameraOrderByInput']]
    where: 'CameraWhereInput'
    cursor: 'CameraWhereUniqueInput'
    distinct: List['CameraScalarFieldKeys']
    include: 'CameraIncludeFromCameraRecursive3'


class FindManyCameraArgsFromNotificationRecursive3(TypedDict, total=False):
    """Arguments for Notification"""
    take: int
    skip: int
    order_by: Union['CameraOrderByInput', List['CameraOrderByInput']]
    where: 'CameraWhereInput'
    cursor: 'CameraWhereUniqueInput'
    distinct: List['CameraScalarFieldKeys']
    include: 'CameraIncludeFromCameraRecursive4'


class FindManyCameraArgsFromNotificationRecursive4(TypedDict, total=False):
    """Arguments for Notification"""
    take: int
    skip: int
    order_by: Union['CameraOrderByInput', List['CameraOrderByInput']]
    where: 'CameraWhereInput'
    cursor: 'CameraWhereUniqueInput'
    distinct: List['CameraScalarFieldKeys']
    
    

class EffectivenessIncludeFromNotification(TypedDict, total=False):
    """Relational arguments for Notification"""


class EffectivenessIncludeFromNotificationRecursive1(TypedDict, total=False):
    """Relational arguments for Notification"""


class EffectivenessIncludeFromNotificationRecursive2(TypedDict, total=False):
    """Relational arguments for Notification"""


class EffectivenessIncludeFromNotificationRecursive3(TypedDict, total=False):
    """Relational arguments for Notification"""


class EffectivenessIncludeFromNotificationRecursive4(TypedDict, total=False):
    """Relational arguments for Notification"""

    

class EffectivenessArgsFromNotification(TypedDict, total=False):
    """Arguments for Notification"""
    include: 'EffectivenessIncludeFromEffectivenessRecursive1'


class EffectivenessArgsFromNotificationRecursive1(TypedDict, total=False):
    """Arguments for Notification"""
    include: 'EffectivenessIncludeFromEffectivenessRecursive2'


class EffectivenessArgsFromNotificationRecursive2(TypedDict, total=False):
    """Arguments for Notification"""
    include: 'EffectivenessIncludeFromEffectivenessRecursive3'


class EffectivenessArgsFromNotificationRecursive3(TypedDict, total=False):
    """Arguments for Notification"""
    include: 'EffectivenessIncludeFromEffectivenessRecursive4'


class EffectivenessArgsFromNotificationRecursive4(TypedDict, total=False):
    """Arguments for Notification"""
    
    

class FindManyEffectivenessArgsFromNotification(TypedDict, total=False):
    """Arguments for Notification"""
    take: int
    skip: int
    order_by: Union['EffectivenessOrderByInput', List['EffectivenessOrderByInput']]
    where: 'EffectivenessWhereInput'
    cursor: 'EffectivenessWhereUniqueInput'
    distinct: List['EffectivenessScalarFieldKeys']
    include: 'EffectivenessIncludeFromEffectivenessRecursive1'


class FindManyEffectivenessArgsFromNotificationRecursive1(TypedDict, total=False):
    """Arguments for Notification"""
    take: int
    skip: int
    order_by: Union['EffectivenessOrderByInput', List['EffectivenessOrderByInput']]
    where: 'EffectivenessWhereInput'
    cursor: 'EffectivenessWhereUniqueInput'
    distinct: List['EffectivenessScalarFieldKeys']
    include: 'EffectivenessIncludeFromEffectivenessRecursive2'


class FindManyEffectivenessArgsFromNotificationRecursive2(TypedDict, total=False):
    """Arguments for Notification"""
    take: int
    skip: int
    order_by: Union['EffectivenessOrderByInput', List['EffectivenessOrderByInput']]
    where: 'EffectivenessWhereInput'
    cursor: 'EffectivenessWhereUniqueInput'
    distinct: List['EffectivenessScalarFieldKeys']
    include: 'EffectivenessIncludeFromEffectivenessRecursive3'


class FindManyEffectivenessArgsFromNotificationRecursive3(TypedDict, total=False):
    """Arguments for Notification"""
    take: int
    skip: int
    order_by: Union['EffectivenessOrderByInput', List['EffectivenessOrderByInput']]
    where: 'EffectivenessWhereInput'
    cursor: 'EffectivenessWhereUniqueInput'
    distinct: List['EffectivenessScalarFieldKeys']
    include: 'EffectivenessIncludeFromEffectivenessRecursive4'


class FindManyEffectivenessArgsFromNotificationRecursive4(TypedDict, total=False):
    """Arguments for Notification"""
    take: int
    skip: int
    order_by: Union['EffectivenessOrderByInput', List['EffectivenessOrderByInput']]
    where: 'EffectivenessWhereInput'
    cursor: 'EffectivenessWhereUniqueInput'
    distinct: List['EffectivenessScalarFieldKeys']
    
    

class EnvironmentalDataIncludeFromNotification(TypedDict, total=False):
    """Relational arguments for Notification"""


class EnvironmentalDataIncludeFromNotificationRecursive1(TypedDict, total=False):
    """Relational arguments for Notification"""


class EnvironmentalDataIncludeFromNotificationRecursive2(TypedDict, total=False):
    """Relational arguments for Notification"""


class EnvironmentalDataIncludeFromNotificationRecursive3(TypedDict, total=False):
    """Relational arguments for Notification"""


class EnvironmentalDataIncludeFromNotificationRecursive4(TypedDict, total=False):
    """Relational arguments for Notification"""

    

class EnvironmentalDataArgsFromNotification(TypedDict, total=False):
    """Arguments for Notification"""
    include: 'EnvironmentalDataIncludeFromEnvironmentalDataRecursive1'


class EnvironmentalDataArgsFromNotificationRecursive1(TypedDict, total=False):
    """Arguments for Notification"""
    include: 'EnvironmentalDataIncludeFromEnvironmentalDataRecursive2'


class EnvironmentalDataArgsFromNotificationRecursive2(TypedDict, total=False):
    """Arguments for Notification"""
    include: 'EnvironmentalDataIncludeFromEnvironmentalDataRecursive3'


class EnvironmentalDataArgsFromNotificationRecursive3(TypedDict, total=False):
    """Arguments for Notification"""
    include: 'EnvironmentalDataIncludeFromEnvironmentalDataRecursive4'


class EnvironmentalDataArgsFromNotificationRecursive4(TypedDict, total=False):
    """Arguments for Notification"""
    
    

class FindManyEnvironmentalDataArgsFromNotification(TypedDict, total=False):
    """Arguments for Notification"""
    take: int
    skip: int
    order_by: Union['EnvironmentalDataOrderByInput', List['EnvironmentalDataOrderByInput']]
    where: 'EnvironmentalDataWhereInput'
    cursor: 'EnvironmentalDataWhereUniqueInput'
    distinct: List['EnvironmentalDataScalarFieldKeys']
    include: 'EnvironmentalDataIncludeFromEnvironmentalDataRecursive1'


class FindManyEnvironmentalDataArgsFromNotificationRecursive1(TypedDict, total=False):
    """Arguments for Notification"""
    take: int
    skip: int
    order_by: Union['EnvironmentalDataOrderByInput', List['EnvironmentalDataOrderByInput']]
    where: 'EnvironmentalDataWhereInput'
    cursor: 'EnvironmentalDataWhereUniqueInput'
    distinct: List['EnvironmentalDataScalarFieldKeys']
    include: 'EnvironmentalDataIncludeFromEnvironmentalDataRecursive2'


class FindManyEnvironmentalDataArgsFromNotificationRecursive2(TypedDict, total=False):
    """Arguments for Notification"""
    take: int
    skip: int
    order_by: Union['EnvironmentalDataOrderByInput', List['EnvironmentalDataOrderByInput']]
    where: 'EnvironmentalDataWhereInput'
    cursor: 'EnvironmentalDataWhereUniqueInput'
    distinct: List['EnvironmentalDataScalarFieldKeys']
    include: 'EnvironmentalDataIncludeFromEnvironmentalDataRecursive3'


class FindManyEnvironmentalDataArgsFromNotificationRecursive3(TypedDict, total=False):
    """Arguments for Notification"""
    take: int
    skip: int
    order_by: Union['EnvironmentalDataOrderByInput', List['EnvironmentalDataOrderByInput']]
    where: 'EnvironmentalDataWhereInput'
    cursor: 'EnvironmentalDataWhereUniqueInput'
    distinct: List['EnvironmentalDataScalarFieldKeys']
    include: 'EnvironmentalDataIncludeFromEnvironmentalDataRecursive4'


class FindManyEnvironmentalDataArgsFromNotificationRecursive4(TypedDict, total=False):
    """Arguments for Notification"""
    take: int
    skip: int
    order_by: Union['EnvironmentalDataOrderByInput', List['EnvironmentalDataOrderByInput']]
    where: 'EnvironmentalDataWhereInput'
    cursor: 'EnvironmentalDataWhereUniqueInput'
    distinct: List['EnvironmentalDataScalarFieldKeys']
    
    

class EventIncludeFromNotification(TypedDict, total=False):
    """Relational arguments for Notification"""


class EventIncludeFromNotificationRecursive1(TypedDict, total=False):
    """Relational arguments for Notification"""


class EventIncludeFromNotificationRecursive2(TypedDict, total=False):
    """Relational arguments for Notification"""


class EventIncludeFromNotificationRecursive3(TypedDict, total=False):
    """Relational arguments for Notification"""


class EventIncludeFromNotificationRecursive4(TypedDict, total=False):
    """Relational arguments for Notification"""

    

class EventArgsFromNotification(TypedDict, total=False):
    """Arguments for Notification"""
    include: 'EventIncludeFromEventRecursive1'


class EventArgsFromNotificationRecursive1(TypedDict, total=False):
    """Arguments for Notification"""
    include: 'EventIncludeFromEventRecursive2'


class EventArgsFromNotificationRecursive2(TypedDict, total=False):
    """Arguments for Notification"""
    include: 'EventIncludeFromEventRecursive3'


class EventArgsFromNotificationRecursive3(TypedDict, total=False):
    """Arguments for Notification"""
    include: 'EventIncludeFromEventRecursive4'


class EventArgsFromNotificationRecursive4(TypedDict, total=False):
    """Arguments for Notification"""
    
    

class FindManyEventArgsFromNotification(TypedDict, total=False):
    """Arguments for Notification"""
    take: int
    skip: int
    order_by: Union['EventOrderByInput', List['EventOrderByInput']]
    where: 'EventWhereInput'
    cursor: 'EventWhereUniqueInput'
    distinct: List['EventScalarFieldKeys']
    include: 'EventIncludeFromEventRecursive1'


class FindManyEventArgsFromNotificationRecursive1(TypedDict, total=False):
    """Arguments for Notification"""
    take: int
    skip: int
    order_by: Union['EventOrderByInput', List['EventOrderByInput']]
    where: 'EventWhereInput'
    cursor: 'EventWhereUniqueInput'
    distinct: List['EventScalarFieldKeys']
    include: 'EventIncludeFromEventRecursive2'


class FindManyEventArgsFromNotificationRecursive2(TypedDict, total=False):
    """Arguments for Notification"""
    take: int
    skip: int
    order_by: Union['EventOrderByInput', List['EventOrderByInput']]
    where: 'EventWhereInput'
    cursor: 'EventWhereUniqueInput'
    distinct: List['EventScalarFieldKeys']
    include: 'EventIncludeFromEventRecursive3'


class FindManyEventArgsFromNotificationRecursive3(TypedDict, total=False):
    """Arguments for Notification"""
    take: int
    skip: int
    order_by: Union['EventOrderByInput', List['EventOrderByInput']]
    where: 'EventWhereInput'
    cursor: 'EventWhereUniqueInput'
    distinct: List['EventScalarFieldKeys']
    include: 'EventIncludeFromEventRecursive4'


class FindManyEventArgsFromNotificationRecursive4(TypedDict, total=False):
    """Arguments for Notification"""
    take: int
    skip: int
    order_by: Union['EventOrderByInput', List['EventOrderByInput']]
    where: 'EventWhereInput'
    cursor: 'EventWhereUniqueInput'
    distinct: List['EventScalarFieldKeys']
    
    

class ForecastIncludeFromNotification(TypedDict, total=False):
    """Relational arguments for Notification"""


class ForecastIncludeFromNotificationRecursive1(TypedDict, total=False):
    """Relational arguments for Notification"""


class ForecastIncludeFromNotificationRecursive2(TypedDict, total=False):
    """Relational arguments for Notification"""


class ForecastIncludeFromNotificationRecursive3(TypedDict, total=False):
    """Relational arguments for Notification"""


class ForecastIncludeFromNotificationRecursive4(TypedDict, total=False):
    """Relational arguments for Notification"""

    

class ForecastArgsFromNotification(TypedDict, total=False):
    """Arguments for Notification"""
    include: 'ForecastIncludeFromForecastRecursive1'


class ForecastArgsFromNotificationRecursive1(TypedDict, total=False):
    """Arguments for Notification"""
    include: 'ForecastIncludeFromForecastRecursive2'


class ForecastArgsFromNotificationRecursive2(TypedDict, total=False):
    """Arguments for Notification"""
    include: 'ForecastIncludeFromForecastRecursive3'


class ForecastArgsFromNotificationRecursive3(TypedDict, total=False):
    """Arguments for Notification"""
    include: 'ForecastIncludeFromForecastRecursive4'


class ForecastArgsFromNotificationRecursive4(TypedDict, total=False):
    """Arguments for Notification"""
    
    

class FindManyForecastArgsFromNotification(TypedDict, total=False):
    """Arguments for Notification"""
    take: int
    skip: int
    order_by: Union['ForecastOrderByInput', List['ForecastOrderByInput']]
    where: 'ForecastWhereInput'
    cursor: 'ForecastWhereUniqueInput'
    distinct: List['ForecastScalarFieldKeys']
    include: 'ForecastIncludeFromForecastRecursive1'


class FindManyForecastArgsFromNotificationRecursive1(TypedDict, total=False):
    """Arguments for Notification"""
    take: int
    skip: int
    order_by: Union['ForecastOrderByInput', List['ForecastOrderByInput']]
    where: 'ForecastWhereInput'
    cursor: 'ForecastWhereUniqueInput'
    distinct: List['ForecastScalarFieldKeys']
    include: 'ForecastIncludeFromForecastRecursive2'


class FindManyForecastArgsFromNotificationRecursive2(TypedDict, total=False):
    """Arguments for Notification"""
    take: int
    skip: int
    order_by: Union['ForecastOrderByInput', List['ForecastOrderByInput']]
    where: 'ForecastWhereInput'
    cursor: 'ForecastWhereUniqueInput'
    distinct: List['ForecastScalarFieldKeys']
    include: 'ForecastIncludeFromForecastRecursive3'


class FindManyForecastArgsFromNotificationRecursive3(TypedDict, total=False):
    """Arguments for Notification"""
    take: int
    skip: int
    order_by: Union['ForecastOrderByInput', List['ForecastOrderByInput']]
    where: 'ForecastWhereInput'
    cursor: 'ForecastWhereUniqueInput'
    distinct: List['ForecastScalarFieldKeys']
    include: 'ForecastIncludeFromForecastRecursive4'


class FindManyForecastArgsFromNotificationRecursive4(TypedDict, total=False):
    """Arguments for Notification"""
    take: int
    skip: int
    order_by: Union['ForecastOrderByInput', List['ForecastOrderByInput']]
    where: 'ForecastWhereInput'
    cursor: 'ForecastWhereUniqueInput'
    distinct: List['ForecastScalarFieldKeys']
    
    

class IncidentIncludeFromNotification(TypedDict, total=False):
    """Relational arguments for Notification"""


class IncidentIncludeFromNotificationRecursive1(TypedDict, total=False):
    """Relational arguments for Notification"""


class IncidentIncludeFromNotificationRecursive2(TypedDict, total=False):
    """Relational arguments for Notification"""


class IncidentIncludeFromNotificationRecursive3(TypedDict, total=False):
    """Relational arguments for Notification"""


class IncidentIncludeFromNotificationRecursive4(TypedDict, total=False):
    """Relational arguments for Notification"""

    

class IncidentArgsFromNotification(TypedDict, total=False):
    """Arguments for Notification"""
    include: 'IncidentIncludeFromIncidentRecursive1'


class IncidentArgsFromNotificationRecursive1(TypedDict, total=False):
    """Arguments for Notification"""
    include: 'IncidentIncludeFromIncidentRecursive2'


class IncidentArgsFromNotificationRecursive2(TypedDict, total=False):
    """Arguments for Notification"""
    include: 'IncidentIncludeFromIncidentRecursive3'


class IncidentArgsFromNotificationRecursive3(TypedDict, total=False):
    """Arguments for Notification"""
    include: 'IncidentIncludeFromIncidentRecursive4'


class IncidentArgsFromNotificationRecursive4(TypedDict, total=False):
    """Arguments for Notification"""
    
    

class FindManyIncidentArgsFromNotification(TypedDict, total=False):
    """Arguments for Notification"""
    take: int
    skip: int
    order_by: Union['IncidentOrderByInput', List['IncidentOrderByInput']]
    where: 'IncidentWhereInput'
    cursor: 'IncidentWhereUniqueInput'
    distinct: List['IncidentScalarFieldKeys']
    include: 'IncidentIncludeFromIncidentRecursive1'


class FindManyIncidentArgsFromNotificationRecursive1(TypedDict, total=False):
    """Arguments for Notification"""
    take: int
    skip: int
    order_by: Union['IncidentOrderByInput', List['IncidentOrderByInput']]
    where: 'IncidentWhereInput'
    cursor: 'IncidentWhereUniqueInput'
    distinct: List['IncidentScalarFieldKeys']
    include: 'IncidentIncludeFromIncidentRecursive2'


class FindManyIncidentArgsFromNotificationRecursive2(TypedDict, total=False):
    """Arguments for Notification"""
    take: int
    skip: int
    order_by: Union['IncidentOrderByInput', List['IncidentOrderByInput']]
    where: 'IncidentWhereInput'
    cursor: 'IncidentWhereUniqueInput'
    distinct: List['IncidentScalarFieldKeys']
    include: 'IncidentIncludeFromIncidentRecursive3'


class FindManyIncidentArgsFromNotificationRecursive3(TypedDict, total=False):
    """Arguments for Notification"""
    take: int
    skip: int
    order_by: Union['IncidentOrderByInput', List['IncidentOrderByInput']]
    where: 'IncidentWhereInput'
    cursor: 'IncidentWhereUniqueInput'
    distinct: List['IncidentScalarFieldKeys']
    include: 'IncidentIncludeFromIncidentRecursive4'


class FindManyIncidentArgsFromNotificationRecursive4(TypedDict, total=False):
    """Arguments for Notification"""
    take: int
    skip: int
    order_by: Union['IncidentOrderByInput', List['IncidentOrderByInput']]
    where: 'IncidentWhereInput'
    cursor: 'IncidentWhereUniqueInput'
    distinct: List['IncidentScalarFieldKeys']
    
    

class NotificationIncludeFromNotification(TypedDict, total=False):
    """Relational arguments for Notification"""


class NotificationIncludeFromNotificationRecursive1(TypedDict, total=False):
    """Relational arguments for Notification"""


class NotificationIncludeFromNotificationRecursive2(TypedDict, total=False):
    """Relational arguments for Notification"""


class NotificationIncludeFromNotificationRecursive3(TypedDict, total=False):
    """Relational arguments for Notification"""


class NotificationIncludeFromNotificationRecursive4(TypedDict, total=False):
    """Relational arguments for Notification"""

    

class NotificationArgsFromNotification(TypedDict, total=False):
    """Arguments for Notification"""
    include: 'NotificationIncludeFromNotificationRecursive1'


class NotificationArgsFromNotificationRecursive1(TypedDict, total=False):
    """Arguments for Notification"""
    include: 'NotificationIncludeFromNotificationRecursive2'


class NotificationArgsFromNotificationRecursive2(TypedDict, total=False):
    """Arguments for Notification"""
    include: 'NotificationIncludeFromNotificationRecursive3'


class NotificationArgsFromNotificationRecursive3(TypedDict, total=False):
    """Arguments for Notification"""
    include: 'NotificationIncludeFromNotificationRecursive4'


class NotificationArgsFromNotificationRecursive4(TypedDict, total=False):
    """Arguments for Notification"""
    
    

class FindManyNotificationArgsFromNotification(TypedDict, total=False):
    """Arguments for Notification"""
    take: int
    skip: int
    order_by: Union['NotificationOrderByInput', List['NotificationOrderByInput']]
    where: 'NotificationWhereInput'
    cursor: 'NotificationWhereUniqueInput'
    distinct: List['NotificationScalarFieldKeys']
    include: 'NotificationIncludeFromNotificationRecursive1'


class FindManyNotificationArgsFromNotificationRecursive1(TypedDict, total=False):
    """Arguments for Notification"""
    take: int
    skip: int
    order_by: Union['NotificationOrderByInput', List['NotificationOrderByInput']]
    where: 'NotificationWhereInput'
    cursor: 'NotificationWhereUniqueInput'
    distinct: List['NotificationScalarFieldKeys']
    include: 'NotificationIncludeFromNotificationRecursive2'


class FindManyNotificationArgsFromNotificationRecursive2(TypedDict, total=False):
    """Arguments for Notification"""
    take: int
    skip: int
    order_by: Union['NotificationOrderByInput', List['NotificationOrderByInput']]
    where: 'NotificationWhereInput'
    cursor: 'NotificationWhereUniqueInput'
    distinct: List['NotificationScalarFieldKeys']
    include: 'NotificationIncludeFromNotificationRecursive3'


class FindManyNotificationArgsFromNotificationRecursive3(TypedDict, total=False):
    """Arguments for Notification"""
    take: int
    skip: int
    order_by: Union['NotificationOrderByInput', List['NotificationOrderByInput']]
    where: 'NotificationWhereInput'
    cursor: 'NotificationWhereUniqueInput'
    distinct: List['NotificationScalarFieldKeys']
    include: 'NotificationIncludeFromNotificationRecursive4'


class FindManyNotificationArgsFromNotificationRecursive4(TypedDict, total=False):
    """Arguments for Notification"""
    take: int
    skip: int
    order_by: Union['NotificationOrderByInput', List['NotificationOrderByInput']]
    where: 'NotificationWhereInput'
    cursor: 'NotificationWhereUniqueInput'
    distinct: List['NotificationScalarFieldKeys']
    
    

class ScenarioIncludeFromNotification(TypedDict, total=False):
    """Relational arguments for Notification"""


class ScenarioIncludeFromNotificationRecursive1(TypedDict, total=False):
    """Relational arguments for Notification"""


class ScenarioIncludeFromNotificationRecursive2(TypedDict, total=False):
    """Relational arguments for Notification"""


class ScenarioIncludeFromNotificationRecursive3(TypedDict, total=False):
    """Relational arguments for Notification"""


class ScenarioIncludeFromNotificationRecursive4(TypedDict, total=False):
    """Relational arguments for Notification"""

    

class ScenarioArgsFromNotification(TypedDict, total=False):
    """Arguments for Notification"""
    include: 'ScenarioIncludeFromScenarioRecursive1'


class ScenarioArgsFromNotificationRecursive1(TypedDict, total=False):
    """Arguments for Notification"""
    include: 'ScenarioIncludeFromScenarioRecursive2'


class ScenarioArgsFromNotificationRecursive2(TypedDict, total=False):
    """Arguments for Notification"""
    include: 'ScenarioIncludeFromScenarioRecursive3'


class ScenarioArgsFromNotificationRecursive3(TypedDict, total=False):
    """Arguments for Notification"""
    include: 'ScenarioIncludeFromScenarioRecursive4'


class ScenarioArgsFromNotificationRecursive4(TypedDict, total=False):
    """Arguments for Notification"""
    
    

class FindManyScenarioArgsFromNotification(TypedDict, total=False):
    """Arguments for Notification"""
    take: int
    skip: int
    order_by: Union['ScenarioOrderByInput', List['ScenarioOrderByInput']]
    where: 'ScenarioWhereInput'
    cursor: 'ScenarioWhereUniqueInput'
    distinct: List['ScenarioScalarFieldKeys']
    include: 'ScenarioIncludeFromScenarioRecursive1'


class FindManyScenarioArgsFromNotificationRecursive1(TypedDict, total=False):
    """Arguments for Notification"""
    take: int
    skip: int
    order_by: Union['ScenarioOrderByInput', List['ScenarioOrderByInput']]
    where: 'ScenarioWhereInput'
    cursor: 'ScenarioWhereUniqueInput'
    distinct: List['ScenarioScalarFieldKeys']
    include: 'ScenarioIncludeFromScenarioRecursive2'


class FindManyScenarioArgsFromNotificationRecursive2(TypedDict, total=False):
    """Arguments for Notification"""
    take: int
    skip: int
    order_by: Union['ScenarioOrderByInput', List['ScenarioOrderByInput']]
    where: 'ScenarioWhereInput'
    cursor: 'ScenarioWhereUniqueInput'
    distinct: List['ScenarioScalarFieldKeys']
    include: 'ScenarioIncludeFromScenarioRecursive3'


class FindManyScenarioArgsFromNotificationRecursive3(TypedDict, total=False):
    """Arguments for Notification"""
    take: int
    skip: int
    order_by: Union['ScenarioOrderByInput', List['ScenarioOrderByInput']]
    where: 'ScenarioWhereInput'
    cursor: 'ScenarioWhereUniqueInput'
    distinct: List['ScenarioScalarFieldKeys']
    include: 'ScenarioIncludeFromScenarioRecursive4'


class FindManyScenarioArgsFromNotificationRecursive4(TypedDict, total=False):
    """Arguments for Notification"""
    take: int
    skip: int
    order_by: Union['ScenarioOrderByInput', List['ScenarioOrderByInput']]
    where: 'ScenarioWhereInput'
    cursor: 'ScenarioWhereUniqueInput'
    distinct: List['ScenarioScalarFieldKeys']
    
    

class SocialReportIncludeFromNotification(TypedDict, total=False):
    """Relational arguments for Notification"""


class SocialReportIncludeFromNotificationRecursive1(TypedDict, total=False):
    """Relational arguments for Notification"""


class SocialReportIncludeFromNotificationRecursive2(TypedDict, total=False):
    """Relational arguments for Notification"""


class SocialReportIncludeFromNotificationRecursive3(TypedDict, total=False):
    """Relational arguments for Notification"""


class SocialReportIncludeFromNotificationRecursive4(TypedDict, total=False):
    """Relational arguments for Notification"""

    

class SocialReportArgsFromNotification(TypedDict, total=False):
    """Arguments for Notification"""
    include: 'SocialReportIncludeFromSocialReportRecursive1'


class SocialReportArgsFromNotificationRecursive1(TypedDict, total=False):
    """Arguments for Notification"""
    include: 'SocialReportIncludeFromSocialReportRecursive2'


class SocialReportArgsFromNotificationRecursive2(TypedDict, total=False):
    """Arguments for Notification"""
    include: 'SocialReportIncludeFromSocialReportRecursive3'


class SocialReportArgsFromNotificationRecursive3(TypedDict, total=False):
    """Arguments for Notification"""
    include: 'SocialReportIncludeFromSocialReportRecursive4'


class SocialReportArgsFromNotificationRecursive4(TypedDict, total=False):
    """Arguments for Notification"""
    
    

class FindManySocialReportArgsFromNotification(TypedDict, total=False):
    """Arguments for Notification"""
    take: int
    skip: int
    order_by: Union['SocialReportOrderByInput', List['SocialReportOrderByInput']]
    where: 'SocialReportWhereInput'
    cursor: 'SocialReportWhereUniqueInput'
    distinct: List['SocialReportScalarFieldKeys']
    include: 'SocialReportIncludeFromSocialReportRecursive1'


class FindManySocialReportArgsFromNotificationRecursive1(TypedDict, total=False):
    """Arguments for Notification"""
    take: int
    skip: int
    order_by: Union['SocialReportOrderByInput', List['SocialReportOrderByInput']]
    where: 'SocialReportWhereInput'
    cursor: 'SocialReportWhereUniqueInput'
    distinct: List['SocialReportScalarFieldKeys']
    include: 'SocialReportIncludeFromSocialReportRecursive2'


class FindManySocialReportArgsFromNotificationRecursive2(TypedDict, total=False):
    """Arguments for Notification"""
    take: int
    skip: int
    order_by: Union['SocialReportOrderByInput', List['SocialReportOrderByInput']]
    where: 'SocialReportWhereInput'
    cursor: 'SocialReportWhereUniqueInput'
    distinct: List['SocialReportScalarFieldKeys']
    include: 'SocialReportIncludeFromSocialReportRecursive3'


class FindManySocialReportArgsFromNotificationRecursive3(TypedDict, total=False):
    """Arguments for Notification"""
    take: int
    skip: int
    order_by: Union['SocialReportOrderByInput', List['SocialReportOrderByInput']]
    where: 'SocialReportWhereInput'
    cursor: 'SocialReportWhereUniqueInput'
    distinct: List['SocialReportScalarFieldKeys']
    include: 'SocialReportIncludeFromSocialReportRecursive4'


class FindManySocialReportArgsFromNotificationRecursive4(TypedDict, total=False):
    """Arguments for Notification"""
    take: int
    skip: int
    order_by: Union['SocialReportOrderByInput', List['SocialReportOrderByInput']]
    where: 'SocialReportWhereInput'
    cursor: 'SocialReportWhereUniqueInput'
    distinct: List['SocialReportScalarFieldKeys']
    
    

class TrafficDataIncludeFromNotification(TypedDict, total=False):
    """Relational arguments for Notification"""


class TrafficDataIncludeFromNotificationRecursive1(TypedDict, total=False):
    """Relational arguments for Notification"""


class TrafficDataIncludeFromNotificationRecursive2(TypedDict, total=False):
    """Relational arguments for Notification"""


class TrafficDataIncludeFromNotificationRecursive3(TypedDict, total=False):
    """Relational arguments for Notification"""


class TrafficDataIncludeFromNotificationRecursive4(TypedDict, total=False):
    """Relational arguments for Notification"""

    

class TrafficDataArgsFromNotification(TypedDict, total=False):
    """Arguments for Notification"""
    include: 'TrafficDataIncludeFromTrafficDataRecursive1'


class TrafficDataArgsFromNotificationRecursive1(TypedDict, total=False):
    """Arguments for Notification"""
    include: 'TrafficDataIncludeFromTrafficDataRecursive2'


class TrafficDataArgsFromNotificationRecursive2(TypedDict, total=False):
    """Arguments for Notification"""
    include: 'TrafficDataIncludeFromTrafficDataRecursive3'


class TrafficDataArgsFromNotificationRecursive3(TypedDict, total=False):
    """Arguments for Notification"""
    include: 'TrafficDataIncludeFromTrafficDataRecursive4'


class TrafficDataArgsFromNotificationRecursive4(TypedDict, total=False):
    """Arguments for Notification"""
    
    

class FindManyTrafficDataArgsFromNotification(TypedDict, total=False):
    """Arguments for Notification"""
    take: int
    skip: int
    order_by: Union['TrafficDataOrderByInput', List['TrafficDataOrderByInput']]
    where: 'TrafficDataWhereInput'
    cursor: 'TrafficDataWhereUniqueInput'
    distinct: List['TrafficDataScalarFieldKeys']
    include: 'TrafficDataIncludeFromTrafficDataRecursive1'


class FindManyTrafficDataArgsFromNotificationRecursive1(TypedDict, total=False):
    """Arguments for Notification"""
    take: int
    skip: int
    order_by: Union['TrafficDataOrderByInput', List['TrafficDataOrderByInput']]
    where: 'TrafficDataWhereInput'
    cursor: 'TrafficDataWhereUniqueInput'
    distinct: List['TrafficDataScalarFieldKeys']
    include: 'TrafficDataIncludeFromTrafficDataRecursive2'


class FindManyTrafficDataArgsFromNotificationRecursive2(TypedDict, total=False):
    """Arguments for Notification"""
    take: int
    skip: int
    order_by: Union['TrafficDataOrderByInput', List['TrafficDataOrderByInput']]
    where: 'TrafficDataWhereInput'
    cursor: 'TrafficDataWhereUniqueInput'
    distinct: List['TrafficDataScalarFieldKeys']
    include: 'TrafficDataIncludeFromTrafficDataRecursive3'


class FindManyTrafficDataArgsFromNotificationRecursive3(TypedDict, total=False):
    """Arguments for Notification"""
    take: int
    skip: int
    order_by: Union['TrafficDataOrderByInput', List['TrafficDataOrderByInput']]
    where: 'TrafficDataWhereInput'
    cursor: 'TrafficDataWhereUniqueInput'
    distinct: List['TrafficDataScalarFieldKeys']
    include: 'TrafficDataIncludeFromTrafficDataRecursive4'


class FindManyTrafficDataArgsFromNotificationRecursive4(TypedDict, total=False):
    """Arguments for Notification"""
    take: int
    skip: int
    order_by: Union['TrafficDataOrderByInput', List['TrafficDataOrderByInput']]
    where: 'TrafficDataWhereInput'
    cursor: 'TrafficDataWhereUniqueInput'
    distinct: List['TrafficDataScalarFieldKeys']
    
    

class TrafficLightIncludeFromNotification(TypedDict, total=False):
    """Relational arguments for Notification"""


class TrafficLightIncludeFromNotificationRecursive1(TypedDict, total=False):
    """Relational arguments for Notification"""


class TrafficLightIncludeFromNotificationRecursive2(TypedDict, total=False):
    """Relational arguments for Notification"""


class TrafficLightIncludeFromNotificationRecursive3(TypedDict, total=False):
    """Relational arguments for Notification"""


class TrafficLightIncludeFromNotificationRecursive4(TypedDict, total=False):
    """Relational arguments for Notification"""

    

class TrafficLightArgsFromNotification(TypedDict, total=False):
    """Arguments for Notification"""
    include: 'TrafficLightIncludeFromTrafficLightRecursive1'


class TrafficLightArgsFromNotificationRecursive1(TypedDict, total=False):
    """Arguments for Notification"""
    include: 'TrafficLightIncludeFromTrafficLightRecursive2'


class TrafficLightArgsFromNotificationRecursive2(TypedDict, total=False):
    """Arguments for Notification"""
    include: 'TrafficLightIncludeFromTrafficLightRecursive3'


class TrafficLightArgsFromNotificationRecursive3(TypedDict, total=False):
    """Arguments for Notification"""
    include: 'TrafficLightIncludeFromTrafficLightRecursive4'


class TrafficLightArgsFromNotificationRecursive4(TypedDict, total=False):
    """Arguments for Notification"""
    
    

class FindManyTrafficLightArgsFromNotification(TypedDict, total=False):
    """Arguments for Notification"""
    take: int
    skip: int
    order_by: Union['TrafficLightOrderByInput', List['TrafficLightOrderByInput']]
    where: 'TrafficLightWhereInput'
    cursor: 'TrafficLightWhereUniqueInput'
    distinct: List['TrafficLightScalarFieldKeys']
    include: 'TrafficLightIncludeFromTrafficLightRecursive1'


class FindManyTrafficLightArgsFromNotificationRecursive1(TypedDict, total=False):
    """Arguments for Notification"""
    take: int
    skip: int
    order_by: Union['TrafficLightOrderByInput', List['TrafficLightOrderByInput']]
    where: 'TrafficLightWhereInput'
    cursor: 'TrafficLightWhereUniqueInput'
    distinct: List['TrafficLightScalarFieldKeys']
    include: 'TrafficLightIncludeFromTrafficLightRecursive2'


class FindManyTrafficLightArgsFromNotificationRecursive2(TypedDict, total=False):
    """Arguments for Notification"""
    take: int
    skip: int
    order_by: Union['TrafficLightOrderByInput', List['TrafficLightOrderByInput']]
    where: 'TrafficLightWhereInput'
    cursor: 'TrafficLightWhereUniqueInput'
    distinct: List['TrafficLightScalarFieldKeys']
    include: 'TrafficLightIncludeFromTrafficLightRecursive3'


class FindManyTrafficLightArgsFromNotificationRecursive3(TypedDict, total=False):
    """Arguments for Notification"""
    take: int
    skip: int
    order_by: Union['TrafficLightOrderByInput', List['TrafficLightOrderByInput']]
    where: 'TrafficLightWhereInput'
    cursor: 'TrafficLightWhereUniqueInput'
    distinct: List['TrafficLightScalarFieldKeys']
    include: 'TrafficLightIncludeFromTrafficLightRecursive4'


class FindManyTrafficLightArgsFromNotificationRecursive4(TypedDict, total=False):
    """Arguments for Notification"""
    take: int
    skip: int
    order_by: Union['TrafficLightOrderByInput', List['TrafficLightOrderByInput']]
    where: 'TrafficLightWhereInput'
    cursor: 'TrafficLightWhereUniqueInput'
    distinct: List['TrafficLightScalarFieldKeys']
    


FindManyNotificationArgs = FindManyNotificationArgsFromNotification
FindFirstNotificationArgs = FindManyNotificationArgsFromNotification


    

class NotificationWhereInput(TypedDict, total=False):
    """Notification arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    timestamp: Union[datetime.datetime, 'types.DateTimeFilter']
    driverId: Union[None, _str, 'types.StringFilter']
    message: Union[_str, 'types.StringFilter']

    # should be noted that AND and NOT should be Union['NotificationWhereInputRecursive1', List['NotificationWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['NotificationWhereInputRecursive1']
    OR: List['NotificationWhereInputRecursive1']
    NOT: List['NotificationWhereInputRecursive1']


class NotificationWhereInputRecursive1(TypedDict, total=False):
    """Notification arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    timestamp: Union[datetime.datetime, 'types.DateTimeFilter']
    driverId: Union[None, _str, 'types.StringFilter']
    message: Union[_str, 'types.StringFilter']

    # should be noted that AND and NOT should be Union['NotificationWhereInputRecursive2', List['NotificationWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['NotificationWhereInputRecursive2']
    OR: List['NotificationWhereInputRecursive2']
    NOT: List['NotificationWhereInputRecursive2']


class NotificationWhereInputRecursive2(TypedDict, total=False):
    """Notification arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    timestamp: Union[datetime.datetime, 'types.DateTimeFilter']
    driverId: Union[None, _str, 'types.StringFilter']
    message: Union[_str, 'types.StringFilter']

    # should be noted that AND and NOT should be Union['NotificationWhereInputRecursive3', List['NotificationWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['NotificationWhereInputRecursive3']
    OR: List['NotificationWhereInputRecursive3']
    NOT: List['NotificationWhereInputRecursive3']


class NotificationWhereInputRecursive3(TypedDict, total=False):
    """Notification arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    timestamp: Union[datetime.datetime, 'types.DateTimeFilter']
    driverId: Union[None, _str, 'types.StringFilter']
    message: Union[_str, 'types.StringFilter']

    # should be noted that AND and NOT should be Union['NotificationWhereInputRecursive4', List['NotificationWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['NotificationWhereInputRecursive4']
    OR: List['NotificationWhereInputRecursive4']
    NOT: List['NotificationWhereInputRecursive4']


class NotificationWhereInputRecursive4(TypedDict, total=False):
    """Notification arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    timestamp: Union[datetime.datetime, 'types.DateTimeFilter']
    driverId: Union[None, _str, 'types.StringFilter']
    message: Union[_str, 'types.StringFilter']



# aggregate Notification types


    

class NotificationScalarWhereWithAggregatesInput(TypedDict, total=False):
    """Notification arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    timestamp: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    driverId: Union[_str, 'types.StringWithAggregatesFilter']
    message: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['NotificationScalarWhereWithAggregatesInputRecursive1']
    OR: List['NotificationScalarWhereWithAggregatesInputRecursive1']
    NOT: List['NotificationScalarWhereWithAggregatesInputRecursive1']


class NotificationScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """Notification arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    timestamp: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    driverId: Union[_str, 'types.StringWithAggregatesFilter']
    message: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['NotificationScalarWhereWithAggregatesInputRecursive2']
    OR: List['NotificationScalarWhereWithAggregatesInputRecursive2']
    NOT: List['NotificationScalarWhereWithAggregatesInputRecursive2']


class NotificationScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """Notification arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    timestamp: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    driverId: Union[_str, 'types.StringWithAggregatesFilter']
    message: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['NotificationScalarWhereWithAggregatesInputRecursive3']
    OR: List['NotificationScalarWhereWithAggregatesInputRecursive3']
    NOT: List['NotificationScalarWhereWithAggregatesInputRecursive3']


class NotificationScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """Notification arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    timestamp: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    driverId: Union[_str, 'types.StringWithAggregatesFilter']
    message: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['NotificationScalarWhereWithAggregatesInputRecursive4']
    OR: List['NotificationScalarWhereWithAggregatesInputRecursive4']
    NOT: List['NotificationScalarWhereWithAggregatesInputRecursive4']


class NotificationScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """Notification arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    timestamp: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    driverId: Union[_str, 'types.StringWithAggregatesFilter']
    message: Union[_str, 'types.StringWithAggregatesFilter']



class NotificationGroupByOutput(TypedDict, total=False):
    id: _str
    timestamp: datetime.datetime
    driverId: _str
    message: _str
    _sum: 'NotificationSumAggregateOutput'
    _avg: 'NotificationAvgAggregateOutput'
    _min: 'NotificationMinAggregateOutput'
    _max: 'NotificationMaxAggregateOutput'
    _count: 'NotificationCountAggregateOutput'


class NotificationAvgAggregateOutput(TypedDict, total=False):
    """Notification output for aggregating averages"""


class NotificationSumAggregateOutput(TypedDict, total=False):
    """Notification output for aggregating sums"""


class NotificationScalarAggregateOutput(TypedDict, total=False):
    """Notification output including scalar fields"""
    id: _str
    timestamp: datetime.datetime
    driverId: _str
    message: _str


NotificationMinAggregateOutput = NotificationScalarAggregateOutput
NotificationMaxAggregateOutput = NotificationScalarAggregateOutput


class NotificationMaxAggregateInput(TypedDict, total=False):
    """Notification input for aggregating by max"""
    id: bool
    timestamp: bool
    driverId: bool
    message: bool


class NotificationMinAggregateInput(TypedDict, total=False):
    """Notification input for aggregating by min"""
    id: bool
    timestamp: bool
    driverId: bool
    message: bool


class NotificationNumberAggregateInput(TypedDict, total=False):
    """Notification input for aggregating numbers"""


NotificationAvgAggregateInput = NotificationNumberAggregateInput
NotificationSumAggregateInput = NotificationNumberAggregateInput


NotificationCountAggregateInput = TypedDict(
    'NotificationCountAggregateInput',
    {
        'id': bool,
        'timestamp': bool,
        'driverId': bool,
        'message': bool,
        '_all': bool,
    },
    total=False,
)

NotificationCountAggregateOutput = TypedDict(
    'NotificationCountAggregateOutput',
    {
        'id': int,
        'timestamp': int,
        'driverId': int,
        'message': int,
        '_all': int,
    },
    total=False,
)


NotificationKeys = Literal[
    'id',
    'timestamp',
    'driverId',
    'message',
]
NotificationScalarFieldKeys = Literal[
    'id',
    'timestamp',
    'driverId',
    'message',
]
NotificationScalarFieldKeysT = TypeVar('NotificationScalarFieldKeysT', bound=NotificationScalarFieldKeys)

NotificationRelationalFieldKeys = _NoneType

# Scenario types

class ScenarioOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the Scenario create method"""
    id: _str
    description: Optional[_str]


class ScenarioCreateInput(ScenarioOptionalCreateInput):
    """Required arguments to the Scenario create method"""
    name: _str
    impactAssessment: 'fields.Json'


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class ScenarioOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the Scenario create method, without relations"""
    id: _str
    description: Optional[_str]


class ScenarioCreateWithoutRelationsInput(ScenarioOptionalCreateWithoutRelationsInput):
    """Required arguments to the Scenario create method, without relations"""
    name: _str
    impactAssessment: 'fields.Json'

class ScenarioConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'ScenarioCreateWithoutRelationsInput'
    where: 'ScenarioWhereUniqueInput'

class ScenarioCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'ScenarioCreateWithoutRelationsInput'
    connect: 'ScenarioWhereUniqueInput'
    connect_or_create: 'ScenarioConnectOrCreateWithoutRelationsInput'


class ScenarioCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['ScenarioCreateWithoutRelationsInput', List['ScenarioCreateWithoutRelationsInput']]
    connect: Union['ScenarioWhereUniqueInput', List['ScenarioWhereUniqueInput']]
    connect_or_create: Union['ScenarioConnectOrCreateWithoutRelationsInput', List['ScenarioConnectOrCreateWithoutRelationsInput']]

_ScenarioWhereUnique_id_Input = TypedDict(
    '_ScenarioWhereUnique_id_Input',
    {
        'id': '_str',
    },
    total=True
)

ScenarioWhereUniqueInput = _ScenarioWhereUnique_id_Input


class ScenarioUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: _str
    name: _str
    description: Optional[_str]
    impactAssessment: 'fields.Json'


class ScenarioUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: _str
    name: _str
    description: Optional[_str]
    impactAssessment: 'fields.Json'


class ScenarioUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['ScenarioCreateWithoutRelationsInput']
    connect: List['ScenarioWhereUniqueInput']
    connect_or_create: List['ScenarioConnectOrCreateWithoutRelationsInput']
    set: List['ScenarioWhereUniqueInput']
    disconnect: List['ScenarioWhereUniqueInput']
    delete: List['ScenarioWhereUniqueInput']

    # TODO
    # update: List['ScenarioUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['ScenarioUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['ScenarioScalarWhereInput']
    # upsert: List['ScenarioUpserteWithWhereUniqueWithoutRelationsInput']


class ScenarioUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'ScenarioCreateWithoutRelationsInput'
    connect: 'ScenarioWhereUniqueInput'
    connect_or_create: 'ScenarioConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'ScenarioUpdateInput'
    # upsert: 'ScenarioUpsertWithoutRelationsInput'


class ScenarioUpsertInput(TypedDict):
    create: 'ScenarioCreateInput'
    update: 'ScenarioUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_Scenario_id_OrderByInput = TypedDict(
    '_Scenario_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_Scenario_name_OrderByInput = TypedDict(
    '_Scenario_name_OrderByInput',
    {
        'name': 'SortOrder',
    },
    total=True
)

_Scenario_description_OrderByInput = TypedDict(
    '_Scenario_description_OrderByInput',
    {
        'description': 'SortOrder',
    },
    total=True
)

_Scenario_impactAssessment_OrderByInput = TypedDict(
    '_Scenario_impactAssessment_OrderByInput',
    {
        'impactAssessment': 'SortOrder',
    },
    total=True
)

_Scenario_RelevanceInner = TypedDict(
    '_Scenario_RelevanceInner',
    {
        'fields': 'List[ScenarioScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_Scenario_RelevanceOrderByInput = TypedDict(
    '_Scenario_RelevanceOrderByInput',
    {
        '_relevance': '_Scenario_RelevanceInner',
    },
    total=True
)

ScenarioOrderByInput = Union[
    '_Scenario_id_OrderByInput',
    '_Scenario_name_OrderByInput',
    '_Scenario_description_OrderByInput',
    '_Scenario_impactAssessment_OrderByInput',
    '_Scenario_RelevanceOrderByInput',
]



# recursive Scenario types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

ScenarioRelationFilter = TypedDict(
    'ScenarioRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class ScenarioListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class ScenarioInclude(TypedDict, total=False):
    """Scenario relational arguments"""


    

class AchievementIncludeFromScenario(TypedDict, total=False):
    """Relational arguments for Scenario"""


class AchievementIncludeFromScenarioRecursive1(TypedDict, total=False):
    """Relational arguments for Scenario"""


class AchievementIncludeFromScenarioRecursive2(TypedDict, total=False):
    """Relational arguments for Scenario"""


class AchievementIncludeFromScenarioRecursive3(TypedDict, total=False):
    """Relational arguments for Scenario"""


class AchievementIncludeFromScenarioRecursive4(TypedDict, total=False):
    """Relational arguments for Scenario"""

    

class AchievementArgsFromScenario(TypedDict, total=False):
    """Arguments for Scenario"""
    include: 'AchievementIncludeFromAchievementRecursive1'


class AchievementArgsFromScenarioRecursive1(TypedDict, total=False):
    """Arguments for Scenario"""
    include: 'AchievementIncludeFromAchievementRecursive2'


class AchievementArgsFromScenarioRecursive2(TypedDict, total=False):
    """Arguments for Scenario"""
    include: 'AchievementIncludeFromAchievementRecursive3'


class AchievementArgsFromScenarioRecursive3(TypedDict, total=False):
    """Arguments for Scenario"""
    include: 'AchievementIncludeFromAchievementRecursive4'


class AchievementArgsFromScenarioRecursive4(TypedDict, total=False):
    """Arguments for Scenario"""
    
    

class FindManyAchievementArgsFromScenario(TypedDict, total=False):
    """Arguments for Scenario"""
    take: int
    skip: int
    order_by: Union['AchievementOrderByInput', List['AchievementOrderByInput']]
    where: 'AchievementWhereInput'
    cursor: 'AchievementWhereUniqueInput'
    distinct: List['AchievementScalarFieldKeys']
    include: 'AchievementIncludeFromAchievementRecursive1'


class FindManyAchievementArgsFromScenarioRecursive1(TypedDict, total=False):
    """Arguments for Scenario"""
    take: int
    skip: int
    order_by: Union['AchievementOrderByInput', List['AchievementOrderByInput']]
    where: 'AchievementWhereInput'
    cursor: 'AchievementWhereUniqueInput'
    distinct: List['AchievementScalarFieldKeys']
    include: 'AchievementIncludeFromAchievementRecursive2'


class FindManyAchievementArgsFromScenarioRecursive2(TypedDict, total=False):
    """Arguments for Scenario"""
    take: int
    skip: int
    order_by: Union['AchievementOrderByInput', List['AchievementOrderByInput']]
    where: 'AchievementWhereInput'
    cursor: 'AchievementWhereUniqueInput'
    distinct: List['AchievementScalarFieldKeys']
    include: 'AchievementIncludeFromAchievementRecursive3'


class FindManyAchievementArgsFromScenarioRecursive3(TypedDict, total=False):
    """Arguments for Scenario"""
    take: int
    skip: int
    order_by: Union['AchievementOrderByInput', List['AchievementOrderByInput']]
    where: 'AchievementWhereInput'
    cursor: 'AchievementWhereUniqueInput'
    distinct: List['AchievementScalarFieldKeys']
    include: 'AchievementIncludeFromAchievementRecursive4'


class FindManyAchievementArgsFromScenarioRecursive4(TypedDict, total=False):
    """Arguments for Scenario"""
    take: int
    skip: int
    order_by: Union['AchievementOrderByInput', List['AchievementOrderByInput']]
    where: 'AchievementWhereInput'
    cursor: 'AchievementWhereUniqueInput'
    distinct: List['AchievementScalarFieldKeys']
    
    

class CameraIncludeFromScenario(TypedDict, total=False):
    """Relational arguments for Scenario"""


class CameraIncludeFromScenarioRecursive1(TypedDict, total=False):
    """Relational arguments for Scenario"""


class CameraIncludeFromScenarioRecursive2(TypedDict, total=False):
    """Relational arguments for Scenario"""


class CameraIncludeFromScenarioRecursive3(TypedDict, total=False):
    """Relational arguments for Scenario"""


class CameraIncludeFromScenarioRecursive4(TypedDict, total=False):
    """Relational arguments for Scenario"""

    

class CameraArgsFromScenario(TypedDict, total=False):
    """Arguments for Scenario"""
    include: 'CameraIncludeFromCameraRecursive1'


class CameraArgsFromScenarioRecursive1(TypedDict, total=False):
    """Arguments for Scenario"""
    include: 'CameraIncludeFromCameraRecursive2'


class CameraArgsFromScenarioRecursive2(TypedDict, total=False):
    """Arguments for Scenario"""
    include: 'CameraIncludeFromCameraRecursive3'


class CameraArgsFromScenarioRecursive3(TypedDict, total=False):
    """Arguments for Scenario"""
    include: 'CameraIncludeFromCameraRecursive4'


class CameraArgsFromScenarioRecursive4(TypedDict, total=False):
    """Arguments for Scenario"""
    
    

class FindManyCameraArgsFromScenario(TypedDict, total=False):
    """Arguments for Scenario"""
    take: int
    skip: int
    order_by: Union['CameraOrderByInput', List['CameraOrderByInput']]
    where: 'CameraWhereInput'
    cursor: 'CameraWhereUniqueInput'
    distinct: List['CameraScalarFieldKeys']
    include: 'CameraIncludeFromCameraRecursive1'


class FindManyCameraArgsFromScenarioRecursive1(TypedDict, total=False):
    """Arguments for Scenario"""
    take: int
    skip: int
    order_by: Union['CameraOrderByInput', List['CameraOrderByInput']]
    where: 'CameraWhereInput'
    cursor: 'CameraWhereUniqueInput'
    distinct: List['CameraScalarFieldKeys']
    include: 'CameraIncludeFromCameraRecursive2'


class FindManyCameraArgsFromScenarioRecursive2(TypedDict, total=False):
    """Arguments for Scenario"""
    take: int
    skip: int
    order_by: Union['CameraOrderByInput', List['CameraOrderByInput']]
    where: 'CameraWhereInput'
    cursor: 'CameraWhereUniqueInput'
    distinct: List['CameraScalarFieldKeys']
    include: 'CameraIncludeFromCameraRecursive3'


class FindManyCameraArgsFromScenarioRecursive3(TypedDict, total=False):
    """Arguments for Scenario"""
    take: int
    skip: int
    order_by: Union['CameraOrderByInput', List['CameraOrderByInput']]
    where: 'CameraWhereInput'
    cursor: 'CameraWhereUniqueInput'
    distinct: List['CameraScalarFieldKeys']
    include: 'CameraIncludeFromCameraRecursive4'


class FindManyCameraArgsFromScenarioRecursive4(TypedDict, total=False):
    """Arguments for Scenario"""
    take: int
    skip: int
    order_by: Union['CameraOrderByInput', List['CameraOrderByInput']]
    where: 'CameraWhereInput'
    cursor: 'CameraWhereUniqueInput'
    distinct: List['CameraScalarFieldKeys']
    
    

class EffectivenessIncludeFromScenario(TypedDict, total=False):
    """Relational arguments for Scenario"""


class EffectivenessIncludeFromScenarioRecursive1(TypedDict, total=False):
    """Relational arguments for Scenario"""


class EffectivenessIncludeFromScenarioRecursive2(TypedDict, total=False):
    """Relational arguments for Scenario"""


class EffectivenessIncludeFromScenarioRecursive3(TypedDict, total=False):
    """Relational arguments for Scenario"""


class EffectivenessIncludeFromScenarioRecursive4(TypedDict, total=False):
    """Relational arguments for Scenario"""

    

class EffectivenessArgsFromScenario(TypedDict, total=False):
    """Arguments for Scenario"""
    include: 'EffectivenessIncludeFromEffectivenessRecursive1'


class EffectivenessArgsFromScenarioRecursive1(TypedDict, total=False):
    """Arguments for Scenario"""
    include: 'EffectivenessIncludeFromEffectivenessRecursive2'


class EffectivenessArgsFromScenarioRecursive2(TypedDict, total=False):
    """Arguments for Scenario"""
    include: 'EffectivenessIncludeFromEffectivenessRecursive3'


class EffectivenessArgsFromScenarioRecursive3(TypedDict, total=False):
    """Arguments for Scenario"""
    include: 'EffectivenessIncludeFromEffectivenessRecursive4'


class EffectivenessArgsFromScenarioRecursive4(TypedDict, total=False):
    """Arguments for Scenario"""
    
    

class FindManyEffectivenessArgsFromScenario(TypedDict, total=False):
    """Arguments for Scenario"""
    take: int
    skip: int
    order_by: Union['EffectivenessOrderByInput', List['EffectivenessOrderByInput']]
    where: 'EffectivenessWhereInput'
    cursor: 'EffectivenessWhereUniqueInput'
    distinct: List['EffectivenessScalarFieldKeys']
    include: 'EffectivenessIncludeFromEffectivenessRecursive1'


class FindManyEffectivenessArgsFromScenarioRecursive1(TypedDict, total=False):
    """Arguments for Scenario"""
    take: int
    skip: int
    order_by: Union['EffectivenessOrderByInput', List['EffectivenessOrderByInput']]
    where: 'EffectivenessWhereInput'
    cursor: 'EffectivenessWhereUniqueInput'
    distinct: List['EffectivenessScalarFieldKeys']
    include: 'EffectivenessIncludeFromEffectivenessRecursive2'


class FindManyEffectivenessArgsFromScenarioRecursive2(TypedDict, total=False):
    """Arguments for Scenario"""
    take: int
    skip: int
    order_by: Union['EffectivenessOrderByInput', List['EffectivenessOrderByInput']]
    where: 'EffectivenessWhereInput'
    cursor: 'EffectivenessWhereUniqueInput'
    distinct: List['EffectivenessScalarFieldKeys']
    include: 'EffectivenessIncludeFromEffectivenessRecursive3'


class FindManyEffectivenessArgsFromScenarioRecursive3(TypedDict, total=False):
    """Arguments for Scenario"""
    take: int
    skip: int
    order_by: Union['EffectivenessOrderByInput', List['EffectivenessOrderByInput']]
    where: 'EffectivenessWhereInput'
    cursor: 'EffectivenessWhereUniqueInput'
    distinct: List['EffectivenessScalarFieldKeys']
    include: 'EffectivenessIncludeFromEffectivenessRecursive4'


class FindManyEffectivenessArgsFromScenarioRecursive4(TypedDict, total=False):
    """Arguments for Scenario"""
    take: int
    skip: int
    order_by: Union['EffectivenessOrderByInput', List['EffectivenessOrderByInput']]
    where: 'EffectivenessWhereInput'
    cursor: 'EffectivenessWhereUniqueInput'
    distinct: List['EffectivenessScalarFieldKeys']
    
    

class EnvironmentalDataIncludeFromScenario(TypedDict, total=False):
    """Relational arguments for Scenario"""


class EnvironmentalDataIncludeFromScenarioRecursive1(TypedDict, total=False):
    """Relational arguments for Scenario"""


class EnvironmentalDataIncludeFromScenarioRecursive2(TypedDict, total=False):
    """Relational arguments for Scenario"""


class EnvironmentalDataIncludeFromScenarioRecursive3(TypedDict, total=False):
    """Relational arguments for Scenario"""


class EnvironmentalDataIncludeFromScenarioRecursive4(TypedDict, total=False):
    """Relational arguments for Scenario"""

    

class EnvironmentalDataArgsFromScenario(TypedDict, total=False):
    """Arguments for Scenario"""
    include: 'EnvironmentalDataIncludeFromEnvironmentalDataRecursive1'


class EnvironmentalDataArgsFromScenarioRecursive1(TypedDict, total=False):
    """Arguments for Scenario"""
    include: 'EnvironmentalDataIncludeFromEnvironmentalDataRecursive2'


class EnvironmentalDataArgsFromScenarioRecursive2(TypedDict, total=False):
    """Arguments for Scenario"""
    include: 'EnvironmentalDataIncludeFromEnvironmentalDataRecursive3'


class EnvironmentalDataArgsFromScenarioRecursive3(TypedDict, total=False):
    """Arguments for Scenario"""
    include: 'EnvironmentalDataIncludeFromEnvironmentalDataRecursive4'


class EnvironmentalDataArgsFromScenarioRecursive4(TypedDict, total=False):
    """Arguments for Scenario"""
    
    

class FindManyEnvironmentalDataArgsFromScenario(TypedDict, total=False):
    """Arguments for Scenario"""
    take: int
    skip: int
    order_by: Union['EnvironmentalDataOrderByInput', List['EnvironmentalDataOrderByInput']]
    where: 'EnvironmentalDataWhereInput'
    cursor: 'EnvironmentalDataWhereUniqueInput'
    distinct: List['EnvironmentalDataScalarFieldKeys']
    include: 'EnvironmentalDataIncludeFromEnvironmentalDataRecursive1'


class FindManyEnvironmentalDataArgsFromScenarioRecursive1(TypedDict, total=False):
    """Arguments for Scenario"""
    take: int
    skip: int
    order_by: Union['EnvironmentalDataOrderByInput', List['EnvironmentalDataOrderByInput']]
    where: 'EnvironmentalDataWhereInput'
    cursor: 'EnvironmentalDataWhereUniqueInput'
    distinct: List['EnvironmentalDataScalarFieldKeys']
    include: 'EnvironmentalDataIncludeFromEnvironmentalDataRecursive2'


class FindManyEnvironmentalDataArgsFromScenarioRecursive2(TypedDict, total=False):
    """Arguments for Scenario"""
    take: int
    skip: int
    order_by: Union['EnvironmentalDataOrderByInput', List['EnvironmentalDataOrderByInput']]
    where: 'EnvironmentalDataWhereInput'
    cursor: 'EnvironmentalDataWhereUniqueInput'
    distinct: List['EnvironmentalDataScalarFieldKeys']
    include: 'EnvironmentalDataIncludeFromEnvironmentalDataRecursive3'


class FindManyEnvironmentalDataArgsFromScenarioRecursive3(TypedDict, total=False):
    """Arguments for Scenario"""
    take: int
    skip: int
    order_by: Union['EnvironmentalDataOrderByInput', List['EnvironmentalDataOrderByInput']]
    where: 'EnvironmentalDataWhereInput'
    cursor: 'EnvironmentalDataWhereUniqueInput'
    distinct: List['EnvironmentalDataScalarFieldKeys']
    include: 'EnvironmentalDataIncludeFromEnvironmentalDataRecursive4'


class FindManyEnvironmentalDataArgsFromScenarioRecursive4(TypedDict, total=False):
    """Arguments for Scenario"""
    take: int
    skip: int
    order_by: Union['EnvironmentalDataOrderByInput', List['EnvironmentalDataOrderByInput']]
    where: 'EnvironmentalDataWhereInput'
    cursor: 'EnvironmentalDataWhereUniqueInput'
    distinct: List['EnvironmentalDataScalarFieldKeys']
    
    

class EventIncludeFromScenario(TypedDict, total=False):
    """Relational arguments for Scenario"""


class EventIncludeFromScenarioRecursive1(TypedDict, total=False):
    """Relational arguments for Scenario"""


class EventIncludeFromScenarioRecursive2(TypedDict, total=False):
    """Relational arguments for Scenario"""


class EventIncludeFromScenarioRecursive3(TypedDict, total=False):
    """Relational arguments for Scenario"""


class EventIncludeFromScenarioRecursive4(TypedDict, total=False):
    """Relational arguments for Scenario"""

    

class EventArgsFromScenario(TypedDict, total=False):
    """Arguments for Scenario"""
    include: 'EventIncludeFromEventRecursive1'


class EventArgsFromScenarioRecursive1(TypedDict, total=False):
    """Arguments for Scenario"""
    include: 'EventIncludeFromEventRecursive2'


class EventArgsFromScenarioRecursive2(TypedDict, total=False):
    """Arguments for Scenario"""
    include: 'EventIncludeFromEventRecursive3'


class EventArgsFromScenarioRecursive3(TypedDict, total=False):
    """Arguments for Scenario"""
    include: 'EventIncludeFromEventRecursive4'


class EventArgsFromScenarioRecursive4(TypedDict, total=False):
    """Arguments for Scenario"""
    
    

class FindManyEventArgsFromScenario(TypedDict, total=False):
    """Arguments for Scenario"""
    take: int
    skip: int
    order_by: Union['EventOrderByInput', List['EventOrderByInput']]
    where: 'EventWhereInput'
    cursor: 'EventWhereUniqueInput'
    distinct: List['EventScalarFieldKeys']
    include: 'EventIncludeFromEventRecursive1'


class FindManyEventArgsFromScenarioRecursive1(TypedDict, total=False):
    """Arguments for Scenario"""
    take: int
    skip: int
    order_by: Union['EventOrderByInput', List['EventOrderByInput']]
    where: 'EventWhereInput'
    cursor: 'EventWhereUniqueInput'
    distinct: List['EventScalarFieldKeys']
    include: 'EventIncludeFromEventRecursive2'


class FindManyEventArgsFromScenarioRecursive2(TypedDict, total=False):
    """Arguments for Scenario"""
    take: int
    skip: int
    order_by: Union['EventOrderByInput', List['EventOrderByInput']]
    where: 'EventWhereInput'
    cursor: 'EventWhereUniqueInput'
    distinct: List['EventScalarFieldKeys']
    include: 'EventIncludeFromEventRecursive3'


class FindManyEventArgsFromScenarioRecursive3(TypedDict, total=False):
    """Arguments for Scenario"""
    take: int
    skip: int
    order_by: Union['EventOrderByInput', List['EventOrderByInput']]
    where: 'EventWhereInput'
    cursor: 'EventWhereUniqueInput'
    distinct: List['EventScalarFieldKeys']
    include: 'EventIncludeFromEventRecursive4'


class FindManyEventArgsFromScenarioRecursive4(TypedDict, total=False):
    """Arguments for Scenario"""
    take: int
    skip: int
    order_by: Union['EventOrderByInput', List['EventOrderByInput']]
    where: 'EventWhereInput'
    cursor: 'EventWhereUniqueInput'
    distinct: List['EventScalarFieldKeys']
    
    

class ForecastIncludeFromScenario(TypedDict, total=False):
    """Relational arguments for Scenario"""


class ForecastIncludeFromScenarioRecursive1(TypedDict, total=False):
    """Relational arguments for Scenario"""


class ForecastIncludeFromScenarioRecursive2(TypedDict, total=False):
    """Relational arguments for Scenario"""


class ForecastIncludeFromScenarioRecursive3(TypedDict, total=False):
    """Relational arguments for Scenario"""


class ForecastIncludeFromScenarioRecursive4(TypedDict, total=False):
    """Relational arguments for Scenario"""

    

class ForecastArgsFromScenario(TypedDict, total=False):
    """Arguments for Scenario"""
    include: 'ForecastIncludeFromForecastRecursive1'


class ForecastArgsFromScenarioRecursive1(TypedDict, total=False):
    """Arguments for Scenario"""
    include: 'ForecastIncludeFromForecastRecursive2'


class ForecastArgsFromScenarioRecursive2(TypedDict, total=False):
    """Arguments for Scenario"""
    include: 'ForecastIncludeFromForecastRecursive3'


class ForecastArgsFromScenarioRecursive3(TypedDict, total=False):
    """Arguments for Scenario"""
    include: 'ForecastIncludeFromForecastRecursive4'


class ForecastArgsFromScenarioRecursive4(TypedDict, total=False):
    """Arguments for Scenario"""
    
    

class FindManyForecastArgsFromScenario(TypedDict, total=False):
    """Arguments for Scenario"""
    take: int
    skip: int
    order_by: Union['ForecastOrderByInput', List['ForecastOrderByInput']]
    where: 'ForecastWhereInput'
    cursor: 'ForecastWhereUniqueInput'
    distinct: List['ForecastScalarFieldKeys']
    include: 'ForecastIncludeFromForecastRecursive1'


class FindManyForecastArgsFromScenarioRecursive1(TypedDict, total=False):
    """Arguments for Scenario"""
    take: int
    skip: int
    order_by: Union['ForecastOrderByInput', List['ForecastOrderByInput']]
    where: 'ForecastWhereInput'
    cursor: 'ForecastWhereUniqueInput'
    distinct: List['ForecastScalarFieldKeys']
    include: 'ForecastIncludeFromForecastRecursive2'


class FindManyForecastArgsFromScenarioRecursive2(TypedDict, total=False):
    """Arguments for Scenario"""
    take: int
    skip: int
    order_by: Union['ForecastOrderByInput', List['ForecastOrderByInput']]
    where: 'ForecastWhereInput'
    cursor: 'ForecastWhereUniqueInput'
    distinct: List['ForecastScalarFieldKeys']
    include: 'ForecastIncludeFromForecastRecursive3'


class FindManyForecastArgsFromScenarioRecursive3(TypedDict, total=False):
    """Arguments for Scenario"""
    take: int
    skip: int
    order_by: Union['ForecastOrderByInput', List['ForecastOrderByInput']]
    where: 'ForecastWhereInput'
    cursor: 'ForecastWhereUniqueInput'
    distinct: List['ForecastScalarFieldKeys']
    include: 'ForecastIncludeFromForecastRecursive4'


class FindManyForecastArgsFromScenarioRecursive4(TypedDict, total=False):
    """Arguments for Scenario"""
    take: int
    skip: int
    order_by: Union['ForecastOrderByInput', List['ForecastOrderByInput']]
    where: 'ForecastWhereInput'
    cursor: 'ForecastWhereUniqueInput'
    distinct: List['ForecastScalarFieldKeys']
    
    

class IncidentIncludeFromScenario(TypedDict, total=False):
    """Relational arguments for Scenario"""


class IncidentIncludeFromScenarioRecursive1(TypedDict, total=False):
    """Relational arguments for Scenario"""


class IncidentIncludeFromScenarioRecursive2(TypedDict, total=False):
    """Relational arguments for Scenario"""


class IncidentIncludeFromScenarioRecursive3(TypedDict, total=False):
    """Relational arguments for Scenario"""


class IncidentIncludeFromScenarioRecursive4(TypedDict, total=False):
    """Relational arguments for Scenario"""

    

class IncidentArgsFromScenario(TypedDict, total=False):
    """Arguments for Scenario"""
    include: 'IncidentIncludeFromIncidentRecursive1'


class IncidentArgsFromScenarioRecursive1(TypedDict, total=False):
    """Arguments for Scenario"""
    include: 'IncidentIncludeFromIncidentRecursive2'


class IncidentArgsFromScenarioRecursive2(TypedDict, total=False):
    """Arguments for Scenario"""
    include: 'IncidentIncludeFromIncidentRecursive3'


class IncidentArgsFromScenarioRecursive3(TypedDict, total=False):
    """Arguments for Scenario"""
    include: 'IncidentIncludeFromIncidentRecursive4'


class IncidentArgsFromScenarioRecursive4(TypedDict, total=False):
    """Arguments for Scenario"""
    
    

class FindManyIncidentArgsFromScenario(TypedDict, total=False):
    """Arguments for Scenario"""
    take: int
    skip: int
    order_by: Union['IncidentOrderByInput', List['IncidentOrderByInput']]
    where: 'IncidentWhereInput'
    cursor: 'IncidentWhereUniqueInput'
    distinct: List['IncidentScalarFieldKeys']
    include: 'IncidentIncludeFromIncidentRecursive1'


class FindManyIncidentArgsFromScenarioRecursive1(TypedDict, total=False):
    """Arguments for Scenario"""
    take: int
    skip: int
    order_by: Union['IncidentOrderByInput', List['IncidentOrderByInput']]
    where: 'IncidentWhereInput'
    cursor: 'IncidentWhereUniqueInput'
    distinct: List['IncidentScalarFieldKeys']
    include: 'IncidentIncludeFromIncidentRecursive2'


class FindManyIncidentArgsFromScenarioRecursive2(TypedDict, total=False):
    """Arguments for Scenario"""
    take: int
    skip: int
    order_by: Union['IncidentOrderByInput', List['IncidentOrderByInput']]
    where: 'IncidentWhereInput'
    cursor: 'IncidentWhereUniqueInput'
    distinct: List['IncidentScalarFieldKeys']
    include: 'IncidentIncludeFromIncidentRecursive3'


class FindManyIncidentArgsFromScenarioRecursive3(TypedDict, total=False):
    """Arguments for Scenario"""
    take: int
    skip: int
    order_by: Union['IncidentOrderByInput', List['IncidentOrderByInput']]
    where: 'IncidentWhereInput'
    cursor: 'IncidentWhereUniqueInput'
    distinct: List['IncidentScalarFieldKeys']
    include: 'IncidentIncludeFromIncidentRecursive4'


class FindManyIncidentArgsFromScenarioRecursive4(TypedDict, total=False):
    """Arguments for Scenario"""
    take: int
    skip: int
    order_by: Union['IncidentOrderByInput', List['IncidentOrderByInput']]
    where: 'IncidentWhereInput'
    cursor: 'IncidentWhereUniqueInput'
    distinct: List['IncidentScalarFieldKeys']
    
    

class NotificationIncludeFromScenario(TypedDict, total=False):
    """Relational arguments for Scenario"""


class NotificationIncludeFromScenarioRecursive1(TypedDict, total=False):
    """Relational arguments for Scenario"""


class NotificationIncludeFromScenarioRecursive2(TypedDict, total=False):
    """Relational arguments for Scenario"""


class NotificationIncludeFromScenarioRecursive3(TypedDict, total=False):
    """Relational arguments for Scenario"""


class NotificationIncludeFromScenarioRecursive4(TypedDict, total=False):
    """Relational arguments for Scenario"""

    

class NotificationArgsFromScenario(TypedDict, total=False):
    """Arguments for Scenario"""
    include: 'NotificationIncludeFromNotificationRecursive1'


class NotificationArgsFromScenarioRecursive1(TypedDict, total=False):
    """Arguments for Scenario"""
    include: 'NotificationIncludeFromNotificationRecursive2'


class NotificationArgsFromScenarioRecursive2(TypedDict, total=False):
    """Arguments for Scenario"""
    include: 'NotificationIncludeFromNotificationRecursive3'


class NotificationArgsFromScenarioRecursive3(TypedDict, total=False):
    """Arguments for Scenario"""
    include: 'NotificationIncludeFromNotificationRecursive4'


class NotificationArgsFromScenarioRecursive4(TypedDict, total=False):
    """Arguments for Scenario"""
    
    

class FindManyNotificationArgsFromScenario(TypedDict, total=False):
    """Arguments for Scenario"""
    take: int
    skip: int
    order_by: Union['NotificationOrderByInput', List['NotificationOrderByInput']]
    where: 'NotificationWhereInput'
    cursor: 'NotificationWhereUniqueInput'
    distinct: List['NotificationScalarFieldKeys']
    include: 'NotificationIncludeFromNotificationRecursive1'


class FindManyNotificationArgsFromScenarioRecursive1(TypedDict, total=False):
    """Arguments for Scenario"""
    take: int
    skip: int
    order_by: Union['NotificationOrderByInput', List['NotificationOrderByInput']]
    where: 'NotificationWhereInput'
    cursor: 'NotificationWhereUniqueInput'
    distinct: List['NotificationScalarFieldKeys']
    include: 'NotificationIncludeFromNotificationRecursive2'


class FindManyNotificationArgsFromScenarioRecursive2(TypedDict, total=False):
    """Arguments for Scenario"""
    take: int
    skip: int
    order_by: Union['NotificationOrderByInput', List['NotificationOrderByInput']]
    where: 'NotificationWhereInput'
    cursor: 'NotificationWhereUniqueInput'
    distinct: List['NotificationScalarFieldKeys']
    include: 'NotificationIncludeFromNotificationRecursive3'


class FindManyNotificationArgsFromScenarioRecursive3(TypedDict, total=False):
    """Arguments for Scenario"""
    take: int
    skip: int
    order_by: Union['NotificationOrderByInput', List['NotificationOrderByInput']]
    where: 'NotificationWhereInput'
    cursor: 'NotificationWhereUniqueInput'
    distinct: List['NotificationScalarFieldKeys']
    include: 'NotificationIncludeFromNotificationRecursive4'


class FindManyNotificationArgsFromScenarioRecursive4(TypedDict, total=False):
    """Arguments for Scenario"""
    take: int
    skip: int
    order_by: Union['NotificationOrderByInput', List['NotificationOrderByInput']]
    where: 'NotificationWhereInput'
    cursor: 'NotificationWhereUniqueInput'
    distinct: List['NotificationScalarFieldKeys']
    
    

class ScenarioIncludeFromScenario(TypedDict, total=False):
    """Relational arguments for Scenario"""


class ScenarioIncludeFromScenarioRecursive1(TypedDict, total=False):
    """Relational arguments for Scenario"""


class ScenarioIncludeFromScenarioRecursive2(TypedDict, total=False):
    """Relational arguments for Scenario"""


class ScenarioIncludeFromScenarioRecursive3(TypedDict, total=False):
    """Relational arguments for Scenario"""


class ScenarioIncludeFromScenarioRecursive4(TypedDict, total=False):
    """Relational arguments for Scenario"""

    

class ScenarioArgsFromScenario(TypedDict, total=False):
    """Arguments for Scenario"""
    include: 'ScenarioIncludeFromScenarioRecursive1'


class ScenarioArgsFromScenarioRecursive1(TypedDict, total=False):
    """Arguments for Scenario"""
    include: 'ScenarioIncludeFromScenarioRecursive2'


class ScenarioArgsFromScenarioRecursive2(TypedDict, total=False):
    """Arguments for Scenario"""
    include: 'ScenarioIncludeFromScenarioRecursive3'


class ScenarioArgsFromScenarioRecursive3(TypedDict, total=False):
    """Arguments for Scenario"""
    include: 'ScenarioIncludeFromScenarioRecursive4'


class ScenarioArgsFromScenarioRecursive4(TypedDict, total=False):
    """Arguments for Scenario"""
    
    

class FindManyScenarioArgsFromScenario(TypedDict, total=False):
    """Arguments for Scenario"""
    take: int
    skip: int
    order_by: Union['ScenarioOrderByInput', List['ScenarioOrderByInput']]
    where: 'ScenarioWhereInput'
    cursor: 'ScenarioWhereUniqueInput'
    distinct: List['ScenarioScalarFieldKeys']
    include: 'ScenarioIncludeFromScenarioRecursive1'


class FindManyScenarioArgsFromScenarioRecursive1(TypedDict, total=False):
    """Arguments for Scenario"""
    take: int
    skip: int
    order_by: Union['ScenarioOrderByInput', List['ScenarioOrderByInput']]
    where: 'ScenarioWhereInput'
    cursor: 'ScenarioWhereUniqueInput'
    distinct: List['ScenarioScalarFieldKeys']
    include: 'ScenarioIncludeFromScenarioRecursive2'


class FindManyScenarioArgsFromScenarioRecursive2(TypedDict, total=False):
    """Arguments for Scenario"""
    take: int
    skip: int
    order_by: Union['ScenarioOrderByInput', List['ScenarioOrderByInput']]
    where: 'ScenarioWhereInput'
    cursor: 'ScenarioWhereUniqueInput'
    distinct: List['ScenarioScalarFieldKeys']
    include: 'ScenarioIncludeFromScenarioRecursive3'


class FindManyScenarioArgsFromScenarioRecursive3(TypedDict, total=False):
    """Arguments for Scenario"""
    take: int
    skip: int
    order_by: Union['ScenarioOrderByInput', List['ScenarioOrderByInput']]
    where: 'ScenarioWhereInput'
    cursor: 'ScenarioWhereUniqueInput'
    distinct: List['ScenarioScalarFieldKeys']
    include: 'ScenarioIncludeFromScenarioRecursive4'


class FindManyScenarioArgsFromScenarioRecursive4(TypedDict, total=False):
    """Arguments for Scenario"""
    take: int
    skip: int
    order_by: Union['ScenarioOrderByInput', List['ScenarioOrderByInput']]
    where: 'ScenarioWhereInput'
    cursor: 'ScenarioWhereUniqueInput'
    distinct: List['ScenarioScalarFieldKeys']
    
    

class SocialReportIncludeFromScenario(TypedDict, total=False):
    """Relational arguments for Scenario"""


class SocialReportIncludeFromScenarioRecursive1(TypedDict, total=False):
    """Relational arguments for Scenario"""


class SocialReportIncludeFromScenarioRecursive2(TypedDict, total=False):
    """Relational arguments for Scenario"""


class SocialReportIncludeFromScenarioRecursive3(TypedDict, total=False):
    """Relational arguments for Scenario"""


class SocialReportIncludeFromScenarioRecursive4(TypedDict, total=False):
    """Relational arguments for Scenario"""

    

class SocialReportArgsFromScenario(TypedDict, total=False):
    """Arguments for Scenario"""
    include: 'SocialReportIncludeFromSocialReportRecursive1'


class SocialReportArgsFromScenarioRecursive1(TypedDict, total=False):
    """Arguments for Scenario"""
    include: 'SocialReportIncludeFromSocialReportRecursive2'


class SocialReportArgsFromScenarioRecursive2(TypedDict, total=False):
    """Arguments for Scenario"""
    include: 'SocialReportIncludeFromSocialReportRecursive3'


class SocialReportArgsFromScenarioRecursive3(TypedDict, total=False):
    """Arguments for Scenario"""
    include: 'SocialReportIncludeFromSocialReportRecursive4'


class SocialReportArgsFromScenarioRecursive4(TypedDict, total=False):
    """Arguments for Scenario"""
    
    

class FindManySocialReportArgsFromScenario(TypedDict, total=False):
    """Arguments for Scenario"""
    take: int
    skip: int
    order_by: Union['SocialReportOrderByInput', List['SocialReportOrderByInput']]
    where: 'SocialReportWhereInput'
    cursor: 'SocialReportWhereUniqueInput'
    distinct: List['SocialReportScalarFieldKeys']
    include: 'SocialReportIncludeFromSocialReportRecursive1'


class FindManySocialReportArgsFromScenarioRecursive1(TypedDict, total=False):
    """Arguments for Scenario"""
    take: int
    skip: int
    order_by: Union['SocialReportOrderByInput', List['SocialReportOrderByInput']]
    where: 'SocialReportWhereInput'
    cursor: 'SocialReportWhereUniqueInput'
    distinct: List['SocialReportScalarFieldKeys']
    include: 'SocialReportIncludeFromSocialReportRecursive2'


class FindManySocialReportArgsFromScenarioRecursive2(TypedDict, total=False):
    """Arguments for Scenario"""
    take: int
    skip: int
    order_by: Union['SocialReportOrderByInput', List['SocialReportOrderByInput']]
    where: 'SocialReportWhereInput'
    cursor: 'SocialReportWhereUniqueInput'
    distinct: List['SocialReportScalarFieldKeys']
    include: 'SocialReportIncludeFromSocialReportRecursive3'


class FindManySocialReportArgsFromScenarioRecursive3(TypedDict, total=False):
    """Arguments for Scenario"""
    take: int
    skip: int
    order_by: Union['SocialReportOrderByInput', List['SocialReportOrderByInput']]
    where: 'SocialReportWhereInput'
    cursor: 'SocialReportWhereUniqueInput'
    distinct: List['SocialReportScalarFieldKeys']
    include: 'SocialReportIncludeFromSocialReportRecursive4'


class FindManySocialReportArgsFromScenarioRecursive4(TypedDict, total=False):
    """Arguments for Scenario"""
    take: int
    skip: int
    order_by: Union['SocialReportOrderByInput', List['SocialReportOrderByInput']]
    where: 'SocialReportWhereInput'
    cursor: 'SocialReportWhereUniqueInput'
    distinct: List['SocialReportScalarFieldKeys']
    
    

class TrafficDataIncludeFromScenario(TypedDict, total=False):
    """Relational arguments for Scenario"""


class TrafficDataIncludeFromScenarioRecursive1(TypedDict, total=False):
    """Relational arguments for Scenario"""


class TrafficDataIncludeFromScenarioRecursive2(TypedDict, total=False):
    """Relational arguments for Scenario"""


class TrafficDataIncludeFromScenarioRecursive3(TypedDict, total=False):
    """Relational arguments for Scenario"""


class TrafficDataIncludeFromScenarioRecursive4(TypedDict, total=False):
    """Relational arguments for Scenario"""

    

class TrafficDataArgsFromScenario(TypedDict, total=False):
    """Arguments for Scenario"""
    include: 'TrafficDataIncludeFromTrafficDataRecursive1'


class TrafficDataArgsFromScenarioRecursive1(TypedDict, total=False):
    """Arguments for Scenario"""
    include: 'TrafficDataIncludeFromTrafficDataRecursive2'


class TrafficDataArgsFromScenarioRecursive2(TypedDict, total=False):
    """Arguments for Scenario"""
    include: 'TrafficDataIncludeFromTrafficDataRecursive3'


class TrafficDataArgsFromScenarioRecursive3(TypedDict, total=False):
    """Arguments for Scenario"""
    include: 'TrafficDataIncludeFromTrafficDataRecursive4'


class TrafficDataArgsFromScenarioRecursive4(TypedDict, total=False):
    """Arguments for Scenario"""
    
    

class FindManyTrafficDataArgsFromScenario(TypedDict, total=False):
    """Arguments for Scenario"""
    take: int
    skip: int
    order_by: Union['TrafficDataOrderByInput', List['TrafficDataOrderByInput']]
    where: 'TrafficDataWhereInput'
    cursor: 'TrafficDataWhereUniqueInput'
    distinct: List['TrafficDataScalarFieldKeys']
    include: 'TrafficDataIncludeFromTrafficDataRecursive1'


class FindManyTrafficDataArgsFromScenarioRecursive1(TypedDict, total=False):
    """Arguments for Scenario"""
    take: int
    skip: int
    order_by: Union['TrafficDataOrderByInput', List['TrafficDataOrderByInput']]
    where: 'TrafficDataWhereInput'
    cursor: 'TrafficDataWhereUniqueInput'
    distinct: List['TrafficDataScalarFieldKeys']
    include: 'TrafficDataIncludeFromTrafficDataRecursive2'


class FindManyTrafficDataArgsFromScenarioRecursive2(TypedDict, total=False):
    """Arguments for Scenario"""
    take: int
    skip: int
    order_by: Union['TrafficDataOrderByInput', List['TrafficDataOrderByInput']]
    where: 'TrafficDataWhereInput'
    cursor: 'TrafficDataWhereUniqueInput'
    distinct: List['TrafficDataScalarFieldKeys']
    include: 'TrafficDataIncludeFromTrafficDataRecursive3'


class FindManyTrafficDataArgsFromScenarioRecursive3(TypedDict, total=False):
    """Arguments for Scenario"""
    take: int
    skip: int
    order_by: Union['TrafficDataOrderByInput', List['TrafficDataOrderByInput']]
    where: 'TrafficDataWhereInput'
    cursor: 'TrafficDataWhereUniqueInput'
    distinct: List['TrafficDataScalarFieldKeys']
    include: 'TrafficDataIncludeFromTrafficDataRecursive4'


class FindManyTrafficDataArgsFromScenarioRecursive4(TypedDict, total=False):
    """Arguments for Scenario"""
    take: int
    skip: int
    order_by: Union['TrafficDataOrderByInput', List['TrafficDataOrderByInput']]
    where: 'TrafficDataWhereInput'
    cursor: 'TrafficDataWhereUniqueInput'
    distinct: List['TrafficDataScalarFieldKeys']
    
    

class TrafficLightIncludeFromScenario(TypedDict, total=False):
    """Relational arguments for Scenario"""


class TrafficLightIncludeFromScenarioRecursive1(TypedDict, total=False):
    """Relational arguments for Scenario"""


class TrafficLightIncludeFromScenarioRecursive2(TypedDict, total=False):
    """Relational arguments for Scenario"""


class TrafficLightIncludeFromScenarioRecursive3(TypedDict, total=False):
    """Relational arguments for Scenario"""


class TrafficLightIncludeFromScenarioRecursive4(TypedDict, total=False):
    """Relational arguments for Scenario"""

    

class TrafficLightArgsFromScenario(TypedDict, total=False):
    """Arguments for Scenario"""
    include: 'TrafficLightIncludeFromTrafficLightRecursive1'


class TrafficLightArgsFromScenarioRecursive1(TypedDict, total=False):
    """Arguments for Scenario"""
    include: 'TrafficLightIncludeFromTrafficLightRecursive2'


class TrafficLightArgsFromScenarioRecursive2(TypedDict, total=False):
    """Arguments for Scenario"""
    include: 'TrafficLightIncludeFromTrafficLightRecursive3'


class TrafficLightArgsFromScenarioRecursive3(TypedDict, total=False):
    """Arguments for Scenario"""
    include: 'TrafficLightIncludeFromTrafficLightRecursive4'


class TrafficLightArgsFromScenarioRecursive4(TypedDict, total=False):
    """Arguments for Scenario"""
    
    

class FindManyTrafficLightArgsFromScenario(TypedDict, total=False):
    """Arguments for Scenario"""
    take: int
    skip: int
    order_by: Union['TrafficLightOrderByInput', List['TrafficLightOrderByInput']]
    where: 'TrafficLightWhereInput'
    cursor: 'TrafficLightWhereUniqueInput'
    distinct: List['TrafficLightScalarFieldKeys']
    include: 'TrafficLightIncludeFromTrafficLightRecursive1'


class FindManyTrafficLightArgsFromScenarioRecursive1(TypedDict, total=False):
    """Arguments for Scenario"""
    take: int
    skip: int
    order_by: Union['TrafficLightOrderByInput', List['TrafficLightOrderByInput']]
    where: 'TrafficLightWhereInput'
    cursor: 'TrafficLightWhereUniqueInput'
    distinct: List['TrafficLightScalarFieldKeys']
    include: 'TrafficLightIncludeFromTrafficLightRecursive2'


class FindManyTrafficLightArgsFromScenarioRecursive2(TypedDict, total=False):
    """Arguments for Scenario"""
    take: int
    skip: int
    order_by: Union['TrafficLightOrderByInput', List['TrafficLightOrderByInput']]
    where: 'TrafficLightWhereInput'
    cursor: 'TrafficLightWhereUniqueInput'
    distinct: List['TrafficLightScalarFieldKeys']
    include: 'TrafficLightIncludeFromTrafficLightRecursive3'


class FindManyTrafficLightArgsFromScenarioRecursive3(TypedDict, total=False):
    """Arguments for Scenario"""
    take: int
    skip: int
    order_by: Union['TrafficLightOrderByInput', List['TrafficLightOrderByInput']]
    where: 'TrafficLightWhereInput'
    cursor: 'TrafficLightWhereUniqueInput'
    distinct: List['TrafficLightScalarFieldKeys']
    include: 'TrafficLightIncludeFromTrafficLightRecursive4'


class FindManyTrafficLightArgsFromScenarioRecursive4(TypedDict, total=False):
    """Arguments for Scenario"""
    take: int
    skip: int
    order_by: Union['TrafficLightOrderByInput', List['TrafficLightOrderByInput']]
    where: 'TrafficLightWhereInput'
    cursor: 'TrafficLightWhereUniqueInput'
    distinct: List['TrafficLightScalarFieldKeys']
    


FindManyScenarioArgs = FindManyScenarioArgsFromScenario
FindFirstScenarioArgs = FindManyScenarioArgsFromScenario


    

class ScenarioWhereInput(TypedDict, total=False):
    """Scenario arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    name: Union[_str, 'types.StringFilter']
    description: Union[None, _str, 'types.StringFilter']
    impactAssessment: Union['fields.Json', 'types.JsonFilter']

    # should be noted that AND and NOT should be Union['ScenarioWhereInputRecursive1', List['ScenarioWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['ScenarioWhereInputRecursive1']
    OR: List['ScenarioWhereInputRecursive1']
    NOT: List['ScenarioWhereInputRecursive1']


class ScenarioWhereInputRecursive1(TypedDict, total=False):
    """Scenario arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    name: Union[_str, 'types.StringFilter']
    description: Union[None, _str, 'types.StringFilter']
    impactAssessment: Union['fields.Json', 'types.JsonFilter']

    # should be noted that AND and NOT should be Union['ScenarioWhereInputRecursive2', List['ScenarioWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['ScenarioWhereInputRecursive2']
    OR: List['ScenarioWhereInputRecursive2']
    NOT: List['ScenarioWhereInputRecursive2']


class ScenarioWhereInputRecursive2(TypedDict, total=False):
    """Scenario arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    name: Union[_str, 'types.StringFilter']
    description: Union[None, _str, 'types.StringFilter']
    impactAssessment: Union['fields.Json', 'types.JsonFilter']

    # should be noted that AND and NOT should be Union['ScenarioWhereInputRecursive3', List['ScenarioWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['ScenarioWhereInputRecursive3']
    OR: List['ScenarioWhereInputRecursive3']
    NOT: List['ScenarioWhereInputRecursive3']


class ScenarioWhereInputRecursive3(TypedDict, total=False):
    """Scenario arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    name: Union[_str, 'types.StringFilter']
    description: Union[None, _str, 'types.StringFilter']
    impactAssessment: Union['fields.Json', 'types.JsonFilter']

    # should be noted that AND and NOT should be Union['ScenarioWhereInputRecursive4', List['ScenarioWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['ScenarioWhereInputRecursive4']
    OR: List['ScenarioWhereInputRecursive4']
    NOT: List['ScenarioWhereInputRecursive4']


class ScenarioWhereInputRecursive4(TypedDict, total=False):
    """Scenario arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    name: Union[_str, 'types.StringFilter']
    description: Union[None, _str, 'types.StringFilter']
    impactAssessment: Union['fields.Json', 'types.JsonFilter']



# aggregate Scenario types


    

class ScenarioScalarWhereWithAggregatesInput(TypedDict, total=False):
    """Scenario arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']
    impactAssessment: Union['fields.Json', 'types.JsonWithAggregatesFilter']

    AND: List['ScenarioScalarWhereWithAggregatesInputRecursive1']
    OR: List['ScenarioScalarWhereWithAggregatesInputRecursive1']
    NOT: List['ScenarioScalarWhereWithAggregatesInputRecursive1']


class ScenarioScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """Scenario arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']
    impactAssessment: Union['fields.Json', 'types.JsonWithAggregatesFilter']

    AND: List['ScenarioScalarWhereWithAggregatesInputRecursive2']
    OR: List['ScenarioScalarWhereWithAggregatesInputRecursive2']
    NOT: List['ScenarioScalarWhereWithAggregatesInputRecursive2']


class ScenarioScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """Scenario arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']
    impactAssessment: Union['fields.Json', 'types.JsonWithAggregatesFilter']

    AND: List['ScenarioScalarWhereWithAggregatesInputRecursive3']
    OR: List['ScenarioScalarWhereWithAggregatesInputRecursive3']
    NOT: List['ScenarioScalarWhereWithAggregatesInputRecursive3']


class ScenarioScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """Scenario arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']
    impactAssessment: Union['fields.Json', 'types.JsonWithAggregatesFilter']

    AND: List['ScenarioScalarWhereWithAggregatesInputRecursive4']
    OR: List['ScenarioScalarWhereWithAggregatesInputRecursive4']
    NOT: List['ScenarioScalarWhereWithAggregatesInputRecursive4']


class ScenarioScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """Scenario arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']
    impactAssessment: Union['fields.Json', 'types.JsonWithAggregatesFilter']



class ScenarioGroupByOutput(TypedDict, total=False):
    id: _str
    name: _str
    description: _str
    impactAssessment: 'fields.Json'
    _sum: 'ScenarioSumAggregateOutput'
    _avg: 'ScenarioAvgAggregateOutput'
    _min: 'ScenarioMinAggregateOutput'
    _max: 'ScenarioMaxAggregateOutput'
    _count: 'ScenarioCountAggregateOutput'


class ScenarioAvgAggregateOutput(TypedDict, total=False):
    """Scenario output for aggregating averages"""


class ScenarioSumAggregateOutput(TypedDict, total=False):
    """Scenario output for aggregating sums"""


class ScenarioScalarAggregateOutput(TypedDict, total=False):
    """Scenario output including scalar fields"""
    id: _str
    name: _str
    description: _str
    impactAssessment: 'fields.Json'


ScenarioMinAggregateOutput = ScenarioScalarAggregateOutput
ScenarioMaxAggregateOutput = ScenarioScalarAggregateOutput


class ScenarioMaxAggregateInput(TypedDict, total=False):
    """Scenario input for aggregating by max"""
    id: bool
    name: bool
    description: bool
    impactAssessment: bool


class ScenarioMinAggregateInput(TypedDict, total=False):
    """Scenario input for aggregating by min"""
    id: bool
    name: bool
    description: bool
    impactAssessment: bool


class ScenarioNumberAggregateInput(TypedDict, total=False):
    """Scenario input for aggregating numbers"""


ScenarioAvgAggregateInput = ScenarioNumberAggregateInput
ScenarioSumAggregateInput = ScenarioNumberAggregateInput


ScenarioCountAggregateInput = TypedDict(
    'ScenarioCountAggregateInput',
    {
        'id': bool,
        'name': bool,
        'description': bool,
        'impactAssessment': bool,
        '_all': bool,
    },
    total=False,
)

ScenarioCountAggregateOutput = TypedDict(
    'ScenarioCountAggregateOutput',
    {
        'id': int,
        'name': int,
        'description': int,
        'impactAssessment': int,
        '_all': int,
    },
    total=False,
)


ScenarioKeys = Literal[
    'id',
    'name',
    'description',
    'impactAssessment',
]
ScenarioScalarFieldKeys = Literal[
    'id',
    'name',
    'description',
    'impactAssessment',
]
ScenarioScalarFieldKeysT = TypeVar('ScenarioScalarFieldKeysT', bound=ScenarioScalarFieldKeys)

ScenarioRelationalFieldKeys = _NoneType

# SocialReport types

class SocialReportOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the SocialReport create method"""
    id: _str


class SocialReportCreateInput(SocialReportOptionalCreateInput):
    """Required arguments to the SocialReport create method"""
    timestamp: datetime.datetime
    location: 'fields.Base64'
    content: _str
    source: _str


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class SocialReportOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the SocialReport create method, without relations"""
    id: _str


class SocialReportCreateWithoutRelationsInput(SocialReportOptionalCreateWithoutRelationsInput):
    """Required arguments to the SocialReport create method, without relations"""
    timestamp: datetime.datetime
    location: 'fields.Base64'
    content: _str
    source: _str

class SocialReportConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'SocialReportCreateWithoutRelationsInput'
    where: 'SocialReportWhereUniqueInput'

class SocialReportCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'SocialReportCreateWithoutRelationsInput'
    connect: 'SocialReportWhereUniqueInput'
    connect_or_create: 'SocialReportConnectOrCreateWithoutRelationsInput'


class SocialReportCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['SocialReportCreateWithoutRelationsInput', List['SocialReportCreateWithoutRelationsInput']]
    connect: Union['SocialReportWhereUniqueInput', List['SocialReportWhereUniqueInput']]
    connect_or_create: Union['SocialReportConnectOrCreateWithoutRelationsInput', List['SocialReportConnectOrCreateWithoutRelationsInput']]

_SocialReportWhereUnique_id_Input = TypedDict(
    '_SocialReportWhereUnique_id_Input',
    {
        'id': '_str',
    },
    total=True
)

SocialReportWhereUniqueInput = _SocialReportWhereUnique_id_Input


class SocialReportUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: _str
    timestamp: datetime.datetime
    location: 'fields.Base64'
    content: _str
    source: _str


class SocialReportUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: _str
    timestamp: datetime.datetime
    location: 'fields.Base64'
    content: _str
    source: _str


class SocialReportUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['SocialReportCreateWithoutRelationsInput']
    connect: List['SocialReportWhereUniqueInput']
    connect_or_create: List['SocialReportConnectOrCreateWithoutRelationsInput']
    set: List['SocialReportWhereUniqueInput']
    disconnect: List['SocialReportWhereUniqueInput']
    delete: List['SocialReportWhereUniqueInput']

    # TODO
    # update: List['SocialReportUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['SocialReportUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['SocialReportScalarWhereInput']
    # upsert: List['SocialReportUpserteWithWhereUniqueWithoutRelationsInput']


class SocialReportUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'SocialReportCreateWithoutRelationsInput'
    connect: 'SocialReportWhereUniqueInput'
    connect_or_create: 'SocialReportConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'SocialReportUpdateInput'
    # upsert: 'SocialReportUpsertWithoutRelationsInput'


class SocialReportUpsertInput(TypedDict):
    create: 'SocialReportCreateInput'
    update: 'SocialReportUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_SocialReport_id_OrderByInput = TypedDict(
    '_SocialReport_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_SocialReport_timestamp_OrderByInput = TypedDict(
    '_SocialReport_timestamp_OrderByInput',
    {
        'timestamp': 'SortOrder',
    },
    total=True
)

_SocialReport_location_OrderByInput = TypedDict(
    '_SocialReport_location_OrderByInput',
    {
        'location': 'SortOrder',
    },
    total=True
)

_SocialReport_content_OrderByInput = TypedDict(
    '_SocialReport_content_OrderByInput',
    {
        'content': 'SortOrder',
    },
    total=True
)

_SocialReport_source_OrderByInput = TypedDict(
    '_SocialReport_source_OrderByInput',
    {
        'source': 'SortOrder',
    },
    total=True
)

_SocialReport_RelevanceInner = TypedDict(
    '_SocialReport_RelevanceInner',
    {
        'fields': 'List[SocialReportScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_SocialReport_RelevanceOrderByInput = TypedDict(
    '_SocialReport_RelevanceOrderByInput',
    {
        '_relevance': '_SocialReport_RelevanceInner',
    },
    total=True
)

SocialReportOrderByInput = Union[
    '_SocialReport_id_OrderByInput',
    '_SocialReport_timestamp_OrderByInput',
    '_SocialReport_location_OrderByInput',
    '_SocialReport_content_OrderByInput',
    '_SocialReport_source_OrderByInput',
    '_SocialReport_RelevanceOrderByInput',
]



# recursive SocialReport types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

SocialReportRelationFilter = TypedDict(
    'SocialReportRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class SocialReportListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class SocialReportInclude(TypedDict, total=False):
    """SocialReport relational arguments"""


    

class AchievementIncludeFromSocialReport(TypedDict, total=False):
    """Relational arguments for SocialReport"""


class AchievementIncludeFromSocialReportRecursive1(TypedDict, total=False):
    """Relational arguments for SocialReport"""


class AchievementIncludeFromSocialReportRecursive2(TypedDict, total=False):
    """Relational arguments for SocialReport"""


class AchievementIncludeFromSocialReportRecursive3(TypedDict, total=False):
    """Relational arguments for SocialReport"""


class AchievementIncludeFromSocialReportRecursive4(TypedDict, total=False):
    """Relational arguments for SocialReport"""

    

class AchievementArgsFromSocialReport(TypedDict, total=False):
    """Arguments for SocialReport"""
    include: 'AchievementIncludeFromAchievementRecursive1'


class AchievementArgsFromSocialReportRecursive1(TypedDict, total=False):
    """Arguments for SocialReport"""
    include: 'AchievementIncludeFromAchievementRecursive2'


class AchievementArgsFromSocialReportRecursive2(TypedDict, total=False):
    """Arguments for SocialReport"""
    include: 'AchievementIncludeFromAchievementRecursive3'


class AchievementArgsFromSocialReportRecursive3(TypedDict, total=False):
    """Arguments for SocialReport"""
    include: 'AchievementIncludeFromAchievementRecursive4'


class AchievementArgsFromSocialReportRecursive4(TypedDict, total=False):
    """Arguments for SocialReport"""
    
    

class FindManyAchievementArgsFromSocialReport(TypedDict, total=False):
    """Arguments for SocialReport"""
    take: int
    skip: int
    order_by: Union['AchievementOrderByInput', List['AchievementOrderByInput']]
    where: 'AchievementWhereInput'
    cursor: 'AchievementWhereUniqueInput'
    distinct: List['AchievementScalarFieldKeys']
    include: 'AchievementIncludeFromAchievementRecursive1'


class FindManyAchievementArgsFromSocialReportRecursive1(TypedDict, total=False):
    """Arguments for SocialReport"""
    take: int
    skip: int
    order_by: Union['AchievementOrderByInput', List['AchievementOrderByInput']]
    where: 'AchievementWhereInput'
    cursor: 'AchievementWhereUniqueInput'
    distinct: List['AchievementScalarFieldKeys']
    include: 'AchievementIncludeFromAchievementRecursive2'


class FindManyAchievementArgsFromSocialReportRecursive2(TypedDict, total=False):
    """Arguments for SocialReport"""
    take: int
    skip: int
    order_by: Union['AchievementOrderByInput', List['AchievementOrderByInput']]
    where: 'AchievementWhereInput'
    cursor: 'AchievementWhereUniqueInput'
    distinct: List['AchievementScalarFieldKeys']
    include: 'AchievementIncludeFromAchievementRecursive3'


class FindManyAchievementArgsFromSocialReportRecursive3(TypedDict, total=False):
    """Arguments for SocialReport"""
    take: int
    skip: int
    order_by: Union['AchievementOrderByInput', List['AchievementOrderByInput']]
    where: 'AchievementWhereInput'
    cursor: 'AchievementWhereUniqueInput'
    distinct: List['AchievementScalarFieldKeys']
    include: 'AchievementIncludeFromAchievementRecursive4'


class FindManyAchievementArgsFromSocialReportRecursive4(TypedDict, total=False):
    """Arguments for SocialReport"""
    take: int
    skip: int
    order_by: Union['AchievementOrderByInput', List['AchievementOrderByInput']]
    where: 'AchievementWhereInput'
    cursor: 'AchievementWhereUniqueInput'
    distinct: List['AchievementScalarFieldKeys']
    
    

class CameraIncludeFromSocialReport(TypedDict, total=False):
    """Relational arguments for SocialReport"""


class CameraIncludeFromSocialReportRecursive1(TypedDict, total=False):
    """Relational arguments for SocialReport"""


class CameraIncludeFromSocialReportRecursive2(TypedDict, total=False):
    """Relational arguments for SocialReport"""


class CameraIncludeFromSocialReportRecursive3(TypedDict, total=False):
    """Relational arguments for SocialReport"""


class CameraIncludeFromSocialReportRecursive4(TypedDict, total=False):
    """Relational arguments for SocialReport"""

    

class CameraArgsFromSocialReport(TypedDict, total=False):
    """Arguments for SocialReport"""
    include: 'CameraIncludeFromCameraRecursive1'


class CameraArgsFromSocialReportRecursive1(TypedDict, total=False):
    """Arguments for SocialReport"""
    include: 'CameraIncludeFromCameraRecursive2'


class CameraArgsFromSocialReportRecursive2(TypedDict, total=False):
    """Arguments for SocialReport"""
    include: 'CameraIncludeFromCameraRecursive3'


class CameraArgsFromSocialReportRecursive3(TypedDict, total=False):
    """Arguments for SocialReport"""
    include: 'CameraIncludeFromCameraRecursive4'


class CameraArgsFromSocialReportRecursive4(TypedDict, total=False):
    """Arguments for SocialReport"""
    
    

class FindManyCameraArgsFromSocialReport(TypedDict, total=False):
    """Arguments for SocialReport"""
    take: int
    skip: int
    order_by: Union['CameraOrderByInput', List['CameraOrderByInput']]
    where: 'CameraWhereInput'
    cursor: 'CameraWhereUniqueInput'
    distinct: List['CameraScalarFieldKeys']
    include: 'CameraIncludeFromCameraRecursive1'


class FindManyCameraArgsFromSocialReportRecursive1(TypedDict, total=False):
    """Arguments for SocialReport"""
    take: int
    skip: int
    order_by: Union['CameraOrderByInput', List['CameraOrderByInput']]
    where: 'CameraWhereInput'
    cursor: 'CameraWhereUniqueInput'
    distinct: List['CameraScalarFieldKeys']
    include: 'CameraIncludeFromCameraRecursive2'


class FindManyCameraArgsFromSocialReportRecursive2(TypedDict, total=False):
    """Arguments for SocialReport"""
    take: int
    skip: int
    order_by: Union['CameraOrderByInput', List['CameraOrderByInput']]
    where: 'CameraWhereInput'
    cursor: 'CameraWhereUniqueInput'
    distinct: List['CameraScalarFieldKeys']
    include: 'CameraIncludeFromCameraRecursive3'


class FindManyCameraArgsFromSocialReportRecursive3(TypedDict, total=False):
    """Arguments for SocialReport"""
    take: int
    skip: int
    order_by: Union['CameraOrderByInput', List['CameraOrderByInput']]
    where: 'CameraWhereInput'
    cursor: 'CameraWhereUniqueInput'
    distinct: List['CameraScalarFieldKeys']
    include: 'CameraIncludeFromCameraRecursive4'


class FindManyCameraArgsFromSocialReportRecursive4(TypedDict, total=False):
    """Arguments for SocialReport"""
    take: int
    skip: int
    order_by: Union['CameraOrderByInput', List['CameraOrderByInput']]
    where: 'CameraWhereInput'
    cursor: 'CameraWhereUniqueInput'
    distinct: List['CameraScalarFieldKeys']
    
    

class EffectivenessIncludeFromSocialReport(TypedDict, total=False):
    """Relational arguments for SocialReport"""


class EffectivenessIncludeFromSocialReportRecursive1(TypedDict, total=False):
    """Relational arguments for SocialReport"""


class EffectivenessIncludeFromSocialReportRecursive2(TypedDict, total=False):
    """Relational arguments for SocialReport"""


class EffectivenessIncludeFromSocialReportRecursive3(TypedDict, total=False):
    """Relational arguments for SocialReport"""


class EffectivenessIncludeFromSocialReportRecursive4(TypedDict, total=False):
    """Relational arguments for SocialReport"""

    

class EffectivenessArgsFromSocialReport(TypedDict, total=False):
    """Arguments for SocialReport"""
    include: 'EffectivenessIncludeFromEffectivenessRecursive1'


class EffectivenessArgsFromSocialReportRecursive1(TypedDict, total=False):
    """Arguments for SocialReport"""
    include: 'EffectivenessIncludeFromEffectivenessRecursive2'


class EffectivenessArgsFromSocialReportRecursive2(TypedDict, total=False):
    """Arguments for SocialReport"""
    include: 'EffectivenessIncludeFromEffectivenessRecursive3'


class EffectivenessArgsFromSocialReportRecursive3(TypedDict, total=False):
    """Arguments for SocialReport"""
    include: 'EffectivenessIncludeFromEffectivenessRecursive4'


class EffectivenessArgsFromSocialReportRecursive4(TypedDict, total=False):
    """Arguments for SocialReport"""
    
    

class FindManyEffectivenessArgsFromSocialReport(TypedDict, total=False):
    """Arguments for SocialReport"""
    take: int
    skip: int
    order_by: Union['EffectivenessOrderByInput', List['EffectivenessOrderByInput']]
    where: 'EffectivenessWhereInput'
    cursor: 'EffectivenessWhereUniqueInput'
    distinct: List['EffectivenessScalarFieldKeys']
    include: 'EffectivenessIncludeFromEffectivenessRecursive1'


class FindManyEffectivenessArgsFromSocialReportRecursive1(TypedDict, total=False):
    """Arguments for SocialReport"""
    take: int
    skip: int
    order_by: Union['EffectivenessOrderByInput', List['EffectivenessOrderByInput']]
    where: 'EffectivenessWhereInput'
    cursor: 'EffectivenessWhereUniqueInput'
    distinct: List['EffectivenessScalarFieldKeys']
    include: 'EffectivenessIncludeFromEffectivenessRecursive2'


class FindManyEffectivenessArgsFromSocialReportRecursive2(TypedDict, total=False):
    """Arguments for SocialReport"""
    take: int
    skip: int
    order_by: Union['EffectivenessOrderByInput', List['EffectivenessOrderByInput']]
    where: 'EffectivenessWhereInput'
    cursor: 'EffectivenessWhereUniqueInput'
    distinct: List['EffectivenessScalarFieldKeys']
    include: 'EffectivenessIncludeFromEffectivenessRecursive3'


class FindManyEffectivenessArgsFromSocialReportRecursive3(TypedDict, total=False):
    """Arguments for SocialReport"""
    take: int
    skip: int
    order_by: Union['EffectivenessOrderByInput', List['EffectivenessOrderByInput']]
    where: 'EffectivenessWhereInput'
    cursor: 'EffectivenessWhereUniqueInput'
    distinct: List['EffectivenessScalarFieldKeys']
    include: 'EffectivenessIncludeFromEffectivenessRecursive4'


class FindManyEffectivenessArgsFromSocialReportRecursive4(TypedDict, total=False):
    """Arguments for SocialReport"""
    take: int
    skip: int
    order_by: Union['EffectivenessOrderByInput', List['EffectivenessOrderByInput']]
    where: 'EffectivenessWhereInput'
    cursor: 'EffectivenessWhereUniqueInput'
    distinct: List['EffectivenessScalarFieldKeys']
    
    

class EnvironmentalDataIncludeFromSocialReport(TypedDict, total=False):
    """Relational arguments for SocialReport"""


class EnvironmentalDataIncludeFromSocialReportRecursive1(TypedDict, total=False):
    """Relational arguments for SocialReport"""


class EnvironmentalDataIncludeFromSocialReportRecursive2(TypedDict, total=False):
    """Relational arguments for SocialReport"""


class EnvironmentalDataIncludeFromSocialReportRecursive3(TypedDict, total=False):
    """Relational arguments for SocialReport"""


class EnvironmentalDataIncludeFromSocialReportRecursive4(TypedDict, total=False):
    """Relational arguments for SocialReport"""

    

class EnvironmentalDataArgsFromSocialReport(TypedDict, total=False):
    """Arguments for SocialReport"""
    include: 'EnvironmentalDataIncludeFromEnvironmentalDataRecursive1'


class EnvironmentalDataArgsFromSocialReportRecursive1(TypedDict, total=False):
    """Arguments for SocialReport"""
    include: 'EnvironmentalDataIncludeFromEnvironmentalDataRecursive2'


class EnvironmentalDataArgsFromSocialReportRecursive2(TypedDict, total=False):
    """Arguments for SocialReport"""
    include: 'EnvironmentalDataIncludeFromEnvironmentalDataRecursive3'


class EnvironmentalDataArgsFromSocialReportRecursive3(TypedDict, total=False):
    """Arguments for SocialReport"""
    include: 'EnvironmentalDataIncludeFromEnvironmentalDataRecursive4'


class EnvironmentalDataArgsFromSocialReportRecursive4(TypedDict, total=False):
    """Arguments for SocialReport"""
    
    

class FindManyEnvironmentalDataArgsFromSocialReport(TypedDict, total=False):
    """Arguments for SocialReport"""
    take: int
    skip: int
    order_by: Union['EnvironmentalDataOrderByInput', List['EnvironmentalDataOrderByInput']]
    where: 'EnvironmentalDataWhereInput'
    cursor: 'EnvironmentalDataWhereUniqueInput'
    distinct: List['EnvironmentalDataScalarFieldKeys']
    include: 'EnvironmentalDataIncludeFromEnvironmentalDataRecursive1'


class FindManyEnvironmentalDataArgsFromSocialReportRecursive1(TypedDict, total=False):
    """Arguments for SocialReport"""
    take: int
    skip: int
    order_by: Union['EnvironmentalDataOrderByInput', List['EnvironmentalDataOrderByInput']]
    where: 'EnvironmentalDataWhereInput'
    cursor: 'EnvironmentalDataWhereUniqueInput'
    distinct: List['EnvironmentalDataScalarFieldKeys']
    include: 'EnvironmentalDataIncludeFromEnvironmentalDataRecursive2'


class FindManyEnvironmentalDataArgsFromSocialReportRecursive2(TypedDict, total=False):
    """Arguments for SocialReport"""
    take: int
    skip: int
    order_by: Union['EnvironmentalDataOrderByInput', List['EnvironmentalDataOrderByInput']]
    where: 'EnvironmentalDataWhereInput'
    cursor: 'EnvironmentalDataWhereUniqueInput'
    distinct: List['EnvironmentalDataScalarFieldKeys']
    include: 'EnvironmentalDataIncludeFromEnvironmentalDataRecursive3'


class FindManyEnvironmentalDataArgsFromSocialReportRecursive3(TypedDict, total=False):
    """Arguments for SocialReport"""
    take: int
    skip: int
    order_by: Union['EnvironmentalDataOrderByInput', List['EnvironmentalDataOrderByInput']]
    where: 'EnvironmentalDataWhereInput'
    cursor: 'EnvironmentalDataWhereUniqueInput'
    distinct: List['EnvironmentalDataScalarFieldKeys']
    include: 'EnvironmentalDataIncludeFromEnvironmentalDataRecursive4'


class FindManyEnvironmentalDataArgsFromSocialReportRecursive4(TypedDict, total=False):
    """Arguments for SocialReport"""
    take: int
    skip: int
    order_by: Union['EnvironmentalDataOrderByInput', List['EnvironmentalDataOrderByInput']]
    where: 'EnvironmentalDataWhereInput'
    cursor: 'EnvironmentalDataWhereUniqueInput'
    distinct: List['EnvironmentalDataScalarFieldKeys']
    
    

class EventIncludeFromSocialReport(TypedDict, total=False):
    """Relational arguments for SocialReport"""


class EventIncludeFromSocialReportRecursive1(TypedDict, total=False):
    """Relational arguments for SocialReport"""


class EventIncludeFromSocialReportRecursive2(TypedDict, total=False):
    """Relational arguments for SocialReport"""


class EventIncludeFromSocialReportRecursive3(TypedDict, total=False):
    """Relational arguments for SocialReport"""


class EventIncludeFromSocialReportRecursive4(TypedDict, total=False):
    """Relational arguments for SocialReport"""

    

class EventArgsFromSocialReport(TypedDict, total=False):
    """Arguments for SocialReport"""
    include: 'EventIncludeFromEventRecursive1'


class EventArgsFromSocialReportRecursive1(TypedDict, total=False):
    """Arguments for SocialReport"""
    include: 'EventIncludeFromEventRecursive2'


class EventArgsFromSocialReportRecursive2(TypedDict, total=False):
    """Arguments for SocialReport"""
    include: 'EventIncludeFromEventRecursive3'


class EventArgsFromSocialReportRecursive3(TypedDict, total=False):
    """Arguments for SocialReport"""
    include: 'EventIncludeFromEventRecursive4'


class EventArgsFromSocialReportRecursive4(TypedDict, total=False):
    """Arguments for SocialReport"""
    
    

class FindManyEventArgsFromSocialReport(TypedDict, total=False):
    """Arguments for SocialReport"""
    take: int
    skip: int
    order_by: Union['EventOrderByInput', List['EventOrderByInput']]
    where: 'EventWhereInput'
    cursor: 'EventWhereUniqueInput'
    distinct: List['EventScalarFieldKeys']
    include: 'EventIncludeFromEventRecursive1'


class FindManyEventArgsFromSocialReportRecursive1(TypedDict, total=False):
    """Arguments for SocialReport"""
    take: int
    skip: int
    order_by: Union['EventOrderByInput', List['EventOrderByInput']]
    where: 'EventWhereInput'
    cursor: 'EventWhereUniqueInput'
    distinct: List['EventScalarFieldKeys']
    include: 'EventIncludeFromEventRecursive2'


class FindManyEventArgsFromSocialReportRecursive2(TypedDict, total=False):
    """Arguments for SocialReport"""
    take: int
    skip: int
    order_by: Union['EventOrderByInput', List['EventOrderByInput']]
    where: 'EventWhereInput'
    cursor: 'EventWhereUniqueInput'
    distinct: List['EventScalarFieldKeys']
    include: 'EventIncludeFromEventRecursive3'


class FindManyEventArgsFromSocialReportRecursive3(TypedDict, total=False):
    """Arguments for SocialReport"""
    take: int
    skip: int
    order_by: Union['EventOrderByInput', List['EventOrderByInput']]
    where: 'EventWhereInput'
    cursor: 'EventWhereUniqueInput'
    distinct: List['EventScalarFieldKeys']
    include: 'EventIncludeFromEventRecursive4'


class FindManyEventArgsFromSocialReportRecursive4(TypedDict, total=False):
    """Arguments for SocialReport"""
    take: int
    skip: int
    order_by: Union['EventOrderByInput', List['EventOrderByInput']]
    where: 'EventWhereInput'
    cursor: 'EventWhereUniqueInput'
    distinct: List['EventScalarFieldKeys']
    
    

class ForecastIncludeFromSocialReport(TypedDict, total=False):
    """Relational arguments for SocialReport"""


class ForecastIncludeFromSocialReportRecursive1(TypedDict, total=False):
    """Relational arguments for SocialReport"""


class ForecastIncludeFromSocialReportRecursive2(TypedDict, total=False):
    """Relational arguments for SocialReport"""


class ForecastIncludeFromSocialReportRecursive3(TypedDict, total=False):
    """Relational arguments for SocialReport"""


class ForecastIncludeFromSocialReportRecursive4(TypedDict, total=False):
    """Relational arguments for SocialReport"""

    

class ForecastArgsFromSocialReport(TypedDict, total=False):
    """Arguments for SocialReport"""
    include: 'ForecastIncludeFromForecastRecursive1'


class ForecastArgsFromSocialReportRecursive1(TypedDict, total=False):
    """Arguments for SocialReport"""
    include: 'ForecastIncludeFromForecastRecursive2'


class ForecastArgsFromSocialReportRecursive2(TypedDict, total=False):
    """Arguments for SocialReport"""
    include: 'ForecastIncludeFromForecastRecursive3'


class ForecastArgsFromSocialReportRecursive3(TypedDict, total=False):
    """Arguments for SocialReport"""
    include: 'ForecastIncludeFromForecastRecursive4'


class ForecastArgsFromSocialReportRecursive4(TypedDict, total=False):
    """Arguments for SocialReport"""
    
    

class FindManyForecastArgsFromSocialReport(TypedDict, total=False):
    """Arguments for SocialReport"""
    take: int
    skip: int
    order_by: Union['ForecastOrderByInput', List['ForecastOrderByInput']]
    where: 'ForecastWhereInput'
    cursor: 'ForecastWhereUniqueInput'
    distinct: List['ForecastScalarFieldKeys']
    include: 'ForecastIncludeFromForecastRecursive1'


class FindManyForecastArgsFromSocialReportRecursive1(TypedDict, total=False):
    """Arguments for SocialReport"""
    take: int
    skip: int
    order_by: Union['ForecastOrderByInput', List['ForecastOrderByInput']]
    where: 'ForecastWhereInput'
    cursor: 'ForecastWhereUniqueInput'
    distinct: List['ForecastScalarFieldKeys']
    include: 'ForecastIncludeFromForecastRecursive2'


class FindManyForecastArgsFromSocialReportRecursive2(TypedDict, total=False):
    """Arguments for SocialReport"""
    take: int
    skip: int
    order_by: Union['ForecastOrderByInput', List['ForecastOrderByInput']]
    where: 'ForecastWhereInput'
    cursor: 'ForecastWhereUniqueInput'
    distinct: List['ForecastScalarFieldKeys']
    include: 'ForecastIncludeFromForecastRecursive3'


class FindManyForecastArgsFromSocialReportRecursive3(TypedDict, total=False):
    """Arguments for SocialReport"""
    take: int
    skip: int
    order_by: Union['ForecastOrderByInput', List['ForecastOrderByInput']]
    where: 'ForecastWhereInput'
    cursor: 'ForecastWhereUniqueInput'
    distinct: List['ForecastScalarFieldKeys']
    include: 'ForecastIncludeFromForecastRecursive4'


class FindManyForecastArgsFromSocialReportRecursive4(TypedDict, total=False):
    """Arguments for SocialReport"""
    take: int
    skip: int
    order_by: Union['ForecastOrderByInput', List['ForecastOrderByInput']]
    where: 'ForecastWhereInput'
    cursor: 'ForecastWhereUniqueInput'
    distinct: List['ForecastScalarFieldKeys']
    
    

class IncidentIncludeFromSocialReport(TypedDict, total=False):
    """Relational arguments for SocialReport"""


class IncidentIncludeFromSocialReportRecursive1(TypedDict, total=False):
    """Relational arguments for SocialReport"""


class IncidentIncludeFromSocialReportRecursive2(TypedDict, total=False):
    """Relational arguments for SocialReport"""


class IncidentIncludeFromSocialReportRecursive3(TypedDict, total=False):
    """Relational arguments for SocialReport"""


class IncidentIncludeFromSocialReportRecursive4(TypedDict, total=False):
    """Relational arguments for SocialReport"""

    

class IncidentArgsFromSocialReport(TypedDict, total=False):
    """Arguments for SocialReport"""
    include: 'IncidentIncludeFromIncidentRecursive1'


class IncidentArgsFromSocialReportRecursive1(TypedDict, total=False):
    """Arguments for SocialReport"""
    include: 'IncidentIncludeFromIncidentRecursive2'


class IncidentArgsFromSocialReportRecursive2(TypedDict, total=False):
    """Arguments for SocialReport"""
    include: 'IncidentIncludeFromIncidentRecursive3'


class IncidentArgsFromSocialReportRecursive3(TypedDict, total=False):
    """Arguments for SocialReport"""
    include: 'IncidentIncludeFromIncidentRecursive4'


class IncidentArgsFromSocialReportRecursive4(TypedDict, total=False):
    """Arguments for SocialReport"""
    
    

class FindManyIncidentArgsFromSocialReport(TypedDict, total=False):
    """Arguments for SocialReport"""
    take: int
    skip: int
    order_by: Union['IncidentOrderByInput', List['IncidentOrderByInput']]
    where: 'IncidentWhereInput'
    cursor: 'IncidentWhereUniqueInput'
    distinct: List['IncidentScalarFieldKeys']
    include: 'IncidentIncludeFromIncidentRecursive1'


class FindManyIncidentArgsFromSocialReportRecursive1(TypedDict, total=False):
    """Arguments for SocialReport"""
    take: int
    skip: int
    order_by: Union['IncidentOrderByInput', List['IncidentOrderByInput']]
    where: 'IncidentWhereInput'
    cursor: 'IncidentWhereUniqueInput'
    distinct: List['IncidentScalarFieldKeys']
    include: 'IncidentIncludeFromIncidentRecursive2'


class FindManyIncidentArgsFromSocialReportRecursive2(TypedDict, total=False):
    """Arguments for SocialReport"""
    take: int
    skip: int
    order_by: Union['IncidentOrderByInput', List['IncidentOrderByInput']]
    where: 'IncidentWhereInput'
    cursor: 'IncidentWhereUniqueInput'
    distinct: List['IncidentScalarFieldKeys']
    include: 'IncidentIncludeFromIncidentRecursive3'


class FindManyIncidentArgsFromSocialReportRecursive3(TypedDict, total=False):
    """Arguments for SocialReport"""
    take: int
    skip: int
    order_by: Union['IncidentOrderByInput', List['IncidentOrderByInput']]
    where: 'IncidentWhereInput'
    cursor: 'IncidentWhereUniqueInput'
    distinct: List['IncidentScalarFieldKeys']
    include: 'IncidentIncludeFromIncidentRecursive4'


class FindManyIncidentArgsFromSocialReportRecursive4(TypedDict, total=False):
    """Arguments for SocialReport"""
    take: int
    skip: int
    order_by: Union['IncidentOrderByInput', List['IncidentOrderByInput']]
    where: 'IncidentWhereInput'
    cursor: 'IncidentWhereUniqueInput'
    distinct: List['IncidentScalarFieldKeys']
    
    

class NotificationIncludeFromSocialReport(TypedDict, total=False):
    """Relational arguments for SocialReport"""


class NotificationIncludeFromSocialReportRecursive1(TypedDict, total=False):
    """Relational arguments for SocialReport"""


class NotificationIncludeFromSocialReportRecursive2(TypedDict, total=False):
    """Relational arguments for SocialReport"""


class NotificationIncludeFromSocialReportRecursive3(TypedDict, total=False):
    """Relational arguments for SocialReport"""


class NotificationIncludeFromSocialReportRecursive4(TypedDict, total=False):
    """Relational arguments for SocialReport"""

    

class NotificationArgsFromSocialReport(TypedDict, total=False):
    """Arguments for SocialReport"""
    include: 'NotificationIncludeFromNotificationRecursive1'


class NotificationArgsFromSocialReportRecursive1(TypedDict, total=False):
    """Arguments for SocialReport"""
    include: 'NotificationIncludeFromNotificationRecursive2'


class NotificationArgsFromSocialReportRecursive2(TypedDict, total=False):
    """Arguments for SocialReport"""
    include: 'NotificationIncludeFromNotificationRecursive3'


class NotificationArgsFromSocialReportRecursive3(TypedDict, total=False):
    """Arguments for SocialReport"""
    include: 'NotificationIncludeFromNotificationRecursive4'


class NotificationArgsFromSocialReportRecursive4(TypedDict, total=False):
    """Arguments for SocialReport"""
    
    

class FindManyNotificationArgsFromSocialReport(TypedDict, total=False):
    """Arguments for SocialReport"""
    take: int
    skip: int
    order_by: Union['NotificationOrderByInput', List['NotificationOrderByInput']]
    where: 'NotificationWhereInput'
    cursor: 'NotificationWhereUniqueInput'
    distinct: List['NotificationScalarFieldKeys']
    include: 'NotificationIncludeFromNotificationRecursive1'


class FindManyNotificationArgsFromSocialReportRecursive1(TypedDict, total=False):
    """Arguments for SocialReport"""
    take: int
    skip: int
    order_by: Union['NotificationOrderByInput', List['NotificationOrderByInput']]
    where: 'NotificationWhereInput'
    cursor: 'NotificationWhereUniqueInput'
    distinct: List['NotificationScalarFieldKeys']
    include: 'NotificationIncludeFromNotificationRecursive2'


class FindManyNotificationArgsFromSocialReportRecursive2(TypedDict, total=False):
    """Arguments for SocialReport"""
    take: int
    skip: int
    order_by: Union['NotificationOrderByInput', List['NotificationOrderByInput']]
    where: 'NotificationWhereInput'
    cursor: 'NotificationWhereUniqueInput'
    distinct: List['NotificationScalarFieldKeys']
    include: 'NotificationIncludeFromNotificationRecursive3'


class FindManyNotificationArgsFromSocialReportRecursive3(TypedDict, total=False):
    """Arguments for SocialReport"""
    take: int
    skip: int
    order_by: Union['NotificationOrderByInput', List['NotificationOrderByInput']]
    where: 'NotificationWhereInput'
    cursor: 'NotificationWhereUniqueInput'
    distinct: List['NotificationScalarFieldKeys']
    include: 'NotificationIncludeFromNotificationRecursive4'


class FindManyNotificationArgsFromSocialReportRecursive4(TypedDict, total=False):
    """Arguments for SocialReport"""
    take: int
    skip: int
    order_by: Union['NotificationOrderByInput', List['NotificationOrderByInput']]
    where: 'NotificationWhereInput'
    cursor: 'NotificationWhereUniqueInput'
    distinct: List['NotificationScalarFieldKeys']
    
    

class ScenarioIncludeFromSocialReport(TypedDict, total=False):
    """Relational arguments for SocialReport"""


class ScenarioIncludeFromSocialReportRecursive1(TypedDict, total=False):
    """Relational arguments for SocialReport"""


class ScenarioIncludeFromSocialReportRecursive2(TypedDict, total=False):
    """Relational arguments for SocialReport"""


class ScenarioIncludeFromSocialReportRecursive3(TypedDict, total=False):
    """Relational arguments for SocialReport"""


class ScenarioIncludeFromSocialReportRecursive4(TypedDict, total=False):
    """Relational arguments for SocialReport"""

    

class ScenarioArgsFromSocialReport(TypedDict, total=False):
    """Arguments for SocialReport"""
    include: 'ScenarioIncludeFromScenarioRecursive1'


class ScenarioArgsFromSocialReportRecursive1(TypedDict, total=False):
    """Arguments for SocialReport"""
    include: 'ScenarioIncludeFromScenarioRecursive2'


class ScenarioArgsFromSocialReportRecursive2(TypedDict, total=False):
    """Arguments for SocialReport"""
    include: 'ScenarioIncludeFromScenarioRecursive3'


class ScenarioArgsFromSocialReportRecursive3(TypedDict, total=False):
    """Arguments for SocialReport"""
    include: 'ScenarioIncludeFromScenarioRecursive4'


class ScenarioArgsFromSocialReportRecursive4(TypedDict, total=False):
    """Arguments for SocialReport"""
    
    

class FindManyScenarioArgsFromSocialReport(TypedDict, total=False):
    """Arguments for SocialReport"""
    take: int
    skip: int
    order_by: Union['ScenarioOrderByInput', List['ScenarioOrderByInput']]
    where: 'ScenarioWhereInput'
    cursor: 'ScenarioWhereUniqueInput'
    distinct: List['ScenarioScalarFieldKeys']
    include: 'ScenarioIncludeFromScenarioRecursive1'


class FindManyScenarioArgsFromSocialReportRecursive1(TypedDict, total=False):
    """Arguments for SocialReport"""
    take: int
    skip: int
    order_by: Union['ScenarioOrderByInput', List['ScenarioOrderByInput']]
    where: 'ScenarioWhereInput'
    cursor: 'ScenarioWhereUniqueInput'
    distinct: List['ScenarioScalarFieldKeys']
    include: 'ScenarioIncludeFromScenarioRecursive2'


class FindManyScenarioArgsFromSocialReportRecursive2(TypedDict, total=False):
    """Arguments for SocialReport"""
    take: int
    skip: int
    order_by: Union['ScenarioOrderByInput', List['ScenarioOrderByInput']]
    where: 'ScenarioWhereInput'
    cursor: 'ScenarioWhereUniqueInput'
    distinct: List['ScenarioScalarFieldKeys']
    include: 'ScenarioIncludeFromScenarioRecursive3'


class FindManyScenarioArgsFromSocialReportRecursive3(TypedDict, total=False):
    """Arguments for SocialReport"""
    take: int
    skip: int
    order_by: Union['ScenarioOrderByInput', List['ScenarioOrderByInput']]
    where: 'ScenarioWhereInput'
    cursor: 'ScenarioWhereUniqueInput'
    distinct: List['ScenarioScalarFieldKeys']
    include: 'ScenarioIncludeFromScenarioRecursive4'


class FindManyScenarioArgsFromSocialReportRecursive4(TypedDict, total=False):
    """Arguments for SocialReport"""
    take: int
    skip: int
    order_by: Union['ScenarioOrderByInput', List['ScenarioOrderByInput']]
    where: 'ScenarioWhereInput'
    cursor: 'ScenarioWhereUniqueInput'
    distinct: List['ScenarioScalarFieldKeys']
    
    

class SocialReportIncludeFromSocialReport(TypedDict, total=False):
    """Relational arguments for SocialReport"""


class SocialReportIncludeFromSocialReportRecursive1(TypedDict, total=False):
    """Relational arguments for SocialReport"""


class SocialReportIncludeFromSocialReportRecursive2(TypedDict, total=False):
    """Relational arguments for SocialReport"""


class SocialReportIncludeFromSocialReportRecursive3(TypedDict, total=False):
    """Relational arguments for SocialReport"""


class SocialReportIncludeFromSocialReportRecursive4(TypedDict, total=False):
    """Relational arguments for SocialReport"""

    

class SocialReportArgsFromSocialReport(TypedDict, total=False):
    """Arguments for SocialReport"""
    include: 'SocialReportIncludeFromSocialReportRecursive1'


class SocialReportArgsFromSocialReportRecursive1(TypedDict, total=False):
    """Arguments for SocialReport"""
    include: 'SocialReportIncludeFromSocialReportRecursive2'


class SocialReportArgsFromSocialReportRecursive2(TypedDict, total=False):
    """Arguments for SocialReport"""
    include: 'SocialReportIncludeFromSocialReportRecursive3'


class SocialReportArgsFromSocialReportRecursive3(TypedDict, total=False):
    """Arguments for SocialReport"""
    include: 'SocialReportIncludeFromSocialReportRecursive4'


class SocialReportArgsFromSocialReportRecursive4(TypedDict, total=False):
    """Arguments for SocialReport"""
    
    

class FindManySocialReportArgsFromSocialReport(TypedDict, total=False):
    """Arguments for SocialReport"""
    take: int
    skip: int
    order_by: Union['SocialReportOrderByInput', List['SocialReportOrderByInput']]
    where: 'SocialReportWhereInput'
    cursor: 'SocialReportWhereUniqueInput'
    distinct: List['SocialReportScalarFieldKeys']
    include: 'SocialReportIncludeFromSocialReportRecursive1'


class FindManySocialReportArgsFromSocialReportRecursive1(TypedDict, total=False):
    """Arguments for SocialReport"""
    take: int
    skip: int
    order_by: Union['SocialReportOrderByInput', List['SocialReportOrderByInput']]
    where: 'SocialReportWhereInput'
    cursor: 'SocialReportWhereUniqueInput'
    distinct: List['SocialReportScalarFieldKeys']
    include: 'SocialReportIncludeFromSocialReportRecursive2'


class FindManySocialReportArgsFromSocialReportRecursive2(TypedDict, total=False):
    """Arguments for SocialReport"""
    take: int
    skip: int
    order_by: Union['SocialReportOrderByInput', List['SocialReportOrderByInput']]
    where: 'SocialReportWhereInput'
    cursor: 'SocialReportWhereUniqueInput'
    distinct: List['SocialReportScalarFieldKeys']
    include: 'SocialReportIncludeFromSocialReportRecursive3'


class FindManySocialReportArgsFromSocialReportRecursive3(TypedDict, total=False):
    """Arguments for SocialReport"""
    take: int
    skip: int
    order_by: Union['SocialReportOrderByInput', List['SocialReportOrderByInput']]
    where: 'SocialReportWhereInput'
    cursor: 'SocialReportWhereUniqueInput'
    distinct: List['SocialReportScalarFieldKeys']
    include: 'SocialReportIncludeFromSocialReportRecursive4'


class FindManySocialReportArgsFromSocialReportRecursive4(TypedDict, total=False):
    """Arguments for SocialReport"""
    take: int
    skip: int
    order_by: Union['SocialReportOrderByInput', List['SocialReportOrderByInput']]
    where: 'SocialReportWhereInput'
    cursor: 'SocialReportWhereUniqueInput'
    distinct: List['SocialReportScalarFieldKeys']
    
    

class TrafficDataIncludeFromSocialReport(TypedDict, total=False):
    """Relational arguments for SocialReport"""


class TrafficDataIncludeFromSocialReportRecursive1(TypedDict, total=False):
    """Relational arguments for SocialReport"""


class TrafficDataIncludeFromSocialReportRecursive2(TypedDict, total=False):
    """Relational arguments for SocialReport"""


class TrafficDataIncludeFromSocialReportRecursive3(TypedDict, total=False):
    """Relational arguments for SocialReport"""


class TrafficDataIncludeFromSocialReportRecursive4(TypedDict, total=False):
    """Relational arguments for SocialReport"""

    

class TrafficDataArgsFromSocialReport(TypedDict, total=False):
    """Arguments for SocialReport"""
    include: 'TrafficDataIncludeFromTrafficDataRecursive1'


class TrafficDataArgsFromSocialReportRecursive1(TypedDict, total=False):
    """Arguments for SocialReport"""
    include: 'TrafficDataIncludeFromTrafficDataRecursive2'


class TrafficDataArgsFromSocialReportRecursive2(TypedDict, total=False):
    """Arguments for SocialReport"""
    include: 'TrafficDataIncludeFromTrafficDataRecursive3'


class TrafficDataArgsFromSocialReportRecursive3(TypedDict, total=False):
    """Arguments for SocialReport"""
    include: 'TrafficDataIncludeFromTrafficDataRecursive4'


class TrafficDataArgsFromSocialReportRecursive4(TypedDict, total=False):
    """Arguments for SocialReport"""
    
    

class FindManyTrafficDataArgsFromSocialReport(TypedDict, total=False):
    """Arguments for SocialReport"""
    take: int
    skip: int
    order_by: Union['TrafficDataOrderByInput', List['TrafficDataOrderByInput']]
    where: 'TrafficDataWhereInput'
    cursor: 'TrafficDataWhereUniqueInput'
    distinct: List['TrafficDataScalarFieldKeys']
    include: 'TrafficDataIncludeFromTrafficDataRecursive1'


class FindManyTrafficDataArgsFromSocialReportRecursive1(TypedDict, total=False):
    """Arguments for SocialReport"""
    take: int
    skip: int
    order_by: Union['TrafficDataOrderByInput', List['TrafficDataOrderByInput']]
    where: 'TrafficDataWhereInput'
    cursor: 'TrafficDataWhereUniqueInput'
    distinct: List['TrafficDataScalarFieldKeys']
    include: 'TrafficDataIncludeFromTrafficDataRecursive2'


class FindManyTrafficDataArgsFromSocialReportRecursive2(TypedDict, total=False):
    """Arguments for SocialReport"""
    take: int
    skip: int
    order_by: Union['TrafficDataOrderByInput', List['TrafficDataOrderByInput']]
    where: 'TrafficDataWhereInput'
    cursor: 'TrafficDataWhereUniqueInput'
    distinct: List['TrafficDataScalarFieldKeys']
    include: 'TrafficDataIncludeFromTrafficDataRecursive3'


class FindManyTrafficDataArgsFromSocialReportRecursive3(TypedDict, total=False):
    """Arguments for SocialReport"""
    take: int
    skip: int
    order_by: Union['TrafficDataOrderByInput', List['TrafficDataOrderByInput']]
    where: 'TrafficDataWhereInput'
    cursor: 'TrafficDataWhereUniqueInput'
    distinct: List['TrafficDataScalarFieldKeys']
    include: 'TrafficDataIncludeFromTrafficDataRecursive4'


class FindManyTrafficDataArgsFromSocialReportRecursive4(TypedDict, total=False):
    """Arguments for SocialReport"""
    take: int
    skip: int
    order_by: Union['TrafficDataOrderByInput', List['TrafficDataOrderByInput']]
    where: 'TrafficDataWhereInput'
    cursor: 'TrafficDataWhereUniqueInput'
    distinct: List['TrafficDataScalarFieldKeys']
    
    

class TrafficLightIncludeFromSocialReport(TypedDict, total=False):
    """Relational arguments for SocialReport"""


class TrafficLightIncludeFromSocialReportRecursive1(TypedDict, total=False):
    """Relational arguments for SocialReport"""


class TrafficLightIncludeFromSocialReportRecursive2(TypedDict, total=False):
    """Relational arguments for SocialReport"""


class TrafficLightIncludeFromSocialReportRecursive3(TypedDict, total=False):
    """Relational arguments for SocialReport"""


class TrafficLightIncludeFromSocialReportRecursive4(TypedDict, total=False):
    """Relational arguments for SocialReport"""

    

class TrafficLightArgsFromSocialReport(TypedDict, total=False):
    """Arguments for SocialReport"""
    include: 'TrafficLightIncludeFromTrafficLightRecursive1'


class TrafficLightArgsFromSocialReportRecursive1(TypedDict, total=False):
    """Arguments for SocialReport"""
    include: 'TrafficLightIncludeFromTrafficLightRecursive2'


class TrafficLightArgsFromSocialReportRecursive2(TypedDict, total=False):
    """Arguments for SocialReport"""
    include: 'TrafficLightIncludeFromTrafficLightRecursive3'


class TrafficLightArgsFromSocialReportRecursive3(TypedDict, total=False):
    """Arguments for SocialReport"""
    include: 'TrafficLightIncludeFromTrafficLightRecursive4'


class TrafficLightArgsFromSocialReportRecursive4(TypedDict, total=False):
    """Arguments for SocialReport"""
    
    

class FindManyTrafficLightArgsFromSocialReport(TypedDict, total=False):
    """Arguments for SocialReport"""
    take: int
    skip: int
    order_by: Union['TrafficLightOrderByInput', List['TrafficLightOrderByInput']]
    where: 'TrafficLightWhereInput'
    cursor: 'TrafficLightWhereUniqueInput'
    distinct: List['TrafficLightScalarFieldKeys']
    include: 'TrafficLightIncludeFromTrafficLightRecursive1'


class FindManyTrafficLightArgsFromSocialReportRecursive1(TypedDict, total=False):
    """Arguments for SocialReport"""
    take: int
    skip: int
    order_by: Union['TrafficLightOrderByInput', List['TrafficLightOrderByInput']]
    where: 'TrafficLightWhereInput'
    cursor: 'TrafficLightWhereUniqueInput'
    distinct: List['TrafficLightScalarFieldKeys']
    include: 'TrafficLightIncludeFromTrafficLightRecursive2'


class FindManyTrafficLightArgsFromSocialReportRecursive2(TypedDict, total=False):
    """Arguments for SocialReport"""
    take: int
    skip: int
    order_by: Union['TrafficLightOrderByInput', List['TrafficLightOrderByInput']]
    where: 'TrafficLightWhereInput'
    cursor: 'TrafficLightWhereUniqueInput'
    distinct: List['TrafficLightScalarFieldKeys']
    include: 'TrafficLightIncludeFromTrafficLightRecursive3'


class FindManyTrafficLightArgsFromSocialReportRecursive3(TypedDict, total=False):
    """Arguments for SocialReport"""
    take: int
    skip: int
    order_by: Union['TrafficLightOrderByInput', List['TrafficLightOrderByInput']]
    where: 'TrafficLightWhereInput'
    cursor: 'TrafficLightWhereUniqueInput'
    distinct: List['TrafficLightScalarFieldKeys']
    include: 'TrafficLightIncludeFromTrafficLightRecursive4'


class FindManyTrafficLightArgsFromSocialReportRecursive4(TypedDict, total=False):
    """Arguments for SocialReport"""
    take: int
    skip: int
    order_by: Union['TrafficLightOrderByInput', List['TrafficLightOrderByInput']]
    where: 'TrafficLightWhereInput'
    cursor: 'TrafficLightWhereUniqueInput'
    distinct: List['TrafficLightScalarFieldKeys']
    


FindManySocialReportArgs = FindManySocialReportArgsFromSocialReport
FindFirstSocialReportArgs = FindManySocialReportArgsFromSocialReport


    

class SocialReportWhereInput(TypedDict, total=False):
    """SocialReport arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    timestamp: Union[datetime.datetime, 'types.DateTimeFilter']
    location: Union['fields.Base64', 'types.BytesFilter']
    content: Union[_str, 'types.StringFilter']
    source: Union[_str, 'types.StringFilter']

    # should be noted that AND and NOT should be Union['SocialReportWhereInputRecursive1', List['SocialReportWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['SocialReportWhereInputRecursive1']
    OR: List['SocialReportWhereInputRecursive1']
    NOT: List['SocialReportWhereInputRecursive1']


class SocialReportWhereInputRecursive1(TypedDict, total=False):
    """SocialReport arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    timestamp: Union[datetime.datetime, 'types.DateTimeFilter']
    location: Union['fields.Base64', 'types.BytesFilter']
    content: Union[_str, 'types.StringFilter']
    source: Union[_str, 'types.StringFilter']

    # should be noted that AND and NOT should be Union['SocialReportWhereInputRecursive2', List['SocialReportWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['SocialReportWhereInputRecursive2']
    OR: List['SocialReportWhereInputRecursive2']
    NOT: List['SocialReportWhereInputRecursive2']


class SocialReportWhereInputRecursive2(TypedDict, total=False):
    """SocialReport arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    timestamp: Union[datetime.datetime, 'types.DateTimeFilter']
    location: Union['fields.Base64', 'types.BytesFilter']
    content: Union[_str, 'types.StringFilter']
    source: Union[_str, 'types.StringFilter']

    # should be noted that AND and NOT should be Union['SocialReportWhereInputRecursive3', List['SocialReportWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['SocialReportWhereInputRecursive3']
    OR: List['SocialReportWhereInputRecursive3']
    NOT: List['SocialReportWhereInputRecursive3']


class SocialReportWhereInputRecursive3(TypedDict, total=False):
    """SocialReport arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    timestamp: Union[datetime.datetime, 'types.DateTimeFilter']
    location: Union['fields.Base64', 'types.BytesFilter']
    content: Union[_str, 'types.StringFilter']
    source: Union[_str, 'types.StringFilter']

    # should be noted that AND and NOT should be Union['SocialReportWhereInputRecursive4', List['SocialReportWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['SocialReportWhereInputRecursive4']
    OR: List['SocialReportWhereInputRecursive4']
    NOT: List['SocialReportWhereInputRecursive4']


class SocialReportWhereInputRecursive4(TypedDict, total=False):
    """SocialReport arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    timestamp: Union[datetime.datetime, 'types.DateTimeFilter']
    location: Union['fields.Base64', 'types.BytesFilter']
    content: Union[_str, 'types.StringFilter']
    source: Union[_str, 'types.StringFilter']



# aggregate SocialReport types


    

class SocialReportScalarWhereWithAggregatesInput(TypedDict, total=False):
    """SocialReport arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    timestamp: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    location: Union['fields.Base64', 'types.BytesWithAggregatesFilter']
    content: Union[_str, 'types.StringWithAggregatesFilter']
    source: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['SocialReportScalarWhereWithAggregatesInputRecursive1']
    OR: List['SocialReportScalarWhereWithAggregatesInputRecursive1']
    NOT: List['SocialReportScalarWhereWithAggregatesInputRecursive1']


class SocialReportScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """SocialReport arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    timestamp: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    location: Union['fields.Base64', 'types.BytesWithAggregatesFilter']
    content: Union[_str, 'types.StringWithAggregatesFilter']
    source: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['SocialReportScalarWhereWithAggregatesInputRecursive2']
    OR: List['SocialReportScalarWhereWithAggregatesInputRecursive2']
    NOT: List['SocialReportScalarWhereWithAggregatesInputRecursive2']


class SocialReportScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """SocialReport arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    timestamp: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    location: Union['fields.Base64', 'types.BytesWithAggregatesFilter']
    content: Union[_str, 'types.StringWithAggregatesFilter']
    source: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['SocialReportScalarWhereWithAggregatesInputRecursive3']
    OR: List['SocialReportScalarWhereWithAggregatesInputRecursive3']
    NOT: List['SocialReportScalarWhereWithAggregatesInputRecursive3']


class SocialReportScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """SocialReport arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    timestamp: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    location: Union['fields.Base64', 'types.BytesWithAggregatesFilter']
    content: Union[_str, 'types.StringWithAggregatesFilter']
    source: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['SocialReportScalarWhereWithAggregatesInputRecursive4']
    OR: List['SocialReportScalarWhereWithAggregatesInputRecursive4']
    NOT: List['SocialReportScalarWhereWithAggregatesInputRecursive4']


class SocialReportScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """SocialReport arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    timestamp: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    location: Union['fields.Base64', 'types.BytesWithAggregatesFilter']
    content: Union[_str, 'types.StringWithAggregatesFilter']
    source: Union[_str, 'types.StringWithAggregatesFilter']



class SocialReportGroupByOutput(TypedDict, total=False):
    id: _str
    timestamp: datetime.datetime
    location: 'fields.Base64'
    content: _str
    source: _str
    _sum: 'SocialReportSumAggregateOutput'
    _avg: 'SocialReportAvgAggregateOutput'
    _min: 'SocialReportMinAggregateOutput'
    _max: 'SocialReportMaxAggregateOutput'
    _count: 'SocialReportCountAggregateOutput'


class SocialReportAvgAggregateOutput(TypedDict, total=False):
    """SocialReport output for aggregating averages"""


class SocialReportSumAggregateOutput(TypedDict, total=False):
    """SocialReport output for aggregating sums"""


class SocialReportScalarAggregateOutput(TypedDict, total=False):
    """SocialReport output including scalar fields"""
    id: _str
    timestamp: datetime.datetime
    location: 'fields.Base64'
    content: _str
    source: _str


SocialReportMinAggregateOutput = SocialReportScalarAggregateOutput
SocialReportMaxAggregateOutput = SocialReportScalarAggregateOutput


class SocialReportMaxAggregateInput(TypedDict, total=False):
    """SocialReport input for aggregating by max"""
    id: bool
    timestamp: bool
    location: bool
    content: bool
    source: bool


class SocialReportMinAggregateInput(TypedDict, total=False):
    """SocialReport input for aggregating by min"""
    id: bool
    timestamp: bool
    location: bool
    content: bool
    source: bool


class SocialReportNumberAggregateInput(TypedDict, total=False):
    """SocialReport input for aggregating numbers"""


SocialReportAvgAggregateInput = SocialReportNumberAggregateInput
SocialReportSumAggregateInput = SocialReportNumberAggregateInput


SocialReportCountAggregateInput = TypedDict(
    'SocialReportCountAggregateInput',
    {
        'id': bool,
        'timestamp': bool,
        'location': bool,
        'content': bool,
        'source': bool,
        '_all': bool,
    },
    total=False,
)

SocialReportCountAggregateOutput = TypedDict(
    'SocialReportCountAggregateOutput',
    {
        'id': int,
        'timestamp': int,
        'location': int,
        'content': int,
        'source': int,
        '_all': int,
    },
    total=False,
)


SocialReportKeys = Literal[
    'id',
    'timestamp',
    'location',
    'content',
    'source',
]
SocialReportScalarFieldKeys = Literal[
    'id',
    'timestamp',
    'location',
    'content',
    'source',
]
SocialReportScalarFieldKeysT = TypeVar('SocialReportScalarFieldKeysT', bound=SocialReportScalarFieldKeys)

SocialReportRelationalFieldKeys = _NoneType

# TrafficData types

class TrafficDataOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the TrafficData create method"""
    id: _str


class TrafficDataCreateInput(TrafficDataOptionalCreateInput):
    """Required arguments to the TrafficData create method"""
    timestamp: datetime.datetime
    location: 'fields.Base64'
    density: _int
    speed: _float


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class TrafficDataOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the TrafficData create method, without relations"""
    id: _str


class TrafficDataCreateWithoutRelationsInput(TrafficDataOptionalCreateWithoutRelationsInput):
    """Required arguments to the TrafficData create method, without relations"""
    timestamp: datetime.datetime
    location: 'fields.Base64'
    density: _int
    speed: _float

class TrafficDataConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'TrafficDataCreateWithoutRelationsInput'
    where: 'TrafficDataWhereUniqueInput'

class TrafficDataCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'TrafficDataCreateWithoutRelationsInput'
    connect: 'TrafficDataWhereUniqueInput'
    connect_or_create: 'TrafficDataConnectOrCreateWithoutRelationsInput'


class TrafficDataCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['TrafficDataCreateWithoutRelationsInput', List['TrafficDataCreateWithoutRelationsInput']]
    connect: Union['TrafficDataWhereUniqueInput', List['TrafficDataWhereUniqueInput']]
    connect_or_create: Union['TrafficDataConnectOrCreateWithoutRelationsInput', List['TrafficDataConnectOrCreateWithoutRelationsInput']]

_TrafficDataWhereUnique_id_Input = TypedDict(
    '_TrafficDataWhereUnique_id_Input',
    {
        'id': '_str',
    },
    total=True
)

TrafficDataWhereUniqueInput = _TrafficDataWhereUnique_id_Input


class TrafficDataUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: _str
    timestamp: datetime.datetime
    location: 'fields.Base64'
    density: Union[AtomicIntInput, _int]
    speed: Union[AtomicFloatInput, _float]


class TrafficDataUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: _str
    timestamp: datetime.datetime
    location: 'fields.Base64'
    density: Union[AtomicIntInput, _int]
    speed: Union[AtomicFloatInput, _float]


class TrafficDataUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['TrafficDataCreateWithoutRelationsInput']
    connect: List['TrafficDataWhereUniqueInput']
    connect_or_create: List['TrafficDataConnectOrCreateWithoutRelationsInput']
    set: List['TrafficDataWhereUniqueInput']
    disconnect: List['TrafficDataWhereUniqueInput']
    delete: List['TrafficDataWhereUniqueInput']

    # TODO
    # update: List['TrafficDataUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['TrafficDataUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['TrafficDataScalarWhereInput']
    # upsert: List['TrafficDataUpserteWithWhereUniqueWithoutRelationsInput']


class TrafficDataUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'TrafficDataCreateWithoutRelationsInput'
    connect: 'TrafficDataWhereUniqueInput'
    connect_or_create: 'TrafficDataConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'TrafficDataUpdateInput'
    # upsert: 'TrafficDataUpsertWithoutRelationsInput'


class TrafficDataUpsertInput(TypedDict):
    create: 'TrafficDataCreateInput'
    update: 'TrafficDataUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_TrafficData_id_OrderByInput = TypedDict(
    '_TrafficData_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_TrafficData_timestamp_OrderByInput = TypedDict(
    '_TrafficData_timestamp_OrderByInput',
    {
        'timestamp': 'SortOrder',
    },
    total=True
)

_TrafficData_location_OrderByInput = TypedDict(
    '_TrafficData_location_OrderByInput',
    {
        'location': 'SortOrder',
    },
    total=True
)

_TrafficData_density_OrderByInput = TypedDict(
    '_TrafficData_density_OrderByInput',
    {
        'density': 'SortOrder',
    },
    total=True
)

_TrafficData_speed_OrderByInput = TypedDict(
    '_TrafficData_speed_OrderByInput',
    {
        'speed': 'SortOrder',
    },
    total=True
)

_TrafficData_RelevanceInner = TypedDict(
    '_TrafficData_RelevanceInner',
    {
        'fields': 'List[TrafficDataScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_TrafficData_RelevanceOrderByInput = TypedDict(
    '_TrafficData_RelevanceOrderByInput',
    {
        '_relevance': '_TrafficData_RelevanceInner',
    },
    total=True
)

TrafficDataOrderByInput = Union[
    '_TrafficData_id_OrderByInput',
    '_TrafficData_timestamp_OrderByInput',
    '_TrafficData_location_OrderByInput',
    '_TrafficData_density_OrderByInput',
    '_TrafficData_speed_OrderByInput',
    '_TrafficData_RelevanceOrderByInput',
]



# recursive TrafficData types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

TrafficDataRelationFilter = TypedDict(
    'TrafficDataRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class TrafficDataListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class TrafficDataInclude(TypedDict, total=False):
    """TrafficData relational arguments"""


    

class AchievementIncludeFromTrafficData(TypedDict, total=False):
    """Relational arguments for TrafficData"""


class AchievementIncludeFromTrafficDataRecursive1(TypedDict, total=False):
    """Relational arguments for TrafficData"""


class AchievementIncludeFromTrafficDataRecursive2(TypedDict, total=False):
    """Relational arguments for TrafficData"""


class AchievementIncludeFromTrafficDataRecursive3(TypedDict, total=False):
    """Relational arguments for TrafficData"""


class AchievementIncludeFromTrafficDataRecursive4(TypedDict, total=False):
    """Relational arguments for TrafficData"""

    

class AchievementArgsFromTrafficData(TypedDict, total=False):
    """Arguments for TrafficData"""
    include: 'AchievementIncludeFromAchievementRecursive1'


class AchievementArgsFromTrafficDataRecursive1(TypedDict, total=False):
    """Arguments for TrafficData"""
    include: 'AchievementIncludeFromAchievementRecursive2'


class AchievementArgsFromTrafficDataRecursive2(TypedDict, total=False):
    """Arguments for TrafficData"""
    include: 'AchievementIncludeFromAchievementRecursive3'


class AchievementArgsFromTrafficDataRecursive3(TypedDict, total=False):
    """Arguments for TrafficData"""
    include: 'AchievementIncludeFromAchievementRecursive4'


class AchievementArgsFromTrafficDataRecursive4(TypedDict, total=False):
    """Arguments for TrafficData"""
    
    

class FindManyAchievementArgsFromTrafficData(TypedDict, total=False):
    """Arguments for TrafficData"""
    take: int
    skip: int
    order_by: Union['AchievementOrderByInput', List['AchievementOrderByInput']]
    where: 'AchievementWhereInput'
    cursor: 'AchievementWhereUniqueInput'
    distinct: List['AchievementScalarFieldKeys']
    include: 'AchievementIncludeFromAchievementRecursive1'


class FindManyAchievementArgsFromTrafficDataRecursive1(TypedDict, total=False):
    """Arguments for TrafficData"""
    take: int
    skip: int
    order_by: Union['AchievementOrderByInput', List['AchievementOrderByInput']]
    where: 'AchievementWhereInput'
    cursor: 'AchievementWhereUniqueInput'
    distinct: List['AchievementScalarFieldKeys']
    include: 'AchievementIncludeFromAchievementRecursive2'


class FindManyAchievementArgsFromTrafficDataRecursive2(TypedDict, total=False):
    """Arguments for TrafficData"""
    take: int
    skip: int
    order_by: Union['AchievementOrderByInput', List['AchievementOrderByInput']]
    where: 'AchievementWhereInput'
    cursor: 'AchievementWhereUniqueInput'
    distinct: List['AchievementScalarFieldKeys']
    include: 'AchievementIncludeFromAchievementRecursive3'


class FindManyAchievementArgsFromTrafficDataRecursive3(TypedDict, total=False):
    """Arguments for TrafficData"""
    take: int
    skip: int
    order_by: Union['AchievementOrderByInput', List['AchievementOrderByInput']]
    where: 'AchievementWhereInput'
    cursor: 'AchievementWhereUniqueInput'
    distinct: List['AchievementScalarFieldKeys']
    include: 'AchievementIncludeFromAchievementRecursive4'


class FindManyAchievementArgsFromTrafficDataRecursive4(TypedDict, total=False):
    """Arguments for TrafficData"""
    take: int
    skip: int
    order_by: Union['AchievementOrderByInput', List['AchievementOrderByInput']]
    where: 'AchievementWhereInput'
    cursor: 'AchievementWhereUniqueInput'
    distinct: List['AchievementScalarFieldKeys']
    
    

class CameraIncludeFromTrafficData(TypedDict, total=False):
    """Relational arguments for TrafficData"""


class CameraIncludeFromTrafficDataRecursive1(TypedDict, total=False):
    """Relational arguments for TrafficData"""


class CameraIncludeFromTrafficDataRecursive2(TypedDict, total=False):
    """Relational arguments for TrafficData"""


class CameraIncludeFromTrafficDataRecursive3(TypedDict, total=False):
    """Relational arguments for TrafficData"""


class CameraIncludeFromTrafficDataRecursive4(TypedDict, total=False):
    """Relational arguments for TrafficData"""

    

class CameraArgsFromTrafficData(TypedDict, total=False):
    """Arguments for TrafficData"""
    include: 'CameraIncludeFromCameraRecursive1'


class CameraArgsFromTrafficDataRecursive1(TypedDict, total=False):
    """Arguments for TrafficData"""
    include: 'CameraIncludeFromCameraRecursive2'


class CameraArgsFromTrafficDataRecursive2(TypedDict, total=False):
    """Arguments for TrafficData"""
    include: 'CameraIncludeFromCameraRecursive3'


class CameraArgsFromTrafficDataRecursive3(TypedDict, total=False):
    """Arguments for TrafficData"""
    include: 'CameraIncludeFromCameraRecursive4'


class CameraArgsFromTrafficDataRecursive4(TypedDict, total=False):
    """Arguments for TrafficData"""
    
    

class FindManyCameraArgsFromTrafficData(TypedDict, total=False):
    """Arguments for TrafficData"""
    take: int
    skip: int
    order_by: Union['CameraOrderByInput', List['CameraOrderByInput']]
    where: 'CameraWhereInput'
    cursor: 'CameraWhereUniqueInput'
    distinct: List['CameraScalarFieldKeys']
    include: 'CameraIncludeFromCameraRecursive1'


class FindManyCameraArgsFromTrafficDataRecursive1(TypedDict, total=False):
    """Arguments for TrafficData"""
    take: int
    skip: int
    order_by: Union['CameraOrderByInput', List['CameraOrderByInput']]
    where: 'CameraWhereInput'
    cursor: 'CameraWhereUniqueInput'
    distinct: List['CameraScalarFieldKeys']
    include: 'CameraIncludeFromCameraRecursive2'


class FindManyCameraArgsFromTrafficDataRecursive2(TypedDict, total=False):
    """Arguments for TrafficData"""
    take: int
    skip: int
    order_by: Union['CameraOrderByInput', List['CameraOrderByInput']]
    where: 'CameraWhereInput'
    cursor: 'CameraWhereUniqueInput'
    distinct: List['CameraScalarFieldKeys']
    include: 'CameraIncludeFromCameraRecursive3'


class FindManyCameraArgsFromTrafficDataRecursive3(TypedDict, total=False):
    """Arguments for TrafficData"""
    take: int
    skip: int
    order_by: Union['CameraOrderByInput', List['CameraOrderByInput']]
    where: 'CameraWhereInput'
    cursor: 'CameraWhereUniqueInput'
    distinct: List['CameraScalarFieldKeys']
    include: 'CameraIncludeFromCameraRecursive4'


class FindManyCameraArgsFromTrafficDataRecursive4(TypedDict, total=False):
    """Arguments for TrafficData"""
    take: int
    skip: int
    order_by: Union['CameraOrderByInput', List['CameraOrderByInput']]
    where: 'CameraWhereInput'
    cursor: 'CameraWhereUniqueInput'
    distinct: List['CameraScalarFieldKeys']
    
    

class EffectivenessIncludeFromTrafficData(TypedDict, total=False):
    """Relational arguments for TrafficData"""


class EffectivenessIncludeFromTrafficDataRecursive1(TypedDict, total=False):
    """Relational arguments for TrafficData"""


class EffectivenessIncludeFromTrafficDataRecursive2(TypedDict, total=False):
    """Relational arguments for TrafficData"""


class EffectivenessIncludeFromTrafficDataRecursive3(TypedDict, total=False):
    """Relational arguments for TrafficData"""


class EffectivenessIncludeFromTrafficDataRecursive4(TypedDict, total=False):
    """Relational arguments for TrafficData"""

    

class EffectivenessArgsFromTrafficData(TypedDict, total=False):
    """Arguments for TrafficData"""
    include: 'EffectivenessIncludeFromEffectivenessRecursive1'


class EffectivenessArgsFromTrafficDataRecursive1(TypedDict, total=False):
    """Arguments for TrafficData"""
    include: 'EffectivenessIncludeFromEffectivenessRecursive2'


class EffectivenessArgsFromTrafficDataRecursive2(TypedDict, total=False):
    """Arguments for TrafficData"""
    include: 'EffectivenessIncludeFromEffectivenessRecursive3'


class EffectivenessArgsFromTrafficDataRecursive3(TypedDict, total=False):
    """Arguments for TrafficData"""
    include: 'EffectivenessIncludeFromEffectivenessRecursive4'


class EffectivenessArgsFromTrafficDataRecursive4(TypedDict, total=False):
    """Arguments for TrafficData"""
    
    

class FindManyEffectivenessArgsFromTrafficData(TypedDict, total=False):
    """Arguments for TrafficData"""
    take: int
    skip: int
    order_by: Union['EffectivenessOrderByInput', List['EffectivenessOrderByInput']]
    where: 'EffectivenessWhereInput'
    cursor: 'EffectivenessWhereUniqueInput'
    distinct: List['EffectivenessScalarFieldKeys']
    include: 'EffectivenessIncludeFromEffectivenessRecursive1'


class FindManyEffectivenessArgsFromTrafficDataRecursive1(TypedDict, total=False):
    """Arguments for TrafficData"""
    take: int
    skip: int
    order_by: Union['EffectivenessOrderByInput', List['EffectivenessOrderByInput']]
    where: 'EffectivenessWhereInput'
    cursor: 'EffectivenessWhereUniqueInput'
    distinct: List['EffectivenessScalarFieldKeys']
    include: 'EffectivenessIncludeFromEffectivenessRecursive2'


class FindManyEffectivenessArgsFromTrafficDataRecursive2(TypedDict, total=False):
    """Arguments for TrafficData"""
    take: int
    skip: int
    order_by: Union['EffectivenessOrderByInput', List['EffectivenessOrderByInput']]
    where: 'EffectivenessWhereInput'
    cursor: 'EffectivenessWhereUniqueInput'
    distinct: List['EffectivenessScalarFieldKeys']
    include: 'EffectivenessIncludeFromEffectivenessRecursive3'


class FindManyEffectivenessArgsFromTrafficDataRecursive3(TypedDict, total=False):
    """Arguments for TrafficData"""
    take: int
    skip: int
    order_by: Union['EffectivenessOrderByInput', List['EffectivenessOrderByInput']]
    where: 'EffectivenessWhereInput'
    cursor: 'EffectivenessWhereUniqueInput'
    distinct: List['EffectivenessScalarFieldKeys']
    include: 'EffectivenessIncludeFromEffectivenessRecursive4'


class FindManyEffectivenessArgsFromTrafficDataRecursive4(TypedDict, total=False):
    """Arguments for TrafficData"""
    take: int
    skip: int
    order_by: Union['EffectivenessOrderByInput', List['EffectivenessOrderByInput']]
    where: 'EffectivenessWhereInput'
    cursor: 'EffectivenessWhereUniqueInput'
    distinct: List['EffectivenessScalarFieldKeys']
    
    

class EnvironmentalDataIncludeFromTrafficData(TypedDict, total=False):
    """Relational arguments for TrafficData"""


class EnvironmentalDataIncludeFromTrafficDataRecursive1(TypedDict, total=False):
    """Relational arguments for TrafficData"""


class EnvironmentalDataIncludeFromTrafficDataRecursive2(TypedDict, total=False):
    """Relational arguments for TrafficData"""


class EnvironmentalDataIncludeFromTrafficDataRecursive3(TypedDict, total=False):
    """Relational arguments for TrafficData"""


class EnvironmentalDataIncludeFromTrafficDataRecursive4(TypedDict, total=False):
    """Relational arguments for TrafficData"""

    

class EnvironmentalDataArgsFromTrafficData(TypedDict, total=False):
    """Arguments for TrafficData"""
    include: 'EnvironmentalDataIncludeFromEnvironmentalDataRecursive1'


class EnvironmentalDataArgsFromTrafficDataRecursive1(TypedDict, total=False):
    """Arguments for TrafficData"""
    include: 'EnvironmentalDataIncludeFromEnvironmentalDataRecursive2'


class EnvironmentalDataArgsFromTrafficDataRecursive2(TypedDict, total=False):
    """Arguments for TrafficData"""
    include: 'EnvironmentalDataIncludeFromEnvironmentalDataRecursive3'


class EnvironmentalDataArgsFromTrafficDataRecursive3(TypedDict, total=False):
    """Arguments for TrafficData"""
    include: 'EnvironmentalDataIncludeFromEnvironmentalDataRecursive4'


class EnvironmentalDataArgsFromTrafficDataRecursive4(TypedDict, total=False):
    """Arguments for TrafficData"""
    
    

class FindManyEnvironmentalDataArgsFromTrafficData(TypedDict, total=False):
    """Arguments for TrafficData"""
    take: int
    skip: int
    order_by: Union['EnvironmentalDataOrderByInput', List['EnvironmentalDataOrderByInput']]
    where: 'EnvironmentalDataWhereInput'
    cursor: 'EnvironmentalDataWhereUniqueInput'
    distinct: List['EnvironmentalDataScalarFieldKeys']
    include: 'EnvironmentalDataIncludeFromEnvironmentalDataRecursive1'


class FindManyEnvironmentalDataArgsFromTrafficDataRecursive1(TypedDict, total=False):
    """Arguments for TrafficData"""
    take: int
    skip: int
    order_by: Union['EnvironmentalDataOrderByInput', List['EnvironmentalDataOrderByInput']]
    where: 'EnvironmentalDataWhereInput'
    cursor: 'EnvironmentalDataWhereUniqueInput'
    distinct: List['EnvironmentalDataScalarFieldKeys']
    include: 'EnvironmentalDataIncludeFromEnvironmentalDataRecursive2'


class FindManyEnvironmentalDataArgsFromTrafficDataRecursive2(TypedDict, total=False):
    """Arguments for TrafficData"""
    take: int
    skip: int
    order_by: Union['EnvironmentalDataOrderByInput', List['EnvironmentalDataOrderByInput']]
    where: 'EnvironmentalDataWhereInput'
    cursor: 'EnvironmentalDataWhereUniqueInput'
    distinct: List['EnvironmentalDataScalarFieldKeys']
    include: 'EnvironmentalDataIncludeFromEnvironmentalDataRecursive3'


class FindManyEnvironmentalDataArgsFromTrafficDataRecursive3(TypedDict, total=False):
    """Arguments for TrafficData"""
    take: int
    skip: int
    order_by: Union['EnvironmentalDataOrderByInput', List['EnvironmentalDataOrderByInput']]
    where: 'EnvironmentalDataWhereInput'
    cursor: 'EnvironmentalDataWhereUniqueInput'
    distinct: List['EnvironmentalDataScalarFieldKeys']
    include: 'EnvironmentalDataIncludeFromEnvironmentalDataRecursive4'


class FindManyEnvironmentalDataArgsFromTrafficDataRecursive4(TypedDict, total=False):
    """Arguments for TrafficData"""
    take: int
    skip: int
    order_by: Union['EnvironmentalDataOrderByInput', List['EnvironmentalDataOrderByInput']]
    where: 'EnvironmentalDataWhereInput'
    cursor: 'EnvironmentalDataWhereUniqueInput'
    distinct: List['EnvironmentalDataScalarFieldKeys']
    
    

class EventIncludeFromTrafficData(TypedDict, total=False):
    """Relational arguments for TrafficData"""


class EventIncludeFromTrafficDataRecursive1(TypedDict, total=False):
    """Relational arguments for TrafficData"""


class EventIncludeFromTrafficDataRecursive2(TypedDict, total=False):
    """Relational arguments for TrafficData"""


class EventIncludeFromTrafficDataRecursive3(TypedDict, total=False):
    """Relational arguments for TrafficData"""


class EventIncludeFromTrafficDataRecursive4(TypedDict, total=False):
    """Relational arguments for TrafficData"""

    

class EventArgsFromTrafficData(TypedDict, total=False):
    """Arguments for TrafficData"""
    include: 'EventIncludeFromEventRecursive1'


class EventArgsFromTrafficDataRecursive1(TypedDict, total=False):
    """Arguments for TrafficData"""
    include: 'EventIncludeFromEventRecursive2'


class EventArgsFromTrafficDataRecursive2(TypedDict, total=False):
    """Arguments for TrafficData"""
    include: 'EventIncludeFromEventRecursive3'


class EventArgsFromTrafficDataRecursive3(TypedDict, total=False):
    """Arguments for TrafficData"""
    include: 'EventIncludeFromEventRecursive4'


class EventArgsFromTrafficDataRecursive4(TypedDict, total=False):
    """Arguments for TrafficData"""
    
    

class FindManyEventArgsFromTrafficData(TypedDict, total=False):
    """Arguments for TrafficData"""
    take: int
    skip: int
    order_by: Union['EventOrderByInput', List['EventOrderByInput']]
    where: 'EventWhereInput'
    cursor: 'EventWhereUniqueInput'
    distinct: List['EventScalarFieldKeys']
    include: 'EventIncludeFromEventRecursive1'


class FindManyEventArgsFromTrafficDataRecursive1(TypedDict, total=False):
    """Arguments for TrafficData"""
    take: int
    skip: int
    order_by: Union['EventOrderByInput', List['EventOrderByInput']]
    where: 'EventWhereInput'
    cursor: 'EventWhereUniqueInput'
    distinct: List['EventScalarFieldKeys']
    include: 'EventIncludeFromEventRecursive2'


class FindManyEventArgsFromTrafficDataRecursive2(TypedDict, total=False):
    """Arguments for TrafficData"""
    take: int
    skip: int
    order_by: Union['EventOrderByInput', List['EventOrderByInput']]
    where: 'EventWhereInput'
    cursor: 'EventWhereUniqueInput'
    distinct: List['EventScalarFieldKeys']
    include: 'EventIncludeFromEventRecursive3'


class FindManyEventArgsFromTrafficDataRecursive3(TypedDict, total=False):
    """Arguments for TrafficData"""
    take: int
    skip: int
    order_by: Union['EventOrderByInput', List['EventOrderByInput']]
    where: 'EventWhereInput'
    cursor: 'EventWhereUniqueInput'
    distinct: List['EventScalarFieldKeys']
    include: 'EventIncludeFromEventRecursive4'


class FindManyEventArgsFromTrafficDataRecursive4(TypedDict, total=False):
    """Arguments for TrafficData"""
    take: int
    skip: int
    order_by: Union['EventOrderByInput', List['EventOrderByInput']]
    where: 'EventWhereInput'
    cursor: 'EventWhereUniqueInput'
    distinct: List['EventScalarFieldKeys']
    
    

class ForecastIncludeFromTrafficData(TypedDict, total=False):
    """Relational arguments for TrafficData"""


class ForecastIncludeFromTrafficDataRecursive1(TypedDict, total=False):
    """Relational arguments for TrafficData"""


class ForecastIncludeFromTrafficDataRecursive2(TypedDict, total=False):
    """Relational arguments for TrafficData"""


class ForecastIncludeFromTrafficDataRecursive3(TypedDict, total=False):
    """Relational arguments for TrafficData"""


class ForecastIncludeFromTrafficDataRecursive4(TypedDict, total=False):
    """Relational arguments for TrafficData"""

    

class ForecastArgsFromTrafficData(TypedDict, total=False):
    """Arguments for TrafficData"""
    include: 'ForecastIncludeFromForecastRecursive1'


class ForecastArgsFromTrafficDataRecursive1(TypedDict, total=False):
    """Arguments for TrafficData"""
    include: 'ForecastIncludeFromForecastRecursive2'


class ForecastArgsFromTrafficDataRecursive2(TypedDict, total=False):
    """Arguments for TrafficData"""
    include: 'ForecastIncludeFromForecastRecursive3'


class ForecastArgsFromTrafficDataRecursive3(TypedDict, total=False):
    """Arguments for TrafficData"""
    include: 'ForecastIncludeFromForecastRecursive4'


class ForecastArgsFromTrafficDataRecursive4(TypedDict, total=False):
    """Arguments for TrafficData"""
    
    

class FindManyForecastArgsFromTrafficData(TypedDict, total=False):
    """Arguments for TrafficData"""
    take: int
    skip: int
    order_by: Union['ForecastOrderByInput', List['ForecastOrderByInput']]
    where: 'ForecastWhereInput'
    cursor: 'ForecastWhereUniqueInput'
    distinct: List['ForecastScalarFieldKeys']
    include: 'ForecastIncludeFromForecastRecursive1'


class FindManyForecastArgsFromTrafficDataRecursive1(TypedDict, total=False):
    """Arguments for TrafficData"""
    take: int
    skip: int
    order_by: Union['ForecastOrderByInput', List['ForecastOrderByInput']]
    where: 'ForecastWhereInput'
    cursor: 'ForecastWhereUniqueInput'
    distinct: List['ForecastScalarFieldKeys']
    include: 'ForecastIncludeFromForecastRecursive2'


class FindManyForecastArgsFromTrafficDataRecursive2(TypedDict, total=False):
    """Arguments for TrafficData"""
    take: int
    skip: int
    order_by: Union['ForecastOrderByInput', List['ForecastOrderByInput']]
    where: 'ForecastWhereInput'
    cursor: 'ForecastWhereUniqueInput'
    distinct: List['ForecastScalarFieldKeys']
    include: 'ForecastIncludeFromForecastRecursive3'


class FindManyForecastArgsFromTrafficDataRecursive3(TypedDict, total=False):
    """Arguments for TrafficData"""
    take: int
    skip: int
    order_by: Union['ForecastOrderByInput', List['ForecastOrderByInput']]
    where: 'ForecastWhereInput'
    cursor: 'ForecastWhereUniqueInput'
    distinct: List['ForecastScalarFieldKeys']
    include: 'ForecastIncludeFromForecastRecursive4'


class FindManyForecastArgsFromTrafficDataRecursive4(TypedDict, total=False):
    """Arguments for TrafficData"""
    take: int
    skip: int
    order_by: Union['ForecastOrderByInput', List['ForecastOrderByInput']]
    where: 'ForecastWhereInput'
    cursor: 'ForecastWhereUniqueInput'
    distinct: List['ForecastScalarFieldKeys']
    
    

class IncidentIncludeFromTrafficData(TypedDict, total=False):
    """Relational arguments for TrafficData"""


class IncidentIncludeFromTrafficDataRecursive1(TypedDict, total=False):
    """Relational arguments for TrafficData"""


class IncidentIncludeFromTrafficDataRecursive2(TypedDict, total=False):
    """Relational arguments for TrafficData"""


class IncidentIncludeFromTrafficDataRecursive3(TypedDict, total=False):
    """Relational arguments for TrafficData"""


class IncidentIncludeFromTrafficDataRecursive4(TypedDict, total=False):
    """Relational arguments for TrafficData"""

    

class IncidentArgsFromTrafficData(TypedDict, total=False):
    """Arguments for TrafficData"""
    include: 'IncidentIncludeFromIncidentRecursive1'


class IncidentArgsFromTrafficDataRecursive1(TypedDict, total=False):
    """Arguments for TrafficData"""
    include: 'IncidentIncludeFromIncidentRecursive2'


class IncidentArgsFromTrafficDataRecursive2(TypedDict, total=False):
    """Arguments for TrafficData"""
    include: 'IncidentIncludeFromIncidentRecursive3'


class IncidentArgsFromTrafficDataRecursive3(TypedDict, total=False):
    """Arguments for TrafficData"""
    include: 'IncidentIncludeFromIncidentRecursive4'


class IncidentArgsFromTrafficDataRecursive4(TypedDict, total=False):
    """Arguments for TrafficData"""
    
    

class FindManyIncidentArgsFromTrafficData(TypedDict, total=False):
    """Arguments for TrafficData"""
    take: int
    skip: int
    order_by: Union['IncidentOrderByInput', List['IncidentOrderByInput']]
    where: 'IncidentWhereInput'
    cursor: 'IncidentWhereUniqueInput'
    distinct: List['IncidentScalarFieldKeys']
    include: 'IncidentIncludeFromIncidentRecursive1'


class FindManyIncidentArgsFromTrafficDataRecursive1(TypedDict, total=False):
    """Arguments for TrafficData"""
    take: int
    skip: int
    order_by: Union['IncidentOrderByInput', List['IncidentOrderByInput']]
    where: 'IncidentWhereInput'
    cursor: 'IncidentWhereUniqueInput'
    distinct: List['IncidentScalarFieldKeys']
    include: 'IncidentIncludeFromIncidentRecursive2'


class FindManyIncidentArgsFromTrafficDataRecursive2(TypedDict, total=False):
    """Arguments for TrafficData"""
    take: int
    skip: int
    order_by: Union['IncidentOrderByInput', List['IncidentOrderByInput']]
    where: 'IncidentWhereInput'
    cursor: 'IncidentWhereUniqueInput'
    distinct: List['IncidentScalarFieldKeys']
    include: 'IncidentIncludeFromIncidentRecursive3'


class FindManyIncidentArgsFromTrafficDataRecursive3(TypedDict, total=False):
    """Arguments for TrafficData"""
    take: int
    skip: int
    order_by: Union['IncidentOrderByInput', List['IncidentOrderByInput']]
    where: 'IncidentWhereInput'
    cursor: 'IncidentWhereUniqueInput'
    distinct: List['IncidentScalarFieldKeys']
    include: 'IncidentIncludeFromIncidentRecursive4'


class FindManyIncidentArgsFromTrafficDataRecursive4(TypedDict, total=False):
    """Arguments for TrafficData"""
    take: int
    skip: int
    order_by: Union['IncidentOrderByInput', List['IncidentOrderByInput']]
    where: 'IncidentWhereInput'
    cursor: 'IncidentWhereUniqueInput'
    distinct: List['IncidentScalarFieldKeys']
    
    

class NotificationIncludeFromTrafficData(TypedDict, total=False):
    """Relational arguments for TrafficData"""


class NotificationIncludeFromTrafficDataRecursive1(TypedDict, total=False):
    """Relational arguments for TrafficData"""


class NotificationIncludeFromTrafficDataRecursive2(TypedDict, total=False):
    """Relational arguments for TrafficData"""


class NotificationIncludeFromTrafficDataRecursive3(TypedDict, total=False):
    """Relational arguments for TrafficData"""


class NotificationIncludeFromTrafficDataRecursive4(TypedDict, total=False):
    """Relational arguments for TrafficData"""

    

class NotificationArgsFromTrafficData(TypedDict, total=False):
    """Arguments for TrafficData"""
    include: 'NotificationIncludeFromNotificationRecursive1'


class NotificationArgsFromTrafficDataRecursive1(TypedDict, total=False):
    """Arguments for TrafficData"""
    include: 'NotificationIncludeFromNotificationRecursive2'


class NotificationArgsFromTrafficDataRecursive2(TypedDict, total=False):
    """Arguments for TrafficData"""
    include: 'NotificationIncludeFromNotificationRecursive3'


class NotificationArgsFromTrafficDataRecursive3(TypedDict, total=False):
    """Arguments for TrafficData"""
    include: 'NotificationIncludeFromNotificationRecursive4'


class NotificationArgsFromTrafficDataRecursive4(TypedDict, total=False):
    """Arguments for TrafficData"""
    
    

class FindManyNotificationArgsFromTrafficData(TypedDict, total=False):
    """Arguments for TrafficData"""
    take: int
    skip: int
    order_by: Union['NotificationOrderByInput', List['NotificationOrderByInput']]
    where: 'NotificationWhereInput'
    cursor: 'NotificationWhereUniqueInput'
    distinct: List['NotificationScalarFieldKeys']
    include: 'NotificationIncludeFromNotificationRecursive1'


class FindManyNotificationArgsFromTrafficDataRecursive1(TypedDict, total=False):
    """Arguments for TrafficData"""
    take: int
    skip: int
    order_by: Union['NotificationOrderByInput', List['NotificationOrderByInput']]
    where: 'NotificationWhereInput'
    cursor: 'NotificationWhereUniqueInput'
    distinct: List['NotificationScalarFieldKeys']
    include: 'NotificationIncludeFromNotificationRecursive2'


class FindManyNotificationArgsFromTrafficDataRecursive2(TypedDict, total=False):
    """Arguments for TrafficData"""
    take: int
    skip: int
    order_by: Union['NotificationOrderByInput', List['NotificationOrderByInput']]
    where: 'NotificationWhereInput'
    cursor: 'NotificationWhereUniqueInput'
    distinct: List['NotificationScalarFieldKeys']
    include: 'NotificationIncludeFromNotificationRecursive3'


class FindManyNotificationArgsFromTrafficDataRecursive3(TypedDict, total=False):
    """Arguments for TrafficData"""
    take: int
    skip: int
    order_by: Union['NotificationOrderByInput', List['NotificationOrderByInput']]
    where: 'NotificationWhereInput'
    cursor: 'NotificationWhereUniqueInput'
    distinct: List['NotificationScalarFieldKeys']
    include: 'NotificationIncludeFromNotificationRecursive4'


class FindManyNotificationArgsFromTrafficDataRecursive4(TypedDict, total=False):
    """Arguments for TrafficData"""
    take: int
    skip: int
    order_by: Union['NotificationOrderByInput', List['NotificationOrderByInput']]
    where: 'NotificationWhereInput'
    cursor: 'NotificationWhereUniqueInput'
    distinct: List['NotificationScalarFieldKeys']
    
    

class ScenarioIncludeFromTrafficData(TypedDict, total=False):
    """Relational arguments for TrafficData"""


class ScenarioIncludeFromTrafficDataRecursive1(TypedDict, total=False):
    """Relational arguments for TrafficData"""


class ScenarioIncludeFromTrafficDataRecursive2(TypedDict, total=False):
    """Relational arguments for TrafficData"""


class ScenarioIncludeFromTrafficDataRecursive3(TypedDict, total=False):
    """Relational arguments for TrafficData"""


class ScenarioIncludeFromTrafficDataRecursive4(TypedDict, total=False):
    """Relational arguments for TrafficData"""

    

class ScenarioArgsFromTrafficData(TypedDict, total=False):
    """Arguments for TrafficData"""
    include: 'ScenarioIncludeFromScenarioRecursive1'


class ScenarioArgsFromTrafficDataRecursive1(TypedDict, total=False):
    """Arguments for TrafficData"""
    include: 'ScenarioIncludeFromScenarioRecursive2'


class ScenarioArgsFromTrafficDataRecursive2(TypedDict, total=False):
    """Arguments for TrafficData"""
    include: 'ScenarioIncludeFromScenarioRecursive3'


class ScenarioArgsFromTrafficDataRecursive3(TypedDict, total=False):
    """Arguments for TrafficData"""
    include: 'ScenarioIncludeFromScenarioRecursive4'


class ScenarioArgsFromTrafficDataRecursive4(TypedDict, total=False):
    """Arguments for TrafficData"""
    
    

class FindManyScenarioArgsFromTrafficData(TypedDict, total=False):
    """Arguments for TrafficData"""
    take: int
    skip: int
    order_by: Union['ScenarioOrderByInput', List['ScenarioOrderByInput']]
    where: 'ScenarioWhereInput'
    cursor: 'ScenarioWhereUniqueInput'
    distinct: List['ScenarioScalarFieldKeys']
    include: 'ScenarioIncludeFromScenarioRecursive1'


class FindManyScenarioArgsFromTrafficDataRecursive1(TypedDict, total=False):
    """Arguments for TrafficData"""
    take: int
    skip: int
    order_by: Union['ScenarioOrderByInput', List['ScenarioOrderByInput']]
    where: 'ScenarioWhereInput'
    cursor: 'ScenarioWhereUniqueInput'
    distinct: List['ScenarioScalarFieldKeys']
    include: 'ScenarioIncludeFromScenarioRecursive2'


class FindManyScenarioArgsFromTrafficDataRecursive2(TypedDict, total=False):
    """Arguments for TrafficData"""
    take: int
    skip: int
    order_by: Union['ScenarioOrderByInput', List['ScenarioOrderByInput']]
    where: 'ScenarioWhereInput'
    cursor: 'ScenarioWhereUniqueInput'
    distinct: List['ScenarioScalarFieldKeys']
    include: 'ScenarioIncludeFromScenarioRecursive3'


class FindManyScenarioArgsFromTrafficDataRecursive3(TypedDict, total=False):
    """Arguments for TrafficData"""
    take: int
    skip: int
    order_by: Union['ScenarioOrderByInput', List['ScenarioOrderByInput']]
    where: 'ScenarioWhereInput'
    cursor: 'ScenarioWhereUniqueInput'
    distinct: List['ScenarioScalarFieldKeys']
    include: 'ScenarioIncludeFromScenarioRecursive4'


class FindManyScenarioArgsFromTrafficDataRecursive4(TypedDict, total=False):
    """Arguments for TrafficData"""
    take: int
    skip: int
    order_by: Union['ScenarioOrderByInput', List['ScenarioOrderByInput']]
    where: 'ScenarioWhereInput'
    cursor: 'ScenarioWhereUniqueInput'
    distinct: List['ScenarioScalarFieldKeys']
    
    

class SocialReportIncludeFromTrafficData(TypedDict, total=False):
    """Relational arguments for TrafficData"""


class SocialReportIncludeFromTrafficDataRecursive1(TypedDict, total=False):
    """Relational arguments for TrafficData"""


class SocialReportIncludeFromTrafficDataRecursive2(TypedDict, total=False):
    """Relational arguments for TrafficData"""


class SocialReportIncludeFromTrafficDataRecursive3(TypedDict, total=False):
    """Relational arguments for TrafficData"""


class SocialReportIncludeFromTrafficDataRecursive4(TypedDict, total=False):
    """Relational arguments for TrafficData"""

    

class SocialReportArgsFromTrafficData(TypedDict, total=False):
    """Arguments for TrafficData"""
    include: 'SocialReportIncludeFromSocialReportRecursive1'


class SocialReportArgsFromTrafficDataRecursive1(TypedDict, total=False):
    """Arguments for TrafficData"""
    include: 'SocialReportIncludeFromSocialReportRecursive2'


class SocialReportArgsFromTrafficDataRecursive2(TypedDict, total=False):
    """Arguments for TrafficData"""
    include: 'SocialReportIncludeFromSocialReportRecursive3'


class SocialReportArgsFromTrafficDataRecursive3(TypedDict, total=False):
    """Arguments for TrafficData"""
    include: 'SocialReportIncludeFromSocialReportRecursive4'


class SocialReportArgsFromTrafficDataRecursive4(TypedDict, total=False):
    """Arguments for TrafficData"""
    
    

class FindManySocialReportArgsFromTrafficData(TypedDict, total=False):
    """Arguments for TrafficData"""
    take: int
    skip: int
    order_by: Union['SocialReportOrderByInput', List['SocialReportOrderByInput']]
    where: 'SocialReportWhereInput'
    cursor: 'SocialReportWhereUniqueInput'
    distinct: List['SocialReportScalarFieldKeys']
    include: 'SocialReportIncludeFromSocialReportRecursive1'


class FindManySocialReportArgsFromTrafficDataRecursive1(TypedDict, total=False):
    """Arguments for TrafficData"""
    take: int
    skip: int
    order_by: Union['SocialReportOrderByInput', List['SocialReportOrderByInput']]
    where: 'SocialReportWhereInput'
    cursor: 'SocialReportWhereUniqueInput'
    distinct: List['SocialReportScalarFieldKeys']
    include: 'SocialReportIncludeFromSocialReportRecursive2'


class FindManySocialReportArgsFromTrafficDataRecursive2(TypedDict, total=False):
    """Arguments for TrafficData"""
    take: int
    skip: int
    order_by: Union['SocialReportOrderByInput', List['SocialReportOrderByInput']]
    where: 'SocialReportWhereInput'
    cursor: 'SocialReportWhereUniqueInput'
    distinct: List['SocialReportScalarFieldKeys']
    include: 'SocialReportIncludeFromSocialReportRecursive3'


class FindManySocialReportArgsFromTrafficDataRecursive3(TypedDict, total=False):
    """Arguments for TrafficData"""
    take: int
    skip: int
    order_by: Union['SocialReportOrderByInput', List['SocialReportOrderByInput']]
    where: 'SocialReportWhereInput'
    cursor: 'SocialReportWhereUniqueInput'
    distinct: List['SocialReportScalarFieldKeys']
    include: 'SocialReportIncludeFromSocialReportRecursive4'


class FindManySocialReportArgsFromTrafficDataRecursive4(TypedDict, total=False):
    """Arguments for TrafficData"""
    take: int
    skip: int
    order_by: Union['SocialReportOrderByInput', List['SocialReportOrderByInput']]
    where: 'SocialReportWhereInput'
    cursor: 'SocialReportWhereUniqueInput'
    distinct: List['SocialReportScalarFieldKeys']
    
    

class TrafficDataIncludeFromTrafficData(TypedDict, total=False):
    """Relational arguments for TrafficData"""


class TrafficDataIncludeFromTrafficDataRecursive1(TypedDict, total=False):
    """Relational arguments for TrafficData"""


class TrafficDataIncludeFromTrafficDataRecursive2(TypedDict, total=False):
    """Relational arguments for TrafficData"""


class TrafficDataIncludeFromTrafficDataRecursive3(TypedDict, total=False):
    """Relational arguments for TrafficData"""


class TrafficDataIncludeFromTrafficDataRecursive4(TypedDict, total=False):
    """Relational arguments for TrafficData"""

    

class TrafficDataArgsFromTrafficData(TypedDict, total=False):
    """Arguments for TrafficData"""
    include: 'TrafficDataIncludeFromTrafficDataRecursive1'


class TrafficDataArgsFromTrafficDataRecursive1(TypedDict, total=False):
    """Arguments for TrafficData"""
    include: 'TrafficDataIncludeFromTrafficDataRecursive2'


class TrafficDataArgsFromTrafficDataRecursive2(TypedDict, total=False):
    """Arguments for TrafficData"""
    include: 'TrafficDataIncludeFromTrafficDataRecursive3'


class TrafficDataArgsFromTrafficDataRecursive3(TypedDict, total=False):
    """Arguments for TrafficData"""
    include: 'TrafficDataIncludeFromTrafficDataRecursive4'


class TrafficDataArgsFromTrafficDataRecursive4(TypedDict, total=False):
    """Arguments for TrafficData"""
    
    

class FindManyTrafficDataArgsFromTrafficData(TypedDict, total=False):
    """Arguments for TrafficData"""
    take: int
    skip: int
    order_by: Union['TrafficDataOrderByInput', List['TrafficDataOrderByInput']]
    where: 'TrafficDataWhereInput'
    cursor: 'TrafficDataWhereUniqueInput'
    distinct: List['TrafficDataScalarFieldKeys']
    include: 'TrafficDataIncludeFromTrafficDataRecursive1'


class FindManyTrafficDataArgsFromTrafficDataRecursive1(TypedDict, total=False):
    """Arguments for TrafficData"""
    take: int
    skip: int
    order_by: Union['TrafficDataOrderByInput', List['TrafficDataOrderByInput']]
    where: 'TrafficDataWhereInput'
    cursor: 'TrafficDataWhereUniqueInput'
    distinct: List['TrafficDataScalarFieldKeys']
    include: 'TrafficDataIncludeFromTrafficDataRecursive2'


class FindManyTrafficDataArgsFromTrafficDataRecursive2(TypedDict, total=False):
    """Arguments for TrafficData"""
    take: int
    skip: int
    order_by: Union['TrafficDataOrderByInput', List['TrafficDataOrderByInput']]
    where: 'TrafficDataWhereInput'
    cursor: 'TrafficDataWhereUniqueInput'
    distinct: List['TrafficDataScalarFieldKeys']
    include: 'TrafficDataIncludeFromTrafficDataRecursive3'


class FindManyTrafficDataArgsFromTrafficDataRecursive3(TypedDict, total=False):
    """Arguments for TrafficData"""
    take: int
    skip: int
    order_by: Union['TrafficDataOrderByInput', List['TrafficDataOrderByInput']]
    where: 'TrafficDataWhereInput'
    cursor: 'TrafficDataWhereUniqueInput'
    distinct: List['TrafficDataScalarFieldKeys']
    include: 'TrafficDataIncludeFromTrafficDataRecursive4'


class FindManyTrafficDataArgsFromTrafficDataRecursive4(TypedDict, total=False):
    """Arguments for TrafficData"""
    take: int
    skip: int
    order_by: Union['TrafficDataOrderByInput', List['TrafficDataOrderByInput']]
    where: 'TrafficDataWhereInput'
    cursor: 'TrafficDataWhereUniqueInput'
    distinct: List['TrafficDataScalarFieldKeys']
    
    

class TrafficLightIncludeFromTrafficData(TypedDict, total=False):
    """Relational arguments for TrafficData"""


class TrafficLightIncludeFromTrafficDataRecursive1(TypedDict, total=False):
    """Relational arguments for TrafficData"""


class TrafficLightIncludeFromTrafficDataRecursive2(TypedDict, total=False):
    """Relational arguments for TrafficData"""


class TrafficLightIncludeFromTrafficDataRecursive3(TypedDict, total=False):
    """Relational arguments for TrafficData"""


class TrafficLightIncludeFromTrafficDataRecursive4(TypedDict, total=False):
    """Relational arguments for TrafficData"""

    

class TrafficLightArgsFromTrafficData(TypedDict, total=False):
    """Arguments for TrafficData"""
    include: 'TrafficLightIncludeFromTrafficLightRecursive1'


class TrafficLightArgsFromTrafficDataRecursive1(TypedDict, total=False):
    """Arguments for TrafficData"""
    include: 'TrafficLightIncludeFromTrafficLightRecursive2'


class TrafficLightArgsFromTrafficDataRecursive2(TypedDict, total=False):
    """Arguments for TrafficData"""
    include: 'TrafficLightIncludeFromTrafficLightRecursive3'


class TrafficLightArgsFromTrafficDataRecursive3(TypedDict, total=False):
    """Arguments for TrafficData"""
    include: 'TrafficLightIncludeFromTrafficLightRecursive4'


class TrafficLightArgsFromTrafficDataRecursive4(TypedDict, total=False):
    """Arguments for TrafficData"""
    
    

class FindManyTrafficLightArgsFromTrafficData(TypedDict, total=False):
    """Arguments for TrafficData"""
    take: int
    skip: int
    order_by: Union['TrafficLightOrderByInput', List['TrafficLightOrderByInput']]
    where: 'TrafficLightWhereInput'
    cursor: 'TrafficLightWhereUniqueInput'
    distinct: List['TrafficLightScalarFieldKeys']
    include: 'TrafficLightIncludeFromTrafficLightRecursive1'


class FindManyTrafficLightArgsFromTrafficDataRecursive1(TypedDict, total=False):
    """Arguments for TrafficData"""
    take: int
    skip: int
    order_by: Union['TrafficLightOrderByInput', List['TrafficLightOrderByInput']]
    where: 'TrafficLightWhereInput'
    cursor: 'TrafficLightWhereUniqueInput'
    distinct: List['TrafficLightScalarFieldKeys']
    include: 'TrafficLightIncludeFromTrafficLightRecursive2'


class FindManyTrafficLightArgsFromTrafficDataRecursive2(TypedDict, total=False):
    """Arguments for TrafficData"""
    take: int
    skip: int
    order_by: Union['TrafficLightOrderByInput', List['TrafficLightOrderByInput']]
    where: 'TrafficLightWhereInput'
    cursor: 'TrafficLightWhereUniqueInput'
    distinct: List['TrafficLightScalarFieldKeys']
    include: 'TrafficLightIncludeFromTrafficLightRecursive3'


class FindManyTrafficLightArgsFromTrafficDataRecursive3(TypedDict, total=False):
    """Arguments for TrafficData"""
    take: int
    skip: int
    order_by: Union['TrafficLightOrderByInput', List['TrafficLightOrderByInput']]
    where: 'TrafficLightWhereInput'
    cursor: 'TrafficLightWhereUniqueInput'
    distinct: List['TrafficLightScalarFieldKeys']
    include: 'TrafficLightIncludeFromTrafficLightRecursive4'


class FindManyTrafficLightArgsFromTrafficDataRecursive4(TypedDict, total=False):
    """Arguments for TrafficData"""
    take: int
    skip: int
    order_by: Union['TrafficLightOrderByInput', List['TrafficLightOrderByInput']]
    where: 'TrafficLightWhereInput'
    cursor: 'TrafficLightWhereUniqueInput'
    distinct: List['TrafficLightScalarFieldKeys']
    


FindManyTrafficDataArgs = FindManyTrafficDataArgsFromTrafficData
FindFirstTrafficDataArgs = FindManyTrafficDataArgsFromTrafficData


    

class TrafficDataWhereInput(TypedDict, total=False):
    """TrafficData arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    timestamp: Union[datetime.datetime, 'types.DateTimeFilter']
    location: Union['fields.Base64', 'types.BytesFilter']
    density: Union[_int, 'types.IntFilter']
    speed: Union[_float, 'types.FloatFilter']

    # should be noted that AND and NOT should be Union['TrafficDataWhereInputRecursive1', List['TrafficDataWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['TrafficDataWhereInputRecursive1']
    OR: List['TrafficDataWhereInputRecursive1']
    NOT: List['TrafficDataWhereInputRecursive1']


class TrafficDataWhereInputRecursive1(TypedDict, total=False):
    """TrafficData arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    timestamp: Union[datetime.datetime, 'types.DateTimeFilter']
    location: Union['fields.Base64', 'types.BytesFilter']
    density: Union[_int, 'types.IntFilter']
    speed: Union[_float, 'types.FloatFilter']

    # should be noted that AND and NOT should be Union['TrafficDataWhereInputRecursive2', List['TrafficDataWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['TrafficDataWhereInputRecursive2']
    OR: List['TrafficDataWhereInputRecursive2']
    NOT: List['TrafficDataWhereInputRecursive2']


class TrafficDataWhereInputRecursive2(TypedDict, total=False):
    """TrafficData arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    timestamp: Union[datetime.datetime, 'types.DateTimeFilter']
    location: Union['fields.Base64', 'types.BytesFilter']
    density: Union[_int, 'types.IntFilter']
    speed: Union[_float, 'types.FloatFilter']

    # should be noted that AND and NOT should be Union['TrafficDataWhereInputRecursive3', List['TrafficDataWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['TrafficDataWhereInputRecursive3']
    OR: List['TrafficDataWhereInputRecursive3']
    NOT: List['TrafficDataWhereInputRecursive3']


class TrafficDataWhereInputRecursive3(TypedDict, total=False):
    """TrafficData arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    timestamp: Union[datetime.datetime, 'types.DateTimeFilter']
    location: Union['fields.Base64', 'types.BytesFilter']
    density: Union[_int, 'types.IntFilter']
    speed: Union[_float, 'types.FloatFilter']

    # should be noted that AND and NOT should be Union['TrafficDataWhereInputRecursive4', List['TrafficDataWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['TrafficDataWhereInputRecursive4']
    OR: List['TrafficDataWhereInputRecursive4']
    NOT: List['TrafficDataWhereInputRecursive4']


class TrafficDataWhereInputRecursive4(TypedDict, total=False):
    """TrafficData arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    timestamp: Union[datetime.datetime, 'types.DateTimeFilter']
    location: Union['fields.Base64', 'types.BytesFilter']
    density: Union[_int, 'types.IntFilter']
    speed: Union[_float, 'types.FloatFilter']



# aggregate TrafficData types


    

class TrafficDataScalarWhereWithAggregatesInput(TypedDict, total=False):
    """TrafficData arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    timestamp: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    location: Union['fields.Base64', 'types.BytesWithAggregatesFilter']
    density: Union[_int, 'types.IntWithAggregatesFilter']
    speed: Union[_float, 'types.FloatWithAggregatesFilter']

    AND: List['TrafficDataScalarWhereWithAggregatesInputRecursive1']
    OR: List['TrafficDataScalarWhereWithAggregatesInputRecursive1']
    NOT: List['TrafficDataScalarWhereWithAggregatesInputRecursive1']


class TrafficDataScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """TrafficData arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    timestamp: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    location: Union['fields.Base64', 'types.BytesWithAggregatesFilter']
    density: Union[_int, 'types.IntWithAggregatesFilter']
    speed: Union[_float, 'types.FloatWithAggregatesFilter']

    AND: List['TrafficDataScalarWhereWithAggregatesInputRecursive2']
    OR: List['TrafficDataScalarWhereWithAggregatesInputRecursive2']
    NOT: List['TrafficDataScalarWhereWithAggregatesInputRecursive2']


class TrafficDataScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """TrafficData arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    timestamp: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    location: Union['fields.Base64', 'types.BytesWithAggregatesFilter']
    density: Union[_int, 'types.IntWithAggregatesFilter']
    speed: Union[_float, 'types.FloatWithAggregatesFilter']

    AND: List['TrafficDataScalarWhereWithAggregatesInputRecursive3']
    OR: List['TrafficDataScalarWhereWithAggregatesInputRecursive3']
    NOT: List['TrafficDataScalarWhereWithAggregatesInputRecursive3']


class TrafficDataScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """TrafficData arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    timestamp: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    location: Union['fields.Base64', 'types.BytesWithAggregatesFilter']
    density: Union[_int, 'types.IntWithAggregatesFilter']
    speed: Union[_float, 'types.FloatWithAggregatesFilter']

    AND: List['TrafficDataScalarWhereWithAggregatesInputRecursive4']
    OR: List['TrafficDataScalarWhereWithAggregatesInputRecursive4']
    NOT: List['TrafficDataScalarWhereWithAggregatesInputRecursive4']


class TrafficDataScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """TrafficData arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    timestamp: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    location: Union['fields.Base64', 'types.BytesWithAggregatesFilter']
    density: Union[_int, 'types.IntWithAggregatesFilter']
    speed: Union[_float, 'types.FloatWithAggregatesFilter']



class TrafficDataGroupByOutput(TypedDict, total=False):
    id: _str
    timestamp: datetime.datetime
    location: 'fields.Base64'
    density: _int
    speed: _float
    _sum: 'TrafficDataSumAggregateOutput'
    _avg: 'TrafficDataAvgAggregateOutput'
    _min: 'TrafficDataMinAggregateOutput'
    _max: 'TrafficDataMaxAggregateOutput'
    _count: 'TrafficDataCountAggregateOutput'


class TrafficDataAvgAggregateOutput(TypedDict, total=False):
    """TrafficData output for aggregating averages"""
    density: float
    speed: float


class TrafficDataSumAggregateOutput(TypedDict, total=False):
    """TrafficData output for aggregating sums"""
    density: _int
    speed: _float


class TrafficDataScalarAggregateOutput(TypedDict, total=False):
    """TrafficData output including scalar fields"""
    id: _str
    timestamp: datetime.datetime
    location: 'fields.Base64'
    density: _int
    speed: _float


TrafficDataMinAggregateOutput = TrafficDataScalarAggregateOutput
TrafficDataMaxAggregateOutput = TrafficDataScalarAggregateOutput


class TrafficDataMaxAggregateInput(TypedDict, total=False):
    """TrafficData input for aggregating by max"""
    id: bool
    timestamp: bool
    location: bool
    density: bool
    speed: bool


class TrafficDataMinAggregateInput(TypedDict, total=False):
    """TrafficData input for aggregating by min"""
    id: bool
    timestamp: bool
    location: bool
    density: bool
    speed: bool


class TrafficDataNumberAggregateInput(TypedDict, total=False):
    """TrafficData input for aggregating numbers"""
    density: bool
    speed: bool


TrafficDataAvgAggregateInput = TrafficDataNumberAggregateInput
TrafficDataSumAggregateInput = TrafficDataNumberAggregateInput


TrafficDataCountAggregateInput = TypedDict(
    'TrafficDataCountAggregateInput',
    {
        'id': bool,
        'timestamp': bool,
        'location': bool,
        'density': bool,
        'speed': bool,
        '_all': bool,
    },
    total=False,
)

TrafficDataCountAggregateOutput = TypedDict(
    'TrafficDataCountAggregateOutput',
    {
        'id': int,
        'timestamp': int,
        'location': int,
        'density': int,
        'speed': int,
        '_all': int,
    },
    total=False,
)


TrafficDataKeys = Literal[
    'id',
    'timestamp',
    'location',
    'density',
    'speed',
]
TrafficDataScalarFieldKeys = Literal[
    'id',
    'timestamp',
    'location',
    'density',
    'speed',
]
TrafficDataScalarFieldKeysT = TypeVar('TrafficDataScalarFieldKeysT', bound=TrafficDataScalarFieldKeys)

TrafficDataRelationalFieldKeys = _NoneType

# TrafficLight types

class TrafficLightOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the TrafficLight create method"""
    id: _str
    recommendedState: Optional[_str]


class TrafficLightCreateInput(TrafficLightOptionalCreateInput):
    """Required arguments to the TrafficLight create method"""
    location: 'fields.Base64'
    currentState: _str
    redStateDuration: _int
    greenStateDuration: _int
    createdAt: datetime.datetime


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class TrafficLightOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the TrafficLight create method, without relations"""
    id: _str
    recommendedState: Optional[_str]


class TrafficLightCreateWithoutRelationsInput(TrafficLightOptionalCreateWithoutRelationsInput):
    """Required arguments to the TrafficLight create method, without relations"""
    location: 'fields.Base64'
    currentState: _str
    redStateDuration: _int
    greenStateDuration: _int
    createdAt: datetime.datetime

class TrafficLightConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'TrafficLightCreateWithoutRelationsInput'
    where: 'TrafficLightWhereUniqueInput'

class TrafficLightCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'TrafficLightCreateWithoutRelationsInput'
    connect: 'TrafficLightWhereUniqueInput'
    connect_or_create: 'TrafficLightConnectOrCreateWithoutRelationsInput'


class TrafficLightCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['TrafficLightCreateWithoutRelationsInput', List['TrafficLightCreateWithoutRelationsInput']]
    connect: Union['TrafficLightWhereUniqueInput', List['TrafficLightWhereUniqueInput']]
    connect_or_create: Union['TrafficLightConnectOrCreateWithoutRelationsInput', List['TrafficLightConnectOrCreateWithoutRelationsInput']]

_TrafficLightWhereUnique_id_Input = TypedDict(
    '_TrafficLightWhereUnique_id_Input',
    {
        'id': '_str',
    },
    total=True
)

TrafficLightWhereUniqueInput = _TrafficLightWhereUnique_id_Input


class TrafficLightUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: _str
    location: 'fields.Base64'
    currentState: _str
    redStateDuration: Union[AtomicIntInput, _int]
    greenStateDuration: Union[AtomicIntInput, _int]
    recommendedState: Optional[_str]
    createdAt: datetime.datetime


class TrafficLightUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: _str
    location: 'fields.Base64'
    currentState: _str
    redStateDuration: Union[AtomicIntInput, _int]
    greenStateDuration: Union[AtomicIntInput, _int]
    recommendedState: Optional[_str]
    createdAt: datetime.datetime


class TrafficLightUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['TrafficLightCreateWithoutRelationsInput']
    connect: List['TrafficLightWhereUniqueInput']
    connect_or_create: List['TrafficLightConnectOrCreateWithoutRelationsInput']
    set: List['TrafficLightWhereUniqueInput']
    disconnect: List['TrafficLightWhereUniqueInput']
    delete: List['TrafficLightWhereUniqueInput']

    # TODO
    # update: List['TrafficLightUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['TrafficLightUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['TrafficLightScalarWhereInput']
    # upsert: List['TrafficLightUpserteWithWhereUniqueWithoutRelationsInput']


class TrafficLightUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'TrafficLightCreateWithoutRelationsInput'
    connect: 'TrafficLightWhereUniqueInput'
    connect_or_create: 'TrafficLightConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'TrafficLightUpdateInput'
    # upsert: 'TrafficLightUpsertWithoutRelationsInput'


class TrafficLightUpsertInput(TypedDict):
    create: 'TrafficLightCreateInput'
    update: 'TrafficLightUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_TrafficLight_id_OrderByInput = TypedDict(
    '_TrafficLight_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_TrafficLight_location_OrderByInput = TypedDict(
    '_TrafficLight_location_OrderByInput',
    {
        'location': 'SortOrder',
    },
    total=True
)

_TrafficLight_currentState_OrderByInput = TypedDict(
    '_TrafficLight_currentState_OrderByInput',
    {
        'currentState': 'SortOrder',
    },
    total=True
)

_TrafficLight_redStateDuration_OrderByInput = TypedDict(
    '_TrafficLight_redStateDuration_OrderByInput',
    {
        'redStateDuration': 'SortOrder',
    },
    total=True
)

_TrafficLight_greenStateDuration_OrderByInput = TypedDict(
    '_TrafficLight_greenStateDuration_OrderByInput',
    {
        'greenStateDuration': 'SortOrder',
    },
    total=True
)

_TrafficLight_recommendedState_OrderByInput = TypedDict(
    '_TrafficLight_recommendedState_OrderByInput',
    {
        'recommendedState': 'SortOrder',
    },
    total=True
)

_TrafficLight_createdAt_OrderByInput = TypedDict(
    '_TrafficLight_createdAt_OrderByInput',
    {
        'createdAt': 'SortOrder',
    },
    total=True
)

_TrafficLight_RelevanceInner = TypedDict(
    '_TrafficLight_RelevanceInner',
    {
        'fields': 'List[TrafficLightScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_TrafficLight_RelevanceOrderByInput = TypedDict(
    '_TrafficLight_RelevanceOrderByInput',
    {
        '_relevance': '_TrafficLight_RelevanceInner',
    },
    total=True
)

TrafficLightOrderByInput = Union[
    '_TrafficLight_id_OrderByInput',
    '_TrafficLight_location_OrderByInput',
    '_TrafficLight_currentState_OrderByInput',
    '_TrafficLight_redStateDuration_OrderByInput',
    '_TrafficLight_greenStateDuration_OrderByInput',
    '_TrafficLight_recommendedState_OrderByInput',
    '_TrafficLight_createdAt_OrderByInput',
    '_TrafficLight_RelevanceOrderByInput',
]



# recursive TrafficLight types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

TrafficLightRelationFilter = TypedDict(
    'TrafficLightRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class TrafficLightListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class TrafficLightInclude(TypedDict, total=False):
    """TrafficLight relational arguments"""


    

class AchievementIncludeFromTrafficLight(TypedDict, total=False):
    """Relational arguments for TrafficLight"""


class AchievementIncludeFromTrafficLightRecursive1(TypedDict, total=False):
    """Relational arguments for TrafficLight"""


class AchievementIncludeFromTrafficLightRecursive2(TypedDict, total=False):
    """Relational arguments for TrafficLight"""


class AchievementIncludeFromTrafficLightRecursive3(TypedDict, total=False):
    """Relational arguments for TrafficLight"""


class AchievementIncludeFromTrafficLightRecursive4(TypedDict, total=False):
    """Relational arguments for TrafficLight"""

    

class AchievementArgsFromTrafficLight(TypedDict, total=False):
    """Arguments for TrafficLight"""
    include: 'AchievementIncludeFromAchievementRecursive1'


class AchievementArgsFromTrafficLightRecursive1(TypedDict, total=False):
    """Arguments for TrafficLight"""
    include: 'AchievementIncludeFromAchievementRecursive2'


class AchievementArgsFromTrafficLightRecursive2(TypedDict, total=False):
    """Arguments for TrafficLight"""
    include: 'AchievementIncludeFromAchievementRecursive3'


class AchievementArgsFromTrafficLightRecursive3(TypedDict, total=False):
    """Arguments for TrafficLight"""
    include: 'AchievementIncludeFromAchievementRecursive4'


class AchievementArgsFromTrafficLightRecursive4(TypedDict, total=False):
    """Arguments for TrafficLight"""
    
    

class FindManyAchievementArgsFromTrafficLight(TypedDict, total=False):
    """Arguments for TrafficLight"""
    take: int
    skip: int
    order_by: Union['AchievementOrderByInput', List['AchievementOrderByInput']]
    where: 'AchievementWhereInput'
    cursor: 'AchievementWhereUniqueInput'
    distinct: List['AchievementScalarFieldKeys']
    include: 'AchievementIncludeFromAchievementRecursive1'


class FindManyAchievementArgsFromTrafficLightRecursive1(TypedDict, total=False):
    """Arguments for TrafficLight"""
    take: int
    skip: int
    order_by: Union['AchievementOrderByInput', List['AchievementOrderByInput']]
    where: 'AchievementWhereInput'
    cursor: 'AchievementWhereUniqueInput'
    distinct: List['AchievementScalarFieldKeys']
    include: 'AchievementIncludeFromAchievementRecursive2'


class FindManyAchievementArgsFromTrafficLightRecursive2(TypedDict, total=False):
    """Arguments for TrafficLight"""
    take: int
    skip: int
    order_by: Union['AchievementOrderByInput', List['AchievementOrderByInput']]
    where: 'AchievementWhereInput'
    cursor: 'AchievementWhereUniqueInput'
    distinct: List['AchievementScalarFieldKeys']
    include: 'AchievementIncludeFromAchievementRecursive3'


class FindManyAchievementArgsFromTrafficLightRecursive3(TypedDict, total=False):
    """Arguments for TrafficLight"""
    take: int
    skip: int
    order_by: Union['AchievementOrderByInput', List['AchievementOrderByInput']]
    where: 'AchievementWhereInput'
    cursor: 'AchievementWhereUniqueInput'
    distinct: List['AchievementScalarFieldKeys']
    include: 'AchievementIncludeFromAchievementRecursive4'


class FindManyAchievementArgsFromTrafficLightRecursive4(TypedDict, total=False):
    """Arguments for TrafficLight"""
    take: int
    skip: int
    order_by: Union['AchievementOrderByInput', List['AchievementOrderByInput']]
    where: 'AchievementWhereInput'
    cursor: 'AchievementWhereUniqueInput'
    distinct: List['AchievementScalarFieldKeys']
    
    

class CameraIncludeFromTrafficLight(TypedDict, total=False):
    """Relational arguments for TrafficLight"""


class CameraIncludeFromTrafficLightRecursive1(TypedDict, total=False):
    """Relational arguments for TrafficLight"""


class CameraIncludeFromTrafficLightRecursive2(TypedDict, total=False):
    """Relational arguments for TrafficLight"""


class CameraIncludeFromTrafficLightRecursive3(TypedDict, total=False):
    """Relational arguments for TrafficLight"""


class CameraIncludeFromTrafficLightRecursive4(TypedDict, total=False):
    """Relational arguments for TrafficLight"""

    

class CameraArgsFromTrafficLight(TypedDict, total=False):
    """Arguments for TrafficLight"""
    include: 'CameraIncludeFromCameraRecursive1'


class CameraArgsFromTrafficLightRecursive1(TypedDict, total=False):
    """Arguments for TrafficLight"""
    include: 'CameraIncludeFromCameraRecursive2'


class CameraArgsFromTrafficLightRecursive2(TypedDict, total=False):
    """Arguments for TrafficLight"""
    include: 'CameraIncludeFromCameraRecursive3'


class CameraArgsFromTrafficLightRecursive3(TypedDict, total=False):
    """Arguments for TrafficLight"""
    include: 'CameraIncludeFromCameraRecursive4'


class CameraArgsFromTrafficLightRecursive4(TypedDict, total=False):
    """Arguments for TrafficLight"""
    
    

class FindManyCameraArgsFromTrafficLight(TypedDict, total=False):
    """Arguments for TrafficLight"""
    take: int
    skip: int
    order_by: Union['CameraOrderByInput', List['CameraOrderByInput']]
    where: 'CameraWhereInput'
    cursor: 'CameraWhereUniqueInput'
    distinct: List['CameraScalarFieldKeys']
    include: 'CameraIncludeFromCameraRecursive1'


class FindManyCameraArgsFromTrafficLightRecursive1(TypedDict, total=False):
    """Arguments for TrafficLight"""
    take: int
    skip: int
    order_by: Union['CameraOrderByInput', List['CameraOrderByInput']]
    where: 'CameraWhereInput'
    cursor: 'CameraWhereUniqueInput'
    distinct: List['CameraScalarFieldKeys']
    include: 'CameraIncludeFromCameraRecursive2'


class FindManyCameraArgsFromTrafficLightRecursive2(TypedDict, total=False):
    """Arguments for TrafficLight"""
    take: int
    skip: int
    order_by: Union['CameraOrderByInput', List['CameraOrderByInput']]
    where: 'CameraWhereInput'
    cursor: 'CameraWhereUniqueInput'
    distinct: List['CameraScalarFieldKeys']
    include: 'CameraIncludeFromCameraRecursive3'


class FindManyCameraArgsFromTrafficLightRecursive3(TypedDict, total=False):
    """Arguments for TrafficLight"""
    take: int
    skip: int
    order_by: Union['CameraOrderByInput', List['CameraOrderByInput']]
    where: 'CameraWhereInput'
    cursor: 'CameraWhereUniqueInput'
    distinct: List['CameraScalarFieldKeys']
    include: 'CameraIncludeFromCameraRecursive4'


class FindManyCameraArgsFromTrafficLightRecursive4(TypedDict, total=False):
    """Arguments for TrafficLight"""
    take: int
    skip: int
    order_by: Union['CameraOrderByInput', List['CameraOrderByInput']]
    where: 'CameraWhereInput'
    cursor: 'CameraWhereUniqueInput'
    distinct: List['CameraScalarFieldKeys']
    
    

class EffectivenessIncludeFromTrafficLight(TypedDict, total=False):
    """Relational arguments for TrafficLight"""


class EffectivenessIncludeFromTrafficLightRecursive1(TypedDict, total=False):
    """Relational arguments for TrafficLight"""


class EffectivenessIncludeFromTrafficLightRecursive2(TypedDict, total=False):
    """Relational arguments for TrafficLight"""


class EffectivenessIncludeFromTrafficLightRecursive3(TypedDict, total=False):
    """Relational arguments for TrafficLight"""


class EffectivenessIncludeFromTrafficLightRecursive4(TypedDict, total=False):
    """Relational arguments for TrafficLight"""

    

class EffectivenessArgsFromTrafficLight(TypedDict, total=False):
    """Arguments for TrafficLight"""
    include: 'EffectivenessIncludeFromEffectivenessRecursive1'


class EffectivenessArgsFromTrafficLightRecursive1(TypedDict, total=False):
    """Arguments for TrafficLight"""
    include: 'EffectivenessIncludeFromEffectivenessRecursive2'


class EffectivenessArgsFromTrafficLightRecursive2(TypedDict, total=False):
    """Arguments for TrafficLight"""
    include: 'EffectivenessIncludeFromEffectivenessRecursive3'


class EffectivenessArgsFromTrafficLightRecursive3(TypedDict, total=False):
    """Arguments for TrafficLight"""
    include: 'EffectivenessIncludeFromEffectivenessRecursive4'


class EffectivenessArgsFromTrafficLightRecursive4(TypedDict, total=False):
    """Arguments for TrafficLight"""
    
    

class FindManyEffectivenessArgsFromTrafficLight(TypedDict, total=False):
    """Arguments for TrafficLight"""
    take: int
    skip: int
    order_by: Union['EffectivenessOrderByInput', List['EffectivenessOrderByInput']]
    where: 'EffectivenessWhereInput'
    cursor: 'EffectivenessWhereUniqueInput'
    distinct: List['EffectivenessScalarFieldKeys']
    include: 'EffectivenessIncludeFromEffectivenessRecursive1'


class FindManyEffectivenessArgsFromTrafficLightRecursive1(TypedDict, total=False):
    """Arguments for TrafficLight"""
    take: int
    skip: int
    order_by: Union['EffectivenessOrderByInput', List['EffectivenessOrderByInput']]
    where: 'EffectivenessWhereInput'
    cursor: 'EffectivenessWhereUniqueInput'
    distinct: List['EffectivenessScalarFieldKeys']
    include: 'EffectivenessIncludeFromEffectivenessRecursive2'


class FindManyEffectivenessArgsFromTrafficLightRecursive2(TypedDict, total=False):
    """Arguments for TrafficLight"""
    take: int
    skip: int
    order_by: Union['EffectivenessOrderByInput', List['EffectivenessOrderByInput']]
    where: 'EffectivenessWhereInput'
    cursor: 'EffectivenessWhereUniqueInput'
    distinct: List['EffectivenessScalarFieldKeys']
    include: 'EffectivenessIncludeFromEffectivenessRecursive3'


class FindManyEffectivenessArgsFromTrafficLightRecursive3(TypedDict, total=False):
    """Arguments for TrafficLight"""
    take: int
    skip: int
    order_by: Union['EffectivenessOrderByInput', List['EffectivenessOrderByInput']]
    where: 'EffectivenessWhereInput'
    cursor: 'EffectivenessWhereUniqueInput'
    distinct: List['EffectivenessScalarFieldKeys']
    include: 'EffectivenessIncludeFromEffectivenessRecursive4'


class FindManyEffectivenessArgsFromTrafficLightRecursive4(TypedDict, total=False):
    """Arguments for TrafficLight"""
    take: int
    skip: int
    order_by: Union['EffectivenessOrderByInput', List['EffectivenessOrderByInput']]
    where: 'EffectivenessWhereInput'
    cursor: 'EffectivenessWhereUniqueInput'
    distinct: List['EffectivenessScalarFieldKeys']
    
    

class EnvironmentalDataIncludeFromTrafficLight(TypedDict, total=False):
    """Relational arguments for TrafficLight"""


class EnvironmentalDataIncludeFromTrafficLightRecursive1(TypedDict, total=False):
    """Relational arguments for TrafficLight"""


class EnvironmentalDataIncludeFromTrafficLightRecursive2(TypedDict, total=False):
    """Relational arguments for TrafficLight"""


class EnvironmentalDataIncludeFromTrafficLightRecursive3(TypedDict, total=False):
    """Relational arguments for TrafficLight"""


class EnvironmentalDataIncludeFromTrafficLightRecursive4(TypedDict, total=False):
    """Relational arguments for TrafficLight"""

    

class EnvironmentalDataArgsFromTrafficLight(TypedDict, total=False):
    """Arguments for TrafficLight"""
    include: 'EnvironmentalDataIncludeFromEnvironmentalDataRecursive1'


class EnvironmentalDataArgsFromTrafficLightRecursive1(TypedDict, total=False):
    """Arguments for TrafficLight"""
    include: 'EnvironmentalDataIncludeFromEnvironmentalDataRecursive2'


class EnvironmentalDataArgsFromTrafficLightRecursive2(TypedDict, total=False):
    """Arguments for TrafficLight"""
    include: 'EnvironmentalDataIncludeFromEnvironmentalDataRecursive3'


class EnvironmentalDataArgsFromTrafficLightRecursive3(TypedDict, total=False):
    """Arguments for TrafficLight"""
    include: 'EnvironmentalDataIncludeFromEnvironmentalDataRecursive4'


class EnvironmentalDataArgsFromTrafficLightRecursive4(TypedDict, total=False):
    """Arguments for TrafficLight"""
    
    

class FindManyEnvironmentalDataArgsFromTrafficLight(TypedDict, total=False):
    """Arguments for TrafficLight"""
    take: int
    skip: int
    order_by: Union['EnvironmentalDataOrderByInput', List['EnvironmentalDataOrderByInput']]
    where: 'EnvironmentalDataWhereInput'
    cursor: 'EnvironmentalDataWhereUniqueInput'
    distinct: List['EnvironmentalDataScalarFieldKeys']
    include: 'EnvironmentalDataIncludeFromEnvironmentalDataRecursive1'


class FindManyEnvironmentalDataArgsFromTrafficLightRecursive1(TypedDict, total=False):
    """Arguments for TrafficLight"""
    take: int
    skip: int
    order_by: Union['EnvironmentalDataOrderByInput', List['EnvironmentalDataOrderByInput']]
    where: 'EnvironmentalDataWhereInput'
    cursor: 'EnvironmentalDataWhereUniqueInput'
    distinct: List['EnvironmentalDataScalarFieldKeys']
    include: 'EnvironmentalDataIncludeFromEnvironmentalDataRecursive2'


class FindManyEnvironmentalDataArgsFromTrafficLightRecursive2(TypedDict, total=False):
    """Arguments for TrafficLight"""
    take: int
    skip: int
    order_by: Union['EnvironmentalDataOrderByInput', List['EnvironmentalDataOrderByInput']]
    where: 'EnvironmentalDataWhereInput'
    cursor: 'EnvironmentalDataWhereUniqueInput'
    distinct: List['EnvironmentalDataScalarFieldKeys']
    include: 'EnvironmentalDataIncludeFromEnvironmentalDataRecursive3'


class FindManyEnvironmentalDataArgsFromTrafficLightRecursive3(TypedDict, total=False):
    """Arguments for TrafficLight"""
    take: int
    skip: int
    order_by: Union['EnvironmentalDataOrderByInput', List['EnvironmentalDataOrderByInput']]
    where: 'EnvironmentalDataWhereInput'
    cursor: 'EnvironmentalDataWhereUniqueInput'
    distinct: List['EnvironmentalDataScalarFieldKeys']
    include: 'EnvironmentalDataIncludeFromEnvironmentalDataRecursive4'


class FindManyEnvironmentalDataArgsFromTrafficLightRecursive4(TypedDict, total=False):
    """Arguments for TrafficLight"""
    take: int
    skip: int
    order_by: Union['EnvironmentalDataOrderByInput', List['EnvironmentalDataOrderByInput']]
    where: 'EnvironmentalDataWhereInput'
    cursor: 'EnvironmentalDataWhereUniqueInput'
    distinct: List['EnvironmentalDataScalarFieldKeys']
    
    

class EventIncludeFromTrafficLight(TypedDict, total=False):
    """Relational arguments for TrafficLight"""


class EventIncludeFromTrafficLightRecursive1(TypedDict, total=False):
    """Relational arguments for TrafficLight"""


class EventIncludeFromTrafficLightRecursive2(TypedDict, total=False):
    """Relational arguments for TrafficLight"""


class EventIncludeFromTrafficLightRecursive3(TypedDict, total=False):
    """Relational arguments for TrafficLight"""


class EventIncludeFromTrafficLightRecursive4(TypedDict, total=False):
    """Relational arguments for TrafficLight"""

    

class EventArgsFromTrafficLight(TypedDict, total=False):
    """Arguments for TrafficLight"""
    include: 'EventIncludeFromEventRecursive1'


class EventArgsFromTrafficLightRecursive1(TypedDict, total=False):
    """Arguments for TrafficLight"""
    include: 'EventIncludeFromEventRecursive2'


class EventArgsFromTrafficLightRecursive2(TypedDict, total=False):
    """Arguments for TrafficLight"""
    include: 'EventIncludeFromEventRecursive3'


class EventArgsFromTrafficLightRecursive3(TypedDict, total=False):
    """Arguments for TrafficLight"""
    include: 'EventIncludeFromEventRecursive4'


class EventArgsFromTrafficLightRecursive4(TypedDict, total=False):
    """Arguments for TrafficLight"""
    
    

class FindManyEventArgsFromTrafficLight(TypedDict, total=False):
    """Arguments for TrafficLight"""
    take: int
    skip: int
    order_by: Union['EventOrderByInput', List['EventOrderByInput']]
    where: 'EventWhereInput'
    cursor: 'EventWhereUniqueInput'
    distinct: List['EventScalarFieldKeys']
    include: 'EventIncludeFromEventRecursive1'


class FindManyEventArgsFromTrafficLightRecursive1(TypedDict, total=False):
    """Arguments for TrafficLight"""
    take: int
    skip: int
    order_by: Union['EventOrderByInput', List['EventOrderByInput']]
    where: 'EventWhereInput'
    cursor: 'EventWhereUniqueInput'
    distinct: List['EventScalarFieldKeys']
    include: 'EventIncludeFromEventRecursive2'


class FindManyEventArgsFromTrafficLightRecursive2(TypedDict, total=False):
    """Arguments for TrafficLight"""
    take: int
    skip: int
    order_by: Union['EventOrderByInput', List['EventOrderByInput']]
    where: 'EventWhereInput'
    cursor: 'EventWhereUniqueInput'
    distinct: List['EventScalarFieldKeys']
    include: 'EventIncludeFromEventRecursive3'


class FindManyEventArgsFromTrafficLightRecursive3(TypedDict, total=False):
    """Arguments for TrafficLight"""
    take: int
    skip: int
    order_by: Union['EventOrderByInput', List['EventOrderByInput']]
    where: 'EventWhereInput'
    cursor: 'EventWhereUniqueInput'
    distinct: List['EventScalarFieldKeys']
    include: 'EventIncludeFromEventRecursive4'


class FindManyEventArgsFromTrafficLightRecursive4(TypedDict, total=False):
    """Arguments for TrafficLight"""
    take: int
    skip: int
    order_by: Union['EventOrderByInput', List['EventOrderByInput']]
    where: 'EventWhereInput'
    cursor: 'EventWhereUniqueInput'
    distinct: List['EventScalarFieldKeys']
    
    

class ForecastIncludeFromTrafficLight(TypedDict, total=False):
    """Relational arguments for TrafficLight"""


class ForecastIncludeFromTrafficLightRecursive1(TypedDict, total=False):
    """Relational arguments for TrafficLight"""


class ForecastIncludeFromTrafficLightRecursive2(TypedDict, total=False):
    """Relational arguments for TrafficLight"""


class ForecastIncludeFromTrafficLightRecursive3(TypedDict, total=False):
    """Relational arguments for TrafficLight"""


class ForecastIncludeFromTrafficLightRecursive4(TypedDict, total=False):
    """Relational arguments for TrafficLight"""

    

class ForecastArgsFromTrafficLight(TypedDict, total=False):
    """Arguments for TrafficLight"""
    include: 'ForecastIncludeFromForecastRecursive1'


class ForecastArgsFromTrafficLightRecursive1(TypedDict, total=False):
    """Arguments for TrafficLight"""
    include: 'ForecastIncludeFromForecastRecursive2'


class ForecastArgsFromTrafficLightRecursive2(TypedDict, total=False):
    """Arguments for TrafficLight"""
    include: 'ForecastIncludeFromForecastRecursive3'


class ForecastArgsFromTrafficLightRecursive3(TypedDict, total=False):
    """Arguments for TrafficLight"""
    include: 'ForecastIncludeFromForecastRecursive4'


class ForecastArgsFromTrafficLightRecursive4(TypedDict, total=False):
    """Arguments for TrafficLight"""
    
    

class FindManyForecastArgsFromTrafficLight(TypedDict, total=False):
    """Arguments for TrafficLight"""
    take: int
    skip: int
    order_by: Union['ForecastOrderByInput', List['ForecastOrderByInput']]
    where: 'ForecastWhereInput'
    cursor: 'ForecastWhereUniqueInput'
    distinct: List['ForecastScalarFieldKeys']
    include: 'ForecastIncludeFromForecastRecursive1'


class FindManyForecastArgsFromTrafficLightRecursive1(TypedDict, total=False):
    """Arguments for TrafficLight"""
    take: int
    skip: int
    order_by: Union['ForecastOrderByInput', List['ForecastOrderByInput']]
    where: 'ForecastWhereInput'
    cursor: 'ForecastWhereUniqueInput'
    distinct: List['ForecastScalarFieldKeys']
    include: 'ForecastIncludeFromForecastRecursive2'


class FindManyForecastArgsFromTrafficLightRecursive2(TypedDict, total=False):
    """Arguments for TrafficLight"""
    take: int
    skip: int
    order_by: Union['ForecastOrderByInput', List['ForecastOrderByInput']]
    where: 'ForecastWhereInput'
    cursor: 'ForecastWhereUniqueInput'
    distinct: List['ForecastScalarFieldKeys']
    include: 'ForecastIncludeFromForecastRecursive3'


class FindManyForecastArgsFromTrafficLightRecursive3(TypedDict, total=False):
    """Arguments for TrafficLight"""
    take: int
    skip: int
    order_by: Union['ForecastOrderByInput', List['ForecastOrderByInput']]
    where: 'ForecastWhereInput'
    cursor: 'ForecastWhereUniqueInput'
    distinct: List['ForecastScalarFieldKeys']
    include: 'ForecastIncludeFromForecastRecursive4'


class FindManyForecastArgsFromTrafficLightRecursive4(TypedDict, total=False):
    """Arguments for TrafficLight"""
    take: int
    skip: int
    order_by: Union['ForecastOrderByInput', List['ForecastOrderByInput']]
    where: 'ForecastWhereInput'
    cursor: 'ForecastWhereUniqueInput'
    distinct: List['ForecastScalarFieldKeys']
    
    

class IncidentIncludeFromTrafficLight(TypedDict, total=False):
    """Relational arguments for TrafficLight"""


class IncidentIncludeFromTrafficLightRecursive1(TypedDict, total=False):
    """Relational arguments for TrafficLight"""


class IncidentIncludeFromTrafficLightRecursive2(TypedDict, total=False):
    """Relational arguments for TrafficLight"""


class IncidentIncludeFromTrafficLightRecursive3(TypedDict, total=False):
    """Relational arguments for TrafficLight"""


class IncidentIncludeFromTrafficLightRecursive4(TypedDict, total=False):
    """Relational arguments for TrafficLight"""

    

class IncidentArgsFromTrafficLight(TypedDict, total=False):
    """Arguments for TrafficLight"""
    include: 'IncidentIncludeFromIncidentRecursive1'


class IncidentArgsFromTrafficLightRecursive1(TypedDict, total=False):
    """Arguments for TrafficLight"""
    include: 'IncidentIncludeFromIncidentRecursive2'


class IncidentArgsFromTrafficLightRecursive2(TypedDict, total=False):
    """Arguments for TrafficLight"""
    include: 'IncidentIncludeFromIncidentRecursive3'


class IncidentArgsFromTrafficLightRecursive3(TypedDict, total=False):
    """Arguments for TrafficLight"""
    include: 'IncidentIncludeFromIncidentRecursive4'


class IncidentArgsFromTrafficLightRecursive4(TypedDict, total=False):
    """Arguments for TrafficLight"""
    
    

class FindManyIncidentArgsFromTrafficLight(TypedDict, total=False):
    """Arguments for TrafficLight"""
    take: int
    skip: int
    order_by: Union['IncidentOrderByInput', List['IncidentOrderByInput']]
    where: 'IncidentWhereInput'
    cursor: 'IncidentWhereUniqueInput'
    distinct: List['IncidentScalarFieldKeys']
    include: 'IncidentIncludeFromIncidentRecursive1'


class FindManyIncidentArgsFromTrafficLightRecursive1(TypedDict, total=False):
    """Arguments for TrafficLight"""
    take: int
    skip: int
    order_by: Union['IncidentOrderByInput', List['IncidentOrderByInput']]
    where: 'IncidentWhereInput'
    cursor: 'IncidentWhereUniqueInput'
    distinct: List['IncidentScalarFieldKeys']
    include: 'IncidentIncludeFromIncidentRecursive2'


class FindManyIncidentArgsFromTrafficLightRecursive2(TypedDict, total=False):
    """Arguments for TrafficLight"""
    take: int
    skip: int
    order_by: Union['IncidentOrderByInput', List['IncidentOrderByInput']]
    where: 'IncidentWhereInput'
    cursor: 'IncidentWhereUniqueInput'
    distinct: List['IncidentScalarFieldKeys']
    include: 'IncidentIncludeFromIncidentRecursive3'


class FindManyIncidentArgsFromTrafficLightRecursive3(TypedDict, total=False):
    """Arguments for TrafficLight"""
    take: int
    skip: int
    order_by: Union['IncidentOrderByInput', List['IncidentOrderByInput']]
    where: 'IncidentWhereInput'
    cursor: 'IncidentWhereUniqueInput'
    distinct: List['IncidentScalarFieldKeys']
    include: 'IncidentIncludeFromIncidentRecursive4'


class FindManyIncidentArgsFromTrafficLightRecursive4(TypedDict, total=False):
    """Arguments for TrafficLight"""
    take: int
    skip: int
    order_by: Union['IncidentOrderByInput', List['IncidentOrderByInput']]
    where: 'IncidentWhereInput'
    cursor: 'IncidentWhereUniqueInput'
    distinct: List['IncidentScalarFieldKeys']
    
    

class NotificationIncludeFromTrafficLight(TypedDict, total=False):
    """Relational arguments for TrafficLight"""


class NotificationIncludeFromTrafficLightRecursive1(TypedDict, total=False):
    """Relational arguments for TrafficLight"""


class NotificationIncludeFromTrafficLightRecursive2(TypedDict, total=False):
    """Relational arguments for TrafficLight"""


class NotificationIncludeFromTrafficLightRecursive3(TypedDict, total=False):
    """Relational arguments for TrafficLight"""


class NotificationIncludeFromTrafficLightRecursive4(TypedDict, total=False):
    """Relational arguments for TrafficLight"""

    

class NotificationArgsFromTrafficLight(TypedDict, total=False):
    """Arguments for TrafficLight"""
    include: 'NotificationIncludeFromNotificationRecursive1'


class NotificationArgsFromTrafficLightRecursive1(TypedDict, total=False):
    """Arguments for TrafficLight"""
    include: 'NotificationIncludeFromNotificationRecursive2'


class NotificationArgsFromTrafficLightRecursive2(TypedDict, total=False):
    """Arguments for TrafficLight"""
    include: 'NotificationIncludeFromNotificationRecursive3'


class NotificationArgsFromTrafficLightRecursive3(TypedDict, total=False):
    """Arguments for TrafficLight"""
    include: 'NotificationIncludeFromNotificationRecursive4'


class NotificationArgsFromTrafficLightRecursive4(TypedDict, total=False):
    """Arguments for TrafficLight"""
    
    

class FindManyNotificationArgsFromTrafficLight(TypedDict, total=False):
    """Arguments for TrafficLight"""
    take: int
    skip: int
    order_by: Union['NotificationOrderByInput', List['NotificationOrderByInput']]
    where: 'NotificationWhereInput'
    cursor: 'NotificationWhereUniqueInput'
    distinct: List['NotificationScalarFieldKeys']
    include: 'NotificationIncludeFromNotificationRecursive1'


class FindManyNotificationArgsFromTrafficLightRecursive1(TypedDict, total=False):
    """Arguments for TrafficLight"""
    take: int
    skip: int
    order_by: Union['NotificationOrderByInput', List['NotificationOrderByInput']]
    where: 'NotificationWhereInput'
    cursor: 'NotificationWhereUniqueInput'
    distinct: List['NotificationScalarFieldKeys']
    include: 'NotificationIncludeFromNotificationRecursive2'


class FindManyNotificationArgsFromTrafficLightRecursive2(TypedDict, total=False):
    """Arguments for TrafficLight"""
    take: int
    skip: int
    order_by: Union['NotificationOrderByInput', List['NotificationOrderByInput']]
    where: 'NotificationWhereInput'
    cursor: 'NotificationWhereUniqueInput'
    distinct: List['NotificationScalarFieldKeys']
    include: 'NotificationIncludeFromNotificationRecursive3'


class FindManyNotificationArgsFromTrafficLightRecursive3(TypedDict, total=False):
    """Arguments for TrafficLight"""
    take: int
    skip: int
    order_by: Union['NotificationOrderByInput', List['NotificationOrderByInput']]
    where: 'NotificationWhereInput'
    cursor: 'NotificationWhereUniqueInput'
    distinct: List['NotificationScalarFieldKeys']
    include: 'NotificationIncludeFromNotificationRecursive4'


class FindManyNotificationArgsFromTrafficLightRecursive4(TypedDict, total=False):
    """Arguments for TrafficLight"""
    take: int
    skip: int
    order_by: Union['NotificationOrderByInput', List['NotificationOrderByInput']]
    where: 'NotificationWhereInput'
    cursor: 'NotificationWhereUniqueInput'
    distinct: List['NotificationScalarFieldKeys']
    
    

class ScenarioIncludeFromTrafficLight(TypedDict, total=False):
    """Relational arguments for TrafficLight"""


class ScenarioIncludeFromTrafficLightRecursive1(TypedDict, total=False):
    """Relational arguments for TrafficLight"""


class ScenarioIncludeFromTrafficLightRecursive2(TypedDict, total=False):
    """Relational arguments for TrafficLight"""


class ScenarioIncludeFromTrafficLightRecursive3(TypedDict, total=False):
    """Relational arguments for TrafficLight"""


class ScenarioIncludeFromTrafficLightRecursive4(TypedDict, total=False):
    """Relational arguments for TrafficLight"""

    

class ScenarioArgsFromTrafficLight(TypedDict, total=False):
    """Arguments for TrafficLight"""
    include: 'ScenarioIncludeFromScenarioRecursive1'


class ScenarioArgsFromTrafficLightRecursive1(TypedDict, total=False):
    """Arguments for TrafficLight"""
    include: 'ScenarioIncludeFromScenarioRecursive2'


class ScenarioArgsFromTrafficLightRecursive2(TypedDict, total=False):
    """Arguments for TrafficLight"""
    include: 'ScenarioIncludeFromScenarioRecursive3'


class ScenarioArgsFromTrafficLightRecursive3(TypedDict, total=False):
    """Arguments for TrafficLight"""
    include: 'ScenarioIncludeFromScenarioRecursive4'


class ScenarioArgsFromTrafficLightRecursive4(TypedDict, total=False):
    """Arguments for TrafficLight"""
    
    

class FindManyScenarioArgsFromTrafficLight(TypedDict, total=False):
    """Arguments for TrafficLight"""
    take: int
    skip: int
    order_by: Union['ScenarioOrderByInput', List['ScenarioOrderByInput']]
    where: 'ScenarioWhereInput'
    cursor: 'ScenarioWhereUniqueInput'
    distinct: List['ScenarioScalarFieldKeys']
    include: 'ScenarioIncludeFromScenarioRecursive1'


class FindManyScenarioArgsFromTrafficLightRecursive1(TypedDict, total=False):
    """Arguments for TrafficLight"""
    take: int
    skip: int
    order_by: Union['ScenarioOrderByInput', List['ScenarioOrderByInput']]
    where: 'ScenarioWhereInput'
    cursor: 'ScenarioWhereUniqueInput'
    distinct: List['ScenarioScalarFieldKeys']
    include: 'ScenarioIncludeFromScenarioRecursive2'


class FindManyScenarioArgsFromTrafficLightRecursive2(TypedDict, total=False):
    """Arguments for TrafficLight"""
    take: int
    skip: int
    order_by: Union['ScenarioOrderByInput', List['ScenarioOrderByInput']]
    where: 'ScenarioWhereInput'
    cursor: 'ScenarioWhereUniqueInput'
    distinct: List['ScenarioScalarFieldKeys']
    include: 'ScenarioIncludeFromScenarioRecursive3'


class FindManyScenarioArgsFromTrafficLightRecursive3(TypedDict, total=False):
    """Arguments for TrafficLight"""
    take: int
    skip: int
    order_by: Union['ScenarioOrderByInput', List['ScenarioOrderByInput']]
    where: 'ScenarioWhereInput'
    cursor: 'ScenarioWhereUniqueInput'
    distinct: List['ScenarioScalarFieldKeys']
    include: 'ScenarioIncludeFromScenarioRecursive4'


class FindManyScenarioArgsFromTrafficLightRecursive4(TypedDict, total=False):
    """Arguments for TrafficLight"""
    take: int
    skip: int
    order_by: Union['ScenarioOrderByInput', List['ScenarioOrderByInput']]
    where: 'ScenarioWhereInput'
    cursor: 'ScenarioWhereUniqueInput'
    distinct: List['ScenarioScalarFieldKeys']
    
    

class SocialReportIncludeFromTrafficLight(TypedDict, total=False):
    """Relational arguments for TrafficLight"""


class SocialReportIncludeFromTrafficLightRecursive1(TypedDict, total=False):
    """Relational arguments for TrafficLight"""


class SocialReportIncludeFromTrafficLightRecursive2(TypedDict, total=False):
    """Relational arguments for TrafficLight"""


class SocialReportIncludeFromTrafficLightRecursive3(TypedDict, total=False):
    """Relational arguments for TrafficLight"""


class SocialReportIncludeFromTrafficLightRecursive4(TypedDict, total=False):
    """Relational arguments for TrafficLight"""

    

class SocialReportArgsFromTrafficLight(TypedDict, total=False):
    """Arguments for TrafficLight"""
    include: 'SocialReportIncludeFromSocialReportRecursive1'


class SocialReportArgsFromTrafficLightRecursive1(TypedDict, total=False):
    """Arguments for TrafficLight"""
    include: 'SocialReportIncludeFromSocialReportRecursive2'


class SocialReportArgsFromTrafficLightRecursive2(TypedDict, total=False):
    """Arguments for TrafficLight"""
    include: 'SocialReportIncludeFromSocialReportRecursive3'


class SocialReportArgsFromTrafficLightRecursive3(TypedDict, total=False):
    """Arguments for TrafficLight"""
    include: 'SocialReportIncludeFromSocialReportRecursive4'


class SocialReportArgsFromTrafficLightRecursive4(TypedDict, total=False):
    """Arguments for TrafficLight"""
    
    

class FindManySocialReportArgsFromTrafficLight(TypedDict, total=False):
    """Arguments for TrafficLight"""
    take: int
    skip: int
    order_by: Union['SocialReportOrderByInput', List['SocialReportOrderByInput']]
    where: 'SocialReportWhereInput'
    cursor: 'SocialReportWhereUniqueInput'
    distinct: List['SocialReportScalarFieldKeys']
    include: 'SocialReportIncludeFromSocialReportRecursive1'


class FindManySocialReportArgsFromTrafficLightRecursive1(TypedDict, total=False):
    """Arguments for TrafficLight"""
    take: int
    skip: int
    order_by: Union['SocialReportOrderByInput', List['SocialReportOrderByInput']]
    where: 'SocialReportWhereInput'
    cursor: 'SocialReportWhereUniqueInput'
    distinct: List['SocialReportScalarFieldKeys']
    include: 'SocialReportIncludeFromSocialReportRecursive2'


class FindManySocialReportArgsFromTrafficLightRecursive2(TypedDict, total=False):
    """Arguments for TrafficLight"""
    take: int
    skip: int
    order_by: Union['SocialReportOrderByInput', List['SocialReportOrderByInput']]
    where: 'SocialReportWhereInput'
    cursor: 'SocialReportWhereUniqueInput'
    distinct: List['SocialReportScalarFieldKeys']
    include: 'SocialReportIncludeFromSocialReportRecursive3'


class FindManySocialReportArgsFromTrafficLightRecursive3(TypedDict, total=False):
    """Arguments for TrafficLight"""
    take: int
    skip: int
    order_by: Union['SocialReportOrderByInput', List['SocialReportOrderByInput']]
    where: 'SocialReportWhereInput'
    cursor: 'SocialReportWhereUniqueInput'
    distinct: List['SocialReportScalarFieldKeys']
    include: 'SocialReportIncludeFromSocialReportRecursive4'


class FindManySocialReportArgsFromTrafficLightRecursive4(TypedDict, total=False):
    """Arguments for TrafficLight"""
    take: int
    skip: int
    order_by: Union['SocialReportOrderByInput', List['SocialReportOrderByInput']]
    where: 'SocialReportWhereInput'
    cursor: 'SocialReportWhereUniqueInput'
    distinct: List['SocialReportScalarFieldKeys']
    
    

class TrafficDataIncludeFromTrafficLight(TypedDict, total=False):
    """Relational arguments for TrafficLight"""


class TrafficDataIncludeFromTrafficLightRecursive1(TypedDict, total=False):
    """Relational arguments for TrafficLight"""


class TrafficDataIncludeFromTrafficLightRecursive2(TypedDict, total=False):
    """Relational arguments for TrafficLight"""


class TrafficDataIncludeFromTrafficLightRecursive3(TypedDict, total=False):
    """Relational arguments for TrafficLight"""


class TrafficDataIncludeFromTrafficLightRecursive4(TypedDict, total=False):
    """Relational arguments for TrafficLight"""

    

class TrafficDataArgsFromTrafficLight(TypedDict, total=False):
    """Arguments for TrafficLight"""
    include: 'TrafficDataIncludeFromTrafficDataRecursive1'


class TrafficDataArgsFromTrafficLightRecursive1(TypedDict, total=False):
    """Arguments for TrafficLight"""
    include: 'TrafficDataIncludeFromTrafficDataRecursive2'


class TrafficDataArgsFromTrafficLightRecursive2(TypedDict, total=False):
    """Arguments for TrafficLight"""
    include: 'TrafficDataIncludeFromTrafficDataRecursive3'


class TrafficDataArgsFromTrafficLightRecursive3(TypedDict, total=False):
    """Arguments for TrafficLight"""
    include: 'TrafficDataIncludeFromTrafficDataRecursive4'


class TrafficDataArgsFromTrafficLightRecursive4(TypedDict, total=False):
    """Arguments for TrafficLight"""
    
    

class FindManyTrafficDataArgsFromTrafficLight(TypedDict, total=False):
    """Arguments for TrafficLight"""
    take: int
    skip: int
    order_by: Union['TrafficDataOrderByInput', List['TrafficDataOrderByInput']]
    where: 'TrafficDataWhereInput'
    cursor: 'TrafficDataWhereUniqueInput'
    distinct: List['TrafficDataScalarFieldKeys']
    include: 'TrafficDataIncludeFromTrafficDataRecursive1'


class FindManyTrafficDataArgsFromTrafficLightRecursive1(TypedDict, total=False):
    """Arguments for TrafficLight"""
    take: int
    skip: int
    order_by: Union['TrafficDataOrderByInput', List['TrafficDataOrderByInput']]
    where: 'TrafficDataWhereInput'
    cursor: 'TrafficDataWhereUniqueInput'
    distinct: List['TrafficDataScalarFieldKeys']
    include: 'TrafficDataIncludeFromTrafficDataRecursive2'


class FindManyTrafficDataArgsFromTrafficLightRecursive2(TypedDict, total=False):
    """Arguments for TrafficLight"""
    take: int
    skip: int
    order_by: Union['TrafficDataOrderByInput', List['TrafficDataOrderByInput']]
    where: 'TrafficDataWhereInput'
    cursor: 'TrafficDataWhereUniqueInput'
    distinct: List['TrafficDataScalarFieldKeys']
    include: 'TrafficDataIncludeFromTrafficDataRecursive3'


class FindManyTrafficDataArgsFromTrafficLightRecursive3(TypedDict, total=False):
    """Arguments for TrafficLight"""
    take: int
    skip: int
    order_by: Union['TrafficDataOrderByInput', List['TrafficDataOrderByInput']]
    where: 'TrafficDataWhereInput'
    cursor: 'TrafficDataWhereUniqueInput'
    distinct: List['TrafficDataScalarFieldKeys']
    include: 'TrafficDataIncludeFromTrafficDataRecursive4'


class FindManyTrafficDataArgsFromTrafficLightRecursive4(TypedDict, total=False):
    """Arguments for TrafficLight"""
    take: int
    skip: int
    order_by: Union['TrafficDataOrderByInput', List['TrafficDataOrderByInput']]
    where: 'TrafficDataWhereInput'
    cursor: 'TrafficDataWhereUniqueInput'
    distinct: List['TrafficDataScalarFieldKeys']
    
    

class TrafficLightIncludeFromTrafficLight(TypedDict, total=False):
    """Relational arguments for TrafficLight"""


class TrafficLightIncludeFromTrafficLightRecursive1(TypedDict, total=False):
    """Relational arguments for TrafficLight"""


class TrafficLightIncludeFromTrafficLightRecursive2(TypedDict, total=False):
    """Relational arguments for TrafficLight"""


class TrafficLightIncludeFromTrafficLightRecursive3(TypedDict, total=False):
    """Relational arguments for TrafficLight"""


class TrafficLightIncludeFromTrafficLightRecursive4(TypedDict, total=False):
    """Relational arguments for TrafficLight"""

    

class TrafficLightArgsFromTrafficLight(TypedDict, total=False):
    """Arguments for TrafficLight"""
    include: 'TrafficLightIncludeFromTrafficLightRecursive1'


class TrafficLightArgsFromTrafficLightRecursive1(TypedDict, total=False):
    """Arguments for TrafficLight"""
    include: 'TrafficLightIncludeFromTrafficLightRecursive2'


class TrafficLightArgsFromTrafficLightRecursive2(TypedDict, total=False):
    """Arguments for TrafficLight"""
    include: 'TrafficLightIncludeFromTrafficLightRecursive3'


class TrafficLightArgsFromTrafficLightRecursive3(TypedDict, total=False):
    """Arguments for TrafficLight"""
    include: 'TrafficLightIncludeFromTrafficLightRecursive4'


class TrafficLightArgsFromTrafficLightRecursive4(TypedDict, total=False):
    """Arguments for TrafficLight"""
    
    

class FindManyTrafficLightArgsFromTrafficLight(TypedDict, total=False):
    """Arguments for TrafficLight"""
    take: int
    skip: int
    order_by: Union['TrafficLightOrderByInput', List['TrafficLightOrderByInput']]
    where: 'TrafficLightWhereInput'
    cursor: 'TrafficLightWhereUniqueInput'
    distinct: List['TrafficLightScalarFieldKeys']
    include: 'TrafficLightIncludeFromTrafficLightRecursive1'


class FindManyTrafficLightArgsFromTrafficLightRecursive1(TypedDict, total=False):
    """Arguments for TrafficLight"""
    take: int
    skip: int
    order_by: Union['TrafficLightOrderByInput', List['TrafficLightOrderByInput']]
    where: 'TrafficLightWhereInput'
    cursor: 'TrafficLightWhereUniqueInput'
    distinct: List['TrafficLightScalarFieldKeys']
    include: 'TrafficLightIncludeFromTrafficLightRecursive2'


class FindManyTrafficLightArgsFromTrafficLightRecursive2(TypedDict, total=False):
    """Arguments for TrafficLight"""
    take: int
    skip: int
    order_by: Union['TrafficLightOrderByInput', List['TrafficLightOrderByInput']]
    where: 'TrafficLightWhereInput'
    cursor: 'TrafficLightWhereUniqueInput'
    distinct: List['TrafficLightScalarFieldKeys']
    include: 'TrafficLightIncludeFromTrafficLightRecursive3'


class FindManyTrafficLightArgsFromTrafficLightRecursive3(TypedDict, total=False):
    """Arguments for TrafficLight"""
    take: int
    skip: int
    order_by: Union['TrafficLightOrderByInput', List['TrafficLightOrderByInput']]
    where: 'TrafficLightWhereInput'
    cursor: 'TrafficLightWhereUniqueInput'
    distinct: List['TrafficLightScalarFieldKeys']
    include: 'TrafficLightIncludeFromTrafficLightRecursive4'


class FindManyTrafficLightArgsFromTrafficLightRecursive4(TypedDict, total=False):
    """Arguments for TrafficLight"""
    take: int
    skip: int
    order_by: Union['TrafficLightOrderByInput', List['TrafficLightOrderByInput']]
    where: 'TrafficLightWhereInput'
    cursor: 'TrafficLightWhereUniqueInput'
    distinct: List['TrafficLightScalarFieldKeys']
    


FindManyTrafficLightArgs = FindManyTrafficLightArgsFromTrafficLight
FindFirstTrafficLightArgs = FindManyTrafficLightArgsFromTrafficLight


    

class TrafficLightWhereInput(TypedDict, total=False):
    """TrafficLight arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    location: Union['fields.Base64', 'types.BytesFilter']
    currentState: Union[_str, 'types.StringFilter']
    redStateDuration: Union[_int, 'types.IntFilter']
    greenStateDuration: Union[_int, 'types.IntFilter']
    recommendedState: Union[None, _str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['TrafficLightWhereInputRecursive1', List['TrafficLightWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['TrafficLightWhereInputRecursive1']
    OR: List['TrafficLightWhereInputRecursive1']
    NOT: List['TrafficLightWhereInputRecursive1']


class TrafficLightWhereInputRecursive1(TypedDict, total=False):
    """TrafficLight arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    location: Union['fields.Base64', 'types.BytesFilter']
    currentState: Union[_str, 'types.StringFilter']
    redStateDuration: Union[_int, 'types.IntFilter']
    greenStateDuration: Union[_int, 'types.IntFilter']
    recommendedState: Union[None, _str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['TrafficLightWhereInputRecursive2', List['TrafficLightWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['TrafficLightWhereInputRecursive2']
    OR: List['TrafficLightWhereInputRecursive2']
    NOT: List['TrafficLightWhereInputRecursive2']


class TrafficLightWhereInputRecursive2(TypedDict, total=False):
    """TrafficLight arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    location: Union['fields.Base64', 'types.BytesFilter']
    currentState: Union[_str, 'types.StringFilter']
    redStateDuration: Union[_int, 'types.IntFilter']
    greenStateDuration: Union[_int, 'types.IntFilter']
    recommendedState: Union[None, _str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['TrafficLightWhereInputRecursive3', List['TrafficLightWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['TrafficLightWhereInputRecursive3']
    OR: List['TrafficLightWhereInputRecursive3']
    NOT: List['TrafficLightWhereInputRecursive3']


class TrafficLightWhereInputRecursive3(TypedDict, total=False):
    """TrafficLight arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    location: Union['fields.Base64', 'types.BytesFilter']
    currentState: Union[_str, 'types.StringFilter']
    redStateDuration: Union[_int, 'types.IntFilter']
    greenStateDuration: Union[_int, 'types.IntFilter']
    recommendedState: Union[None, _str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['TrafficLightWhereInputRecursive4', List['TrafficLightWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['TrafficLightWhereInputRecursive4']
    OR: List['TrafficLightWhereInputRecursive4']
    NOT: List['TrafficLightWhereInputRecursive4']


class TrafficLightWhereInputRecursive4(TypedDict, total=False):
    """TrafficLight arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    location: Union['fields.Base64', 'types.BytesFilter']
    currentState: Union[_str, 'types.StringFilter']
    redStateDuration: Union[_int, 'types.IntFilter']
    greenStateDuration: Union[_int, 'types.IntFilter']
    recommendedState: Union[None, _str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']



# aggregate TrafficLight types


    

class TrafficLightScalarWhereWithAggregatesInput(TypedDict, total=False):
    """TrafficLight arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    location: Union['fields.Base64', 'types.BytesWithAggregatesFilter']
    currentState: Union[_str, 'types.StringWithAggregatesFilter']
    redStateDuration: Union[_int, 'types.IntWithAggregatesFilter']
    greenStateDuration: Union[_int, 'types.IntWithAggregatesFilter']
    recommendedState: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['TrafficLightScalarWhereWithAggregatesInputRecursive1']
    OR: List['TrafficLightScalarWhereWithAggregatesInputRecursive1']
    NOT: List['TrafficLightScalarWhereWithAggregatesInputRecursive1']


class TrafficLightScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """TrafficLight arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    location: Union['fields.Base64', 'types.BytesWithAggregatesFilter']
    currentState: Union[_str, 'types.StringWithAggregatesFilter']
    redStateDuration: Union[_int, 'types.IntWithAggregatesFilter']
    greenStateDuration: Union[_int, 'types.IntWithAggregatesFilter']
    recommendedState: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['TrafficLightScalarWhereWithAggregatesInputRecursive2']
    OR: List['TrafficLightScalarWhereWithAggregatesInputRecursive2']
    NOT: List['TrafficLightScalarWhereWithAggregatesInputRecursive2']


class TrafficLightScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """TrafficLight arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    location: Union['fields.Base64', 'types.BytesWithAggregatesFilter']
    currentState: Union[_str, 'types.StringWithAggregatesFilter']
    redStateDuration: Union[_int, 'types.IntWithAggregatesFilter']
    greenStateDuration: Union[_int, 'types.IntWithAggregatesFilter']
    recommendedState: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['TrafficLightScalarWhereWithAggregatesInputRecursive3']
    OR: List['TrafficLightScalarWhereWithAggregatesInputRecursive3']
    NOT: List['TrafficLightScalarWhereWithAggregatesInputRecursive3']


class TrafficLightScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """TrafficLight arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    location: Union['fields.Base64', 'types.BytesWithAggregatesFilter']
    currentState: Union[_str, 'types.StringWithAggregatesFilter']
    redStateDuration: Union[_int, 'types.IntWithAggregatesFilter']
    greenStateDuration: Union[_int, 'types.IntWithAggregatesFilter']
    recommendedState: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['TrafficLightScalarWhereWithAggregatesInputRecursive4']
    OR: List['TrafficLightScalarWhereWithAggregatesInputRecursive4']
    NOT: List['TrafficLightScalarWhereWithAggregatesInputRecursive4']


class TrafficLightScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """TrafficLight arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    location: Union['fields.Base64', 'types.BytesWithAggregatesFilter']
    currentState: Union[_str, 'types.StringWithAggregatesFilter']
    redStateDuration: Union[_int, 'types.IntWithAggregatesFilter']
    greenStateDuration: Union[_int, 'types.IntWithAggregatesFilter']
    recommendedState: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']



class TrafficLightGroupByOutput(TypedDict, total=False):
    id: _str
    location: 'fields.Base64'
    currentState: _str
    redStateDuration: _int
    greenStateDuration: _int
    recommendedState: _str
    createdAt: datetime.datetime
    _sum: 'TrafficLightSumAggregateOutput'
    _avg: 'TrafficLightAvgAggregateOutput'
    _min: 'TrafficLightMinAggregateOutput'
    _max: 'TrafficLightMaxAggregateOutput'
    _count: 'TrafficLightCountAggregateOutput'


class TrafficLightAvgAggregateOutput(TypedDict, total=False):
    """TrafficLight output for aggregating averages"""
    redStateDuration: float
    greenStateDuration: float


class TrafficLightSumAggregateOutput(TypedDict, total=False):
    """TrafficLight output for aggregating sums"""
    redStateDuration: _int
    greenStateDuration: _int


class TrafficLightScalarAggregateOutput(TypedDict, total=False):
    """TrafficLight output including scalar fields"""
    id: _str
    location: 'fields.Base64'
    currentState: _str
    redStateDuration: _int
    greenStateDuration: _int
    recommendedState: _str
    createdAt: datetime.datetime


TrafficLightMinAggregateOutput = TrafficLightScalarAggregateOutput
TrafficLightMaxAggregateOutput = TrafficLightScalarAggregateOutput


class TrafficLightMaxAggregateInput(TypedDict, total=False):
    """TrafficLight input for aggregating by max"""
    id: bool
    location: bool
    currentState: bool
    redStateDuration: bool
    greenStateDuration: bool
    recommendedState: bool
    createdAt: bool


class TrafficLightMinAggregateInput(TypedDict, total=False):
    """TrafficLight input for aggregating by min"""
    id: bool
    location: bool
    currentState: bool
    redStateDuration: bool
    greenStateDuration: bool
    recommendedState: bool
    createdAt: bool


class TrafficLightNumberAggregateInput(TypedDict, total=False):
    """TrafficLight input for aggregating numbers"""
    redStateDuration: bool
    greenStateDuration: bool


TrafficLightAvgAggregateInput = TrafficLightNumberAggregateInput
TrafficLightSumAggregateInput = TrafficLightNumberAggregateInput


TrafficLightCountAggregateInput = TypedDict(
    'TrafficLightCountAggregateInput',
    {
        'id': bool,
        'location': bool,
        'currentState': bool,
        'redStateDuration': bool,
        'greenStateDuration': bool,
        'recommendedState': bool,
        'createdAt': bool,
        '_all': bool,
    },
    total=False,
)

TrafficLightCountAggregateOutput = TypedDict(
    'TrafficLightCountAggregateOutput',
    {
        'id': int,
        'location': int,
        'currentState': int,
        'redStateDuration': int,
        'greenStateDuration': int,
        'recommendedState': int,
        'createdAt': int,
        '_all': int,
    },
    total=False,
)


TrafficLightKeys = Literal[
    'id',
    'location',
    'currentState',
    'redStateDuration',
    'greenStateDuration',
    'recommendedState',
    'createdAt',
]
TrafficLightScalarFieldKeys = Literal[
    'id',
    'location',
    'currentState',
    'redStateDuration',
    'greenStateDuration',
    'recommendedState',
    'createdAt',
]
TrafficLightScalarFieldKeysT = TypeVar('TrafficLightScalarFieldKeysT', bound=TrafficLightScalarFieldKeys)

TrafficLightRelationalFieldKeys = _NoneType



# we have to import ourselves as types can be namespaced to types
from . import types, enums, models, fields